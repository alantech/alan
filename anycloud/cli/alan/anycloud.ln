from @std/app import start, print, eprint, exit
from @std/avmdaemon import controlPort, getClusterSecret, Connection, body, send, status
from @std/cmd import exec
from @std/datastore import namespace, getOr, set, has, del
from @std/http import fetch, Request
from @std/tcpserver import tunnel

type ModeAndKey {
  mode: string,
  key: string,
}

type ServiceRequestBody {
  errorCode: int64,
  accessToken: string,
  osName: string,
  alanVersion: string,
  level: string,
}

on start {
  print('Starting Anycloud...');

  const alanVersion = exec('alan --version');
  if alanVersion.exitCode != 0 {
    eprint('Error getting alan version');
  }
  const alanTechEnv = exec('echo $ALAN_TECH_ENV');
  if alanTechEnv.exitCode != 0 {
    eprint('Error retreiveing $ALAN_TECH_ENV variable');
  }
  const serviceUrl = alanTechEnv.stdout == 'staging' ? 
    'https://deploy-staging.alantechnologies.com' : 
    'https://deploy.alantechnologies.com';
  const errorEndpoint = '/clientError';

  const clusterSecret = getClusterSecret();
  if clusterSecret.isNone() {
    const err = 'No cluster secret defined';
    eprint(err);
    emit exit 1;
  }

  const untarRes = exec('tar -xzf app.tar.gz');
  if untarRes.exitCode != 0 {
    eprint('app.tar.gz could not be unpacked');
    eprint(untarRes.stderr);
    emit exit untarRes.exitCode;
  }

  const dockerRes = exec('docker build -t anycloud/app .');
  if dockerRes.exitCode != 0 {
    eprint('Docker container could not be built');
    eprint(dockerRes.stderr);
    // const body = new ServiceRequestBody {
    //   errorCode: 130,
    //   accessToken: "anycloud",
    //   osName: "anycloud",
    //   alanVersion: alanVersion.stdout,
    //   level: "error",
    // };
    // const body = "{errorCode: 130, accessToken: 'anycloud', osName: 'anycloud', alanVersion: " + alanVersion.stdout + ", level: 'error'}";
    const body = "";
    const res = fetch(new Request {
      method: 'POST',
      url: serviceUrl + errorEndpoint,
      headers: newHashMap('Content-Length', body.length().toString()),
      body: body,
    });
    print("Response:");
    print(res.isOk());
    emit exit dockerRes.exitCode;
  }

  // We need to use the --env-file option only if we are sure the file exists 
  const envFile = exec('stat anycloud.env');
  const containerStr = envFile.exitCode != 0 ? 
    ('docker run --env CLUSTER_SECRET=' + clusterSecret.getOrExit() + ' --net=host -d anycloud/app:latest') : 
    ('docker run --env CLUSTER_SECRET=' + clusterSecret.getOrExit() + ' --env-file anycloud.env --net=host -d anycloud/app:latest');
  const containerRes = exec(containerStr);
  if containerRes.exitCode != 0 {
    eprint('Docker container could not be started');
    eprint(containerRes.stderr);
    emit exit containerRes.exitCode;
  }

  let connected = tunnel(8088);
  print(connected ? "Tunneling to 8088" : "Failed to establish a tunnel");
}

on controlPort fn (conn: Connection) {
  const req = conn.req;
  const res = conn.res;
  const modeAndKey = getModeAndKey(req.url);
  if modeAndKey.isErr() {
    res.status(400).body(modeAndKey.getErr(error("Invalid access")).toString()).send();
  } else {
    const ns = namespace('kv');
    const modeStr = modeAndKey.getOrExit().mode;
    const keyStr = modeAndKey.getOrExit().key;
    if modeStr == 'get' {
      res.body(ns.getOr(keyStr, '<key not found>')).send();
    } else if modeStr == 'set' {
      ns.set(keyStr, req.body);
      res.body('ok').send();
    } else if modeStr == 'has' {
      res.body(ns.has(keyStr).toString()).send();
    } else if modeStr == 'del' {
      res.body(ns.del(keyStr).toString()).send();
    } else {
      res.status(400).body('Invalid access').send();
    }
  }
}

fn getModeAndKey(url: string): Result<ModeAndKey> {
  const parts = url.split('/');
  const len = parts.length();
  const mode = parts[len - 2]; 
  const key = parts[len - 1];
  if mode.isErr() || key.isErr() {
    return err('Invalid URL');
  } else {
    return ok(new ModeAndKey {
      mode: mode || 'invalid',
      key: key || 'invalid',
    });
  }
}