from @std/app import start, print, eprint, exit
from @std/avmdaemon import controlPort, getClusterSecret
from @std/cmd import exec
from @std/datastore import namespace, getOr, set, has, del
from @std/http import fetch, Request, Response
from @std/httpserver import connection, Connection, body, send, status

type ModeAndKey {
  mode: string,
  key: string,
}

on start {
  print('Starting Anycloud...');
  const untarRes = exec('tar -xzf app.tar.gz');
  if untarRes.exitCode != 0 {
    eprint('app.tar.gz could not be unpacked');
    eprint(untarRes.stderr);
    emit exit untarRes.exitCode;
  }

  const dockerRes = exec('docker build -t anycloud/app .');
  if dockerRes.exitCode != 0 {
    eprint('Docker container could not be built');
    eprint(dockerRes.stderr);
    emit exit dockerRes.exitCode;
  }

  const clusterSecret = getClusterSecret();
  if clusterSecret.isNone() {
    eprint('No cluster secret defined');
    emit exit 1;
  }

  // We need to use the --env-file option only if we are sure the file exists 
  const envFile = exec('stat anycloud.env');
  const containerStr = envFile.exitCode != 0 ? 
    ('docker run --env CLUSTER_SECRET=' + clusterSecret.getOrExit() + ' --net=host -d anycloud/app:latest') : 
    ('docker run --env CLUSTER_SECRET=' + clusterSecret.getOrExit() + ' --env-file anycloud.env --net=host -d anycloud/app:latest');
  const containerRes = exec(containerStr);
  if containerRes.exitCode != 0 {
    eprint('Docker container could not be started');
    eprint(containerRes.stderr);
    emit exit containerRes.exitCode;
  }
}

on connection fn (conn: Connection) {
  const req = conn.req;
  const innerRes = fetch(new Request {
    method: req.method,
    headers: req.headers,
    body: req.body,
    url: 'http://localhost:8088' + req.url,
  });
  const res = conn.res;
  if innerRes.isErr() {
    res.status = 500;
    res.body('Internal Server Error').send();
  } else {
    const unwrappedRes = innerRes.getOrExit(); // Safe because of conditional checking
    res.status = unwrappedRes.status;
    res.headers = unwrappedRes.headers;
    res.body(unwrappedRes.body).send();
  }
}

on controlPort fn (conn: Connection) {
  const req = conn.req;
  const res = conn.res;
  const modeAndKey = getModeAndKey(req.url);
  if modeAndKey.isErr() {
    res.status(400).body(modeAndKey.getErr(error("Invalid access")).toString()).send();
  } else {
    const ns = namespace('kv');
    const modeStr = modeAndKey.getOrExit().mode;
    const keyStr = modeAndKey.getOrExit().key;
    if modeStr == 'get' {
      res.body(ns.getOr(keyStr, '<key not found>')).send();
    } else if modeStr == 'set' {
      ns.set(keyStr, req.body);
      res.body('ok').send();
    } else if modeStr == 'has' {
      res.body(ns.has(keyStr).toString()).send();
    } else if modeStr == 'del' {
      res.body(ns.del(keyStr).toString()).send();
    } else {
      res.status(400).body('Invalid access').send();
    }
  }
}

fn getModeAndKey(url: string): Result<ModeAndKey> {
  const parts = url.split('/');
  const len = parts.length();
  const mode = parts[len - 2]; 
  const key = parts[len - 1];
  if mode.isErr() || key.isErr() {
    return err('Invalid URL');
  } else {
    return ok(new ModeAndKey {
      mode: mode || 'invalid',
      key: key || 'invalid',
    });
  }
}
