from @std/app import start, print, eprint, exit
from @std/avmdaemon import controlPort, getClusterSecret, Connection, body, send, status
from @std/cmd import exec
from @std/datastore import namespace, getOr, set, has, del
from @std/http import post
from @std/tcpserver import tunnel

type ModeAndKey {
  mode: string,
  key: string,
}

const alanTechEnv = exec('echo $ALAN_TECH_ENV');
const serviceUrl = alanTechEnv == 'staging' ? 
  'https://deploy-staging.alantechnologies.com' : 
  'https://deploy.alantechnologies.com';
const errorEndpoint = '/clientError';

on start {
  print('Starting Anycloud...');
  const untarRes = exec('tar -xzf app.tar.gz');
  if untarRes.exitCode != 0 {
    const err = 'app.tar.gz could not be unpacked';
    eprint(err);
    eprint(untarRes.stderr);
    post(err + ' | ' + untarRes.stderr);
    emit exit untarRes.exitCode;
  }

  const dockerRes = exec('docker build -t anycloud/app .');
  if dockerRes.exitCode != 0 {
    const err = 'Docker container could not be built';
    eprint(err);
    eprint(dockerRes.stderr);
    setRunError(err + ' | ' + dockerRes.stderr);
    emit exit dockerRes.exitCode;
  }

  const clusterSecret = getClusterSecret();
  if clusterSecret.isNone() {
    const err = 'No cluster secret defined';
    eprint(err);
    setRunError(err);
    emit exit 1;
  }

  // We need to use the --env-file option only if we are sure the file exists 
  const envFile = exec('stat anycloud.env');
  const containerStr = envFile.exitCode != 0 ? 
    ('docker run --env CLUSTER_SECRET=' + clusterSecret.getOrExit() + ' --net=host -d anycloud/app:latest') : 
    ('docker run --env CLUSTER_SECRET=' + clusterSecret.getOrExit() + ' --env-file anycloud.env --net=host -d anycloud/app:latest');
  const containerRes = exec(containerStr);
  if containerRes.exitCode != 0 {
    const err = 'Docker container could not be started'; 
    eprint(err);
    eprint(containerRes.stderr);
    setRunError(err + ' | ' + containerRes.stderr);
    emit exit containerRes.exitCode;
  }

  let connected = tunnel(8088);
  print(connected ? "Tunneling to 8088" : "Failed to establish a tunnel");
}

on controlPort fn (conn: Connection) {
  const req = conn.req;
  const res = conn.res;
  const modeAndKey = getModeAndKey(req.url);
  if modeAndKey.isErr() {
    res.status(400).body(modeAndKey.getErr(error("Invalid access")).toString()).send();
  } else {
    const ns = namespace('kv');
    const modeStr = modeAndKey.getOrExit().mode;
    const keyStr = modeAndKey.getOrExit().key;
    if modeStr == 'get' {
      res.body(ns.getOr(keyStr, '<key not found>')).send();
    } else if modeStr == 'set' {
      ns.set(keyStr, req.body);
      res.body('ok').send();
    } else if modeStr == 'has' {
      res.body(ns.has(keyStr).toString()).send();
    } else if modeStr == 'del' {
      res.body(ns.del(keyStr).toString()).send();
    } else {
      res.status(400).body('Invalid access').send();
    }
  }
}

fn getModeAndKey(url: string): Result<ModeAndKey> {
  const parts = url.split('/');
  const len = parts.length();
  const mode = parts[len - 2]; 
  const key = parts[len - 1];
  if mode.isErr() || key.isErr() {
    return err('Invalid URL');
  } else {
    return ok(new ModeAndKey {
      mode: mode || 'invalid',
      key: key || 'invalid',
    });
  }
}
