
        from @std/app import start, print, exit
        from @std/seq import seq, Self, recurse

        on start {
          print(seq(100).recurse(fn fibonacci(self: Self, i: int64): Result<int64> {
            if i < 2 {
              return ok(1);
            } else {
              const prev = self.recurse(i - 1 || 0);
              const prevPrev = self.recurse(i - 2 || 0);
              if prev.isErr() {
                return prev;
              }
              if prevPrev.isErr() {
                return prevPrev;
              }
              // TODO: Get type inference inside of recurse working so we don't need to unwrap these
              return (prev || 0) + (prevPrev || 0);
            }
          }, 8));
          emit exit 0;
        }
      
