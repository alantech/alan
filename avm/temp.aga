Alan Graphcode Assembler v0.0.1

globalMem
  @-1: 1i64
  @-9: 2i64
  @-17: 3i64
  @-25: 5i64
  @-33: 8i64
  @-41: 6i64
  @-49: ""
  @-57: ", "
  @-73: 0i64
  @-81: "\n"

customEvents
  stdout: -1
  exit: 8
  stderr: -1
  _b97705ba_9775_43d4_8dee_116d9e2be145: 0
  _f109240f_7953_41c8_b62a_6809990bbfa2: 0

handler for _start with size 50
  @0 = newarr(@-41, @0) #0
  pusharr(@0, @-1, @-33) #1 <- [#0]
  pusharr(@0, @-1, @-33) #2 <- [#0]
  pusharr(@0, @-9, @-33) #3 <- [#0]
  pusharr(@0, @-17, @-33) #4 <- [#0]
  pusharr(@0, @-25, @-33) #5 <- [#0]
  pusharr(@0, @-33, @-33) #6 <- [#0]
  @45 = newarr(@-9, @0) #7 <- [#0]
  pusharr(@45, @0, @-73) #8 <- [#7, #0]
  pusharr(@45, @-49, @-73) #9 <- [#7]
  @46 = foldp(@45, _b97705ba_9775_43d4_8dee_116d9e2be145) #10 <- [#7, #0]
  @47 = reducep(@46, _f109240f_7953_41c8_b62a_6809990bbfa2) #11 <- [#10, #0]
  @48 = catstr(@47, @-81) #12 <- [#11]
  @49 = stdoutp(@48, @0) #13 <- [#12, #0]
  emit(exit, @-73) #14 <- [#0]

handler for stdout with size 2
  @1 = stdoutp(@0, @0) #0

handler for exit with size 2
  @1 = exitop(@0, @0) #0

handler for stderr with size 2
  @1 = stderrp(@0, @0) #0

closure for _b97705ba_9775_43d4_8dee_116d9e2be145 with size 50
  @-9223372036854775803 = refv(@-9223372036854775807, @0) #0
  @-9223372036854775802 = refv(@-9223372036854775806, @0) #1
  @1 = eqstr(@-9223372036854775803, @-49) #2 <- [#0]
  @2 = modi64(@-9223372036854775802, @-9) #3 <- [#1]
  @3 = eqi64(@2, @-1) #4 <- [#3]
  @4 = andbool(@1, @3) #5 <- [#2, #4]
  @5 = i64str(@-9223372036854775802, @0) #6 <- [#1]
  @6 = i64str(@-9223372036854775802, @0) #7 <- [#1]
  @7 = catstr(@-9223372036854775803, @-57) #8 <- [#0]
  @8 = catstr(@7, @6) #9 <- [#8, #7]
  @9 = newarr(@-9, @0) #10
  pusharr(@9, @8, @-73) #11 <- [#10, #9]
  pusharr(@9, @-9223372036854775803, @-73) #12 <- [#10, #0]
  @10 = modi64(@-9223372036854775802, @-9) #13 <- [#1]
  @11 = eqi64(@10, @-1) #14 <- [#13]
  @12 = booli64(@11, @0) #15 <- [#14]
  @13 = okR(@-1, @-33) #16
  @14 = okR(@12, @-33) #17 <- [#15]
  @15 = subi64(@13, @14) #18 <- [#16, #17]
  @16 = resfrom(@9, @15) #19 <- [#10, #18]
  @17 = getR(@16, @0) #20 <- [#19]
  @18 = newarr(@-9, @0) #21
  pusharr(@18, @5, @-73) #22 <- [#21, #6]
  pusharr(@18, @17, @-73) #23 <- [#21, #20]
  @19 = booli64(@4, @0) #24 <- [#5]
  @20 = okR(@-1, @-33) #25
  @21 = okR(@19, @-33) #26 <- [#24]
  @22 = subi64(@20, @21) #27 <- [#25, #26]
  @23 = resfrom(@18, @22) #28 <- [#21, #27]
  @24 = getR(@23, @0) #29 <- [#28]
  @-9223372036854775808 = refv(@24, @0) #30 <- [#29]

closure for _f109240f_7953_41c8_b62a_6809990bbfa2 with size 50
  @-9223372036854775803 = refv(@-9223372036854775807, @0) #0
  @-9223372036854775802 = refv(@-9223372036854775806, @0) #1
  @25 = neqstr(@-9223372036854775803, @-49) #2 <- [#0]
  @26 = neqstr(@-9223372036854775802, @-49) #3 <- [#1]
  @27 = andbool(@25, @26) #4 <- [#2, #3]
  @28 = catstr(@-9223372036854775803, @-57) #5 <- [#0]
  @29 = catstr(@28, @-9223372036854775802) #6 <- [#5, #1]
  @30 = newarr(@-9, @0) #7
  pusharr(@30, @-9223372036854775803, @-73) #8 <- [#7, #0]
  pusharr(@30, @-9223372036854775802, @-73) #9 <- [#7, #1]
  @31 = neqstr(@-9223372036854775803, @-49) #10 <- [#0]
  @32 = booli64(@31, @0) #11 <- [#10]
  @33 = okR(@-1, @-33) #12
  @34 = okR(@32, @-33) #13 <- [#11]
  @35 = subi64(@33, @34) #14 <- [#12, #13]
  @36 = resfrom(@30, @35) #15 <- [#7, #14]
  @37 = getR(@36, @0) #16 <- [#15]
  @38 = newarr(@-9, @0) #17
  pusharr(@38, @29, @-73) #18 <- [#17, #6]
  pusharr(@38, @37, @-73) #19 <- [#17, #16]
  @39 = booli64(@27, @0) #20 <- [#4]
  @40 = okR(@-1, @-33) #21
  @41 = okR(@39, @-33) #22 <- [#20]
  @42 = subi64(@40, @41) #23 <- [#21, #22]
  @43 = resfrom(@38, @42) #24 <- [#17, #23]
  @44 = getR(@43, @0) #25 <- [#24]
  @-9223372036854775808 = refv(@44, @0) #26 <- [#25]
