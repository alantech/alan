// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `HandlerMemory.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct HandlerMemory {
    // message fields
    pub mems: ::protobuf::RepeatedField<HandlerMemory_Mems>,
    pub addr: ::protobuf::SingularPtrField<HandlerMemory_Addr>,
    pub mem_addr: u64,
    // message oneof groups
    pub _parent: ::std::option::Option<HandlerMemory_oneof__parent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandlerMemory {
    fn default() -> &'a HandlerMemory {
        <HandlerMemory as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HandlerMemory_oneof__parent {
    parent(::std::boxed::Box<HandlerMemory>),
}

impl HandlerMemory {
    pub fn new() -> HandlerMemory {
        ::std::default::Default::default()
    }

    // .HandlerMemory parent = 1;


    pub fn get_parent(&self) -> &HandlerMemory {
        match self._parent {
            ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(ref v)) => v,
            _ => <HandlerMemory as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_parent(&mut self) {
        self._parent = ::std::option::Option::None;
    }

    pub fn has_parent(&self) -> bool {
        match self._parent {
            ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: HandlerMemory) {
        self._parent = ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_parent(&mut self) -> &mut HandlerMemory {
        if let ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(_)) = self._parent {
        } else {
            self._parent = ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(::std::boxed::Box::new(HandlerMemory::new())));
        }
        match self._parent {
            ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_parent(&mut self) -> HandlerMemory {
        if self.has_parent() {
            match self._parent.take() {
                ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(v)) => *v,
                _ => panic!(),
            }
        } else {
            HandlerMemory::new()
        }
    }

    // repeated .HandlerMemory.Mems mems = 2;


    pub fn get_mems(&self) -> &[HandlerMemory_Mems] {
        &self.mems
    }
    pub fn clear_mems(&mut self) {
        self.mems.clear();
    }

    // Param is passed by value, moved
    pub fn set_mems(&mut self, v: ::protobuf::RepeatedField<HandlerMemory_Mems>) {
        self.mems = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mems(&mut self) -> &mut ::protobuf::RepeatedField<HandlerMemory_Mems> {
        &mut self.mems
    }

    // Take field
    pub fn take_mems(&mut self) -> ::protobuf::RepeatedField<HandlerMemory_Mems> {
        ::std::mem::replace(&mut self.mems, ::protobuf::RepeatedField::new())
    }

    // .HandlerMemory.Addr addr = 3;


    pub fn get_addr(&self) -> &HandlerMemory_Addr {
        self.addr.as_ref().unwrap_or_else(|| <HandlerMemory_Addr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    pub fn has_addr(&self) -> bool {
        self.addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: HandlerMemory_Addr) {
        self.addr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut HandlerMemory_Addr {
        if self.addr.is_none() {
            self.addr.set_default();
        }
        self.addr.as_mut().unwrap()
    }

    // Take field
    pub fn take_addr(&mut self) -> HandlerMemory_Addr {
        self.addr.take().unwrap_or_else(|| HandlerMemory_Addr::new())
    }

    // fixed64 mem_addr = 4;


    pub fn get_mem_addr(&self) -> u64 {
        self.mem_addr
    }
    pub fn clear_mem_addr(&mut self) {
        self.mem_addr = 0;
    }

    // Param is passed by value, moved
    pub fn set_mem_addr(&mut self, v: u64) {
        self.mem_addr = v;
    }
}

impl ::protobuf::Message for HandlerMemory {
    fn is_initialized(&self) -> bool {
        if let Some(HandlerMemory_oneof__parent::parent(ref v)) = self._parent {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.mems {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.addr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._parent = ::std::option::Option::Some(HandlerMemory_oneof__parent::parent(::std::boxed::Box::new(is.read_message()?)));
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mems)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.mem_addr = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.mems {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mem_addr != 0 {
            my_size += 9;
        }
        if let ::std::option::Option::Some(ref v) = self._parent {
            match v {
                &HandlerMemory_oneof__parent::parent(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.mems {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.addr.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mem_addr != 0 {
            os.write_fixed64(4, self.mem_addr)?;
        }
        if let ::std::option::Option::Some(ref v) = self._parent {
            match v {
                &HandlerMemory_oneof__parent::parent(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandlerMemory {
        HandlerMemory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HandlerMemory>(
                "parent",
                HandlerMemory::has_parent,
                HandlerMemory::get_parent,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HandlerMemory_Mems>>(
                "mems",
                |m: &HandlerMemory| { &m.mems },
                |m: &mut HandlerMemory| { &mut m.mems },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HandlerMemory_Addr>>(
                "addr",
                |m: &HandlerMemory| { &m.addr },
                |m: &mut HandlerMemory| { &mut m.addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "mem_addr",
                |m: &HandlerMemory| { &m.mem_addr },
                |m: &mut HandlerMemory| { &mut m.mem_addr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandlerMemory>(
                "HandlerMemory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandlerMemory {
        static instance: ::protobuf::rt::LazyV2<HandlerMemory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandlerMemory::new)
    }
}

impl ::protobuf::Clear for HandlerMemory {
    fn clear(&mut self) {
        self._parent = ::std::option::Option::None;
        self.mems.clear();
        self.addr.clear();
        self.mem_addr = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandlerMemory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandlerMemory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandlerMemory_MemBlock {
    // message fields
    pub mem_type: u64,
    pub mem_val: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandlerMemory_MemBlock {
    fn default() -> &'a HandlerMemory_MemBlock {
        <HandlerMemory_MemBlock as ::protobuf::Message>::default_instance()
    }
}

impl HandlerMemory_MemBlock {
    pub fn new() -> HandlerMemory_MemBlock {
        ::std::default::Default::default()
    }

    // fixed64 mem_type = 1;


    pub fn get_mem_type(&self) -> u64 {
        self.mem_type
    }
    pub fn clear_mem_type(&mut self) {
        self.mem_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_mem_type(&mut self, v: u64) {
        self.mem_type = v;
    }

    // sfixed64 mem_val = 2;


    pub fn get_mem_val(&self) -> i64 {
        self.mem_val
    }
    pub fn clear_mem_val(&mut self) {
        self.mem_val = 0;
    }

    // Param is passed by value, moved
    pub fn set_mem_val(&mut self, v: i64) {
        self.mem_val = v;
    }
}

impl ::protobuf::Message for HandlerMemory_MemBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.mem_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.mem_val = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mem_type != 0 {
            my_size += 9;
        }
        if self.mem_val != 0 {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mem_type != 0 {
            os.write_fixed64(1, self.mem_type)?;
        }
        if self.mem_val != 0 {
            os.write_sfixed64(2, self.mem_val)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandlerMemory_MemBlock {
        HandlerMemory_MemBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "mem_type",
                |m: &HandlerMemory_MemBlock| { &m.mem_type },
                |m: &mut HandlerMemory_MemBlock| { &mut m.mem_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "mem_val",
                |m: &HandlerMemory_MemBlock| { &m.mem_val },
                |m: &mut HandlerMemory_MemBlock| { &mut m.mem_val },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandlerMemory_MemBlock>(
                "HandlerMemory.MemBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandlerMemory_MemBlock {
        static instance: ::protobuf::rt::LazyV2<HandlerMemory_MemBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandlerMemory_MemBlock::new)
    }
}

impl ::protobuf::Clear for HandlerMemory_MemBlock {
    fn clear(&mut self) {
        self.mem_type = 0;
        self.mem_val = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandlerMemory_MemBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandlerMemory_MemBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandlerMemory_Mems {
    // message fields
    pub mem: ::protobuf::RepeatedField<HandlerMemory_MemBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandlerMemory_Mems {
    fn default() -> &'a HandlerMemory_Mems {
        <HandlerMemory_Mems as ::protobuf::Message>::default_instance()
    }
}

impl HandlerMemory_Mems {
    pub fn new() -> HandlerMemory_Mems {
        ::std::default::Default::default()
    }

    // repeated .HandlerMemory.MemBlock mem = 1;


    pub fn get_mem(&self) -> &[HandlerMemory_MemBlock] {
        &self.mem
    }
    pub fn clear_mem(&mut self) {
        self.mem.clear();
    }

    // Param is passed by value, moved
    pub fn set_mem(&mut self, v: ::protobuf::RepeatedField<HandlerMemory_MemBlock>) {
        self.mem = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mem(&mut self) -> &mut ::protobuf::RepeatedField<HandlerMemory_MemBlock> {
        &mut self.mem
    }

    // Take field
    pub fn take_mem(&mut self) -> ::protobuf::RepeatedField<HandlerMemory_MemBlock> {
        ::std::mem::replace(&mut self.mem, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HandlerMemory_Mems {
    fn is_initialized(&self) -> bool {
        for v in &self.mem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.mem {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.mem {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandlerMemory_Mems {
        HandlerMemory_Mems::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HandlerMemory_MemBlock>>(
                "mem",
                |m: &HandlerMemory_Mems| { &m.mem },
                |m: &mut HandlerMemory_Mems| { &mut m.mem },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandlerMemory_Mems>(
                "HandlerMemory.Mems",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandlerMemory_Mems {
        static instance: ::protobuf::rt::LazyV2<HandlerMemory_Mems> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandlerMemory_Mems::new)
    }
}

impl ::protobuf::Clear for HandlerMemory_Mems {
    fn clear(&mut self) {
        self.mem.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandlerMemory_Mems {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandlerMemory_Mems {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandlerMemory_MemSpaceStruct {
    // message fields
    pub first: u64,
    pub second: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandlerMemory_MemSpaceStruct {
    fn default() -> &'a HandlerMemory_MemSpaceStruct {
        <HandlerMemory_MemSpaceStruct as ::protobuf::Message>::default_instance()
    }
}

impl HandlerMemory_MemSpaceStruct {
    pub fn new() -> HandlerMemory_MemSpaceStruct {
        ::std::default::Default::default()
    }

    // fixed64 first = 1;


    pub fn get_first(&self) -> u64 {
        self.first
    }
    pub fn clear_first(&mut self) {
        self.first = 0;
    }

    // Param is passed by value, moved
    pub fn set_first(&mut self, v: u64) {
        self.first = v;
    }

    // fixed64 second = 2;


    pub fn get_second(&self) -> u64 {
        self.second
    }
    pub fn clear_second(&mut self) {
        self.second = 0;
    }

    // Param is passed by value, moved
    pub fn set_second(&mut self, v: u64) {
        self.second = v;
    }
}

impl ::protobuf::Message for HandlerMemory_MemSpaceStruct {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.first = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.second = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.first != 0 {
            my_size += 9;
        }
        if self.second != 0 {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.first != 0 {
            os.write_fixed64(1, self.first)?;
        }
        if self.second != 0 {
            os.write_fixed64(2, self.second)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandlerMemory_MemSpaceStruct {
        HandlerMemory_MemSpaceStruct::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "first",
                |m: &HandlerMemory_MemSpaceStruct| { &m.first },
                |m: &mut HandlerMemory_MemSpaceStruct| { &mut m.first },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "second",
                |m: &HandlerMemory_MemSpaceStruct| { &m.second },
                |m: &mut HandlerMemory_MemSpaceStruct| { &mut m.second },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandlerMemory_MemSpaceStruct>(
                "HandlerMemory.MemSpaceStruct",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandlerMemory_MemSpaceStruct {
        static instance: ::protobuf::rt::LazyV2<HandlerMemory_MemSpaceStruct> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandlerMemory_MemSpaceStruct::new)
    }
}

impl ::protobuf::Clear for HandlerMemory_MemSpaceStruct {
    fn clear(&mut self) {
        self.first = 0;
        self.second = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandlerMemory_MemSpaceStruct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandlerMemory_MemSpaceStruct {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandlerMemory_MemSpace {
    // message oneof groups
    pub _memspacestruct: ::std::option::Option<HandlerMemory_MemSpace_oneof__memspacestruct>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandlerMemory_MemSpace {
    fn default() -> &'a HandlerMemory_MemSpace {
        <HandlerMemory_MemSpace as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HandlerMemory_MemSpace_oneof__memspacestruct {
    memspacestruct(HandlerMemory_MemSpaceStruct),
}

impl HandlerMemory_MemSpace {
    pub fn new() -> HandlerMemory_MemSpace {
        ::std::default::Default::default()
    }

    // .HandlerMemory.MemSpaceStruct memspacestruct = 1;


    pub fn get_memspacestruct(&self) -> &HandlerMemory_MemSpaceStruct {
        match self._memspacestruct {
            ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(ref v)) => v,
            _ => <HandlerMemory_MemSpaceStruct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_memspacestruct(&mut self) {
        self._memspacestruct = ::std::option::Option::None;
    }

    pub fn has_memspacestruct(&self) -> bool {
        match self._memspacestruct {
            ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_memspacestruct(&mut self, v: HandlerMemory_MemSpaceStruct) {
        self._memspacestruct = ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(v))
    }

    // Mutable pointer to the field.
    pub fn mut_memspacestruct(&mut self) -> &mut HandlerMemory_MemSpaceStruct {
        if let ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(_)) = self._memspacestruct {
        } else {
            self._memspacestruct = ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(HandlerMemory_MemSpaceStruct::new()));
        }
        match self._memspacestruct {
            ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_memspacestruct(&mut self) -> HandlerMemory_MemSpaceStruct {
        if self.has_memspacestruct() {
            match self._memspacestruct.take() {
                ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(v)) => v,
                _ => panic!(),
            }
        } else {
            HandlerMemory_MemSpaceStruct::new()
        }
    }
}

impl ::protobuf::Message for HandlerMemory_MemSpace {
    fn is_initialized(&self) -> bool {
        if let Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(ref v)) = self._memspacestruct {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._memspacestruct = ::std::option::Option::Some(HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self._memspacestruct {
            match v {
                &HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self._memspacestruct {
            match v {
                &HandlerMemory_MemSpace_oneof__memspacestruct::memspacestruct(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandlerMemory_MemSpace {
        HandlerMemory_MemSpace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HandlerMemory_MemSpaceStruct>(
                "memspacestruct",
                HandlerMemory_MemSpace::has_memspacestruct,
                HandlerMemory_MemSpace::get_memspacestruct,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandlerMemory_MemSpace>(
                "HandlerMemory.MemSpace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandlerMemory_MemSpace {
        static instance: ::protobuf::rt::LazyV2<HandlerMemory_MemSpace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandlerMemory_MemSpace::new)
    }
}

impl ::protobuf::Clear for HandlerMemory_MemSpace {
    fn clear(&mut self) {
        self._memspacestruct = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandlerMemory_MemSpace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandlerMemory_MemSpace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandlerMemory_Addr {
    // message fields
    pub mem_space: ::protobuf::RepeatedField<HandlerMemory_MemSpace>,
    pub mem_space_args: ::protobuf::RepeatedField<HandlerMemory_MemSpace>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandlerMemory_Addr {
    fn default() -> &'a HandlerMemory_Addr {
        <HandlerMemory_Addr as ::protobuf::Message>::default_instance()
    }
}

impl HandlerMemory_Addr {
    pub fn new() -> HandlerMemory_Addr {
        ::std::default::Default::default()
    }

    // repeated .HandlerMemory.MemSpace mem_space = 1;


    pub fn get_mem_space(&self) -> &[HandlerMemory_MemSpace] {
        &self.mem_space
    }
    pub fn clear_mem_space(&mut self) {
        self.mem_space.clear();
    }

    // Param is passed by value, moved
    pub fn set_mem_space(&mut self, v: ::protobuf::RepeatedField<HandlerMemory_MemSpace>) {
        self.mem_space = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mem_space(&mut self) -> &mut ::protobuf::RepeatedField<HandlerMemory_MemSpace> {
        &mut self.mem_space
    }

    // Take field
    pub fn take_mem_space(&mut self) -> ::protobuf::RepeatedField<HandlerMemory_MemSpace> {
        ::std::mem::replace(&mut self.mem_space, ::protobuf::RepeatedField::new())
    }

    // repeated .HandlerMemory.MemSpace mem_space_args = 2;


    pub fn get_mem_space_args(&self) -> &[HandlerMemory_MemSpace] {
        &self.mem_space_args
    }
    pub fn clear_mem_space_args(&mut self) {
        self.mem_space_args.clear();
    }

    // Param is passed by value, moved
    pub fn set_mem_space_args(&mut self, v: ::protobuf::RepeatedField<HandlerMemory_MemSpace>) {
        self.mem_space_args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mem_space_args(&mut self) -> &mut ::protobuf::RepeatedField<HandlerMemory_MemSpace> {
        &mut self.mem_space_args
    }

    // Take field
    pub fn take_mem_space_args(&mut self) -> ::protobuf::RepeatedField<HandlerMemory_MemSpace> {
        ::std::mem::replace(&mut self.mem_space_args, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HandlerMemory_Addr {
    fn is_initialized(&self) -> bool {
        for v in &self.mem_space {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mem_space_args {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mem_space)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mem_space_args)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.mem_space {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.mem_space_args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.mem_space {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.mem_space_args {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandlerMemory_Addr {
        HandlerMemory_Addr::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HandlerMemory_MemSpace>>(
                "mem_space",
                |m: &HandlerMemory_Addr| { &m.mem_space },
                |m: &mut HandlerMemory_Addr| { &mut m.mem_space },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HandlerMemory_MemSpace>>(
                "mem_space_args",
                |m: &HandlerMemory_Addr| { &m.mem_space_args },
                |m: &mut HandlerMemory_Addr| { &mut m.mem_space_args },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandlerMemory_Addr>(
                "HandlerMemory.Addr",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandlerMemory_Addr {
        static instance: ::protobuf::rt::LazyV2<HandlerMemory_Addr> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandlerMemory_Addr::new)
    }
}

impl ::protobuf::Clear for HandlerMemory_Addr {
    fn clear(&mut self) {
        self.mem_space.clear();
        self.mem_space_args.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandlerMemory_Addr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandlerMemory_Addr {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13HandlerMemory.proto\"\xcf\x04\n\rHandlerMemory\x12+\n\x06parent\
    \x18\x01\x20\x01(\x0b2\x0e.HandlerMemoryH\0R\x06parent\x88\x01\x01\x12'\
    \n\x04mems\x18\x02\x20\x03(\x0b2\x13.HandlerMemory.MemsR\x04mems\x12'\n\
    \x04addr\x18\x03\x20\x01(\x0b2\x13.HandlerMemory.AddrR\x04addr\x12\x19\n\
    \x08mem_addr\x18\x04\x20\x01(\x06R\x07memAddr\x1a>\n\x08MemBlock\x12\x19\
    \n\x08mem_type\x18\x01\x20\x01(\x06R\x07memType\x12\x17\n\x07mem_val\x18\
    \x02\x20\x01(\x10R\x06memVal\x1a1\n\x04Mems\x12)\n\x03mem\x18\x01\x20\
    \x03(\x0b2\x17.HandlerMemory.MemBlockR\x03mem\x1a>\n\x0eMemSpaceStruct\
    \x12\x14\n\x05first\x18\x01\x20\x01(\x06R\x05first\x12\x16\n\x06second\
    \x18\x02\x20\x01(\x06R\x06second\x1ai\n\x08MemSpace\x12J\n\x0ememspacest\
    ruct\x18\x01\x20\x01(\x0b2\x1d.HandlerMemory.MemSpaceStructH\0R\x0ememsp\
    acestruct\x88\x01\x01B\x11\n\x0f_memspacestruct\x1a{\n\x04Addr\x124\n\tm\
    em_space\x18\x01\x20\x03(\x0b2\x17.HandlerMemory.MemSpaceR\x08memSpace\
    \x12=\n\x0emem_space_args\x18\x02\x20\x03(\x0b2\x17.HandlerMemory.MemSpa\
    ceR\x0cmemSpaceArgsB\t\n\x07_parentb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
