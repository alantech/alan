from @std/app import print, start, exit
on start {
  const res = add(toInt8(1), toInt8(2));
  emit exit res.getOrExit();
}

// on start {
//   if 0 == 1 {
//     print('true!');
//   } else if false {
//     print('yikes');
//     emit exit 0;
//     return;
//   } else {
//     print('oof');
//   }
//   (1 + 1).print();
//   emit exit 0;
// }

// on start {
//   const test = [ 1, 1, 2, 3, 5, 8 ];

//   // TODO: Even more ridiculous when you want to allow parallelism
//   test.reducePar(
//     fn (acc: string, i: int): string = ((acc == '') && (i % 2 == 1)) ? i.toString() : (i % 2 == 1 ? (acc + ', ' + i.toString()) : acc),
//     fn (acc: string, cur: string): string = ((acc != '') && (cur != '')) ? (acc + ', ' + cur) : (acc != '' ? acc : cur),
//     '').print();

//   emit exit 0;
// }
