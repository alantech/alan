// Generated from Ln.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var LnListener = require('./LnListener').LnListener;
var grammarFileName = "Ln.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003/\u04b1\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0003\u0002\u0007\u0002\u0088\n\u0002\f\u0002",
    "\u000e\u0002\u008b\u000b\u0002\u0003\u0002\u0007\u0002\u008e\n\u0002",
    "\f\u0002\u000e\u0002\u0091\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0006\u0002\u009c\n\u0002\r\u0002\u000e\u0002\u009d\u0006\u0002",
    "\u00a0\n\u0002\r\u0002\u000e\u0002\u00a1\u0003\u0002\u0005\u0002\u00a5",
    "\n\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u00ab\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00b4\n\u0005\u0003\u0005",
    "\u0006\u0005\u00b7\n\u0005\r\u0005\u000e\u0005\u00b8\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0006\u0006\u00c3\n\u0006\r\u0006\u000e\u0006\u00c4\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u00c9\n\u0007\u0003\b\u0003\b\u0006\b\u00cd",
    "\n\b\r\b\u000e\b\u00ce\u0003\b\u0003\b\u0006\b\u00d3\n\b\r\b\u000e\b",
    "\u00d4\u0005\b\u00d7\n\b\u0003\t\u0003\t\u0006\t\u00db\n\t\r\t\u000e",
    "\t\u00dc\u0003\n\u0003\n\u0006\n\u00e1\n\n\r\n\u000e\n\u00e2\u0003\n",
    "\u0003\n\u0007\n\u00e7\n\n\f\n\u000e\n\u00ea\u000b\n\u0003\n\u0005\n",
    "\u00ed\n\n\u0003\n\u0006\n\u00f0\n\n\r\n\u000e\n\u00f1\u0003\n\u0003",
    "\n\u0003\n\u0007\n\u00f7\n\n\f\n\u000e\n\u00fa\u000b\n\u0003\n\u0005",
    "\n\u00fd\n\n\u0003\u000b\u0003\u000b\u0007\u000b\u0101\n\u000b\f\u000b",
    "\u000e\u000b\u0104\u000b\u000b\u0003\u000b\u0005\u000b\u0107\n\u000b",
    "\u0003\f\u0003\f\u0003\r\u0003\r\u0007\r\u010d\n\r\f\r\u000e\r\u0110",
    "\u000b\r\u0003\r\u0003\r\u0007\r\u0114\n\r\f\r\u000e\r\u0117\u000b\r",
    "\u0003\r\u0003\r\u0007\r\u011b\n\r\f\r\u000e\r\u011e\u000b\r\u0003\r",
    "\u0003\r\u0007\r\u0122\n\r\f\r\u000e\r\u0125\u000b\r\u0007\r\u0127\n",
    "\r\f\r\u000e\r\u012a\u000b\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e",
    "\u0007\u000e\u0130\n\u000e\f\u000e\u000e\u000e\u0133\u000b\u000e\u0003",
    "\u000e\u0005\u000e\u0136\n\u000e\u0003\u000f\u0003\u000f\u0007\u000f",
    "\u013a\n\u000f\f\u000f\u000e\u000f\u013d\u000b\u000f\u0003\u000f\u0007",
    "\u000f\u0140\n\u000f\f\u000f\u000e\u000f\u0143\u000b\u000f\u0003\u000f",
    "\u0006\u000f\u0146\n\u000f\r\u000f\u000e\u000f\u0147\u0003\u000f\u0005",
    "\u000f\u014b\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0151\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0155",
    "\n\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0159\n\u0010\f\u0010\u000e",
    "\u0010\u015c\u000b\u0010\u0003\u0011\u0003\u0011\u0006\u0011\u0160\n",
    "\u0011\r\u0011\u000e\u0011\u0161\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u0166\n\u0011\f\u0011\u000e\u0011\u0169\u000b\u0011\u0005\u0011\u016b",
    "\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u016f\n\u0011\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u0173\n\u0011\f\u0011\u000e\u0011\u0176\u000b",
    "\u0011\u0003\u0011\u0005\u0011\u0179\n\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u017d\n\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0181",
    "\n\u0011\f\u0011\u000e\u0011\u0184\u000b\u0011\u0005\u0011\u0186\n\u0011",
    "\u0005\u0011\u0188\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u018f\n\u0012\f\u0012\u000e\u0012\u0192",
    "\u000b\u0012\u0003\u0012\u0005\u0012\u0195\n\u0012\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0199\n\u0013\f\u0013\u000e\u0013\u019c\u000b\u0013",
    "\u0003\u0013\u0006\u0013\u019f\n\u0013\r\u0013\u000e\u0013\u01a0\u0003",
    "\u0013\u0007\u0013\u01a4\n\u0013\f\u0013\u000e\u0013\u01a7\u000b\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u01b1\n\u0014\u0003\u0014\u0006",
    "\u0014\u01b4\n\u0014\r\u0014\u000e\u0014\u01b5\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u01ba\n\u0015\u0003\u0016\u0003\u0016\u0007\u0016\u01be",
    "\n\u0016\f\u0016\u000e\u0016\u01c1\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0007\u0016\u01c5\n\u0016\f\u0016\u000e\u0016\u01c8\u000b\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u01cc\n\u0016\u0005\u0016\u01ce\n\u0016",
    "\u0003\u0016\u0007\u0016\u01d1\n\u0016\f\u0016\u000e\u0016\u01d4\u000b",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0007\u0017\u01da",
    "\n\u0017\f\u0017\u000e\u0017\u01dd\u000b\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u01e1\n\u0017\f\u0017\u000e\u0017\u01e4\u000b\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u01e8\n\u0017\u0005\u0017\u01ea\n\u0017",
    "\u0003\u0017\u0007\u0017\u01ed\n\u0017\f\u0017\u000e\u0017\u01f0\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0007\u0018\u01f6",
    "\n\u0018\f\u0018\u000e\u0018\u01f9\u000b\u0018\u0003\u0018\u0005\u0018",
    "\u01fc\n\u0018\u0003\u0018\u0007\u0018\u01ff\n\u0018\f\u0018\u000e\u0018",
    "\u0202\u000b\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0206\n\u0018",
    "\f\u0018\u000e\u0018\u0209\u000b\u0018\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u020d\n\u0018\u0005\u0018\u020f\n\u0018\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u0213\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u021c\n\u001a",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u0220\n\u001b\u0003\u001c\u0003",
    "\u001c\u0007\u001c\u0224\n\u001c\f\u001c\u000e\u001c\u0227\u000b\u001c",
    "\u0006\u001c\u0229\n\u001c\r\u001c\u000e\u001c\u022a\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u022f\n\u001d\f\u001d\u000e\u001d\u0232\u000b\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u0236\n\u001d\f\u001d\u000e\u001d",
    "\u0239\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u023f\n\u001e\f\u001e\u000e\u001e\u0242\u000b\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0249\n",
    "\u001f\u0003 \u0003 \u0007 \u024d\n \f \u000e \u0250\u000b \u0003 \u0003",
    " \u0007 \u0254\n \f \u000e \u0257\u000b \u0005 \u0259\n \u0003 \u0003",
    " \u0007 \u025d\n \f \u000e \u0260\u000b \u0003 \u0005 \u0263\n \u0003",
    " \u0007 \u0266\n \f \u000e \u0269\u000b \u0003 \u0003 \u0003!\u0003",
    "!\u0007!\u026f\n!\f!\u000e!\u0272\u000b!\u0003!\u0003!\u0007!\u0276",
    "\n!\f!\u000e!\u0279\u000b!\u0003!\u0003!\u0007!\u027d\n!\f!\u000e!\u0280",
    "\u000b!\u0003!\u0003!\u0006!\u0284\n!\r!\u000e!\u0285\u0006!\u0288\n",
    "!\r!\u000e!\u0289\u0003!\u0003!\u0003\"\u0003\"\u0007\"\u0290\n\"\f",
    "\"\u000e\"\u0293\u000b\"\u0003\"\u0003\"\u0007\"\u0297\n\"\f\"\u000e",
    "\"\u029a\u000b\"\u0003\"\u0003\"\u0007\"\u029e\n\"\f\"\u000e\"\u02a1",
    "\u000b\"\u0003\"\u0003\"\u0006\"\u02a5\n\"\r\"\u000e\"\u02a6\u0007\"",
    "\u02a9\n\"\f\"\u000e\"\u02ac\u000b\"\u0003\"\u0003\"\u0003#\u0003#\u0007",
    "#\u02b2\n#\f#\u000e#\u02b5\u000b#\u0003#\u0003#\u0007#\u02b9\n#\f#\u000e",
    "#\u02bc\u000b#\u0003#\u0003#\u0003$\u0007$\u02c1\n$\f$\u000e$\u02c4",
    "\u000b$\u0003$\u0003$\u0003$\u0007$\u02c9\n$\f$\u000e$\u02cc\u000b$",
    "\u0003$\u0007$\u02cf\n$\f$\u000e$\u02d2\u000b$\u0003$\u0005$\u02d5\n",
    "$\u0003$\u0007$\u02d8\n$\f$\u000e$\u02db\u000b$\u0003%\u0003%\u0005",
    "%\u02df\n%\u0003%\u0003%\u0003&\u0003&\u0007&\u02e5\n&\f&\u000e&\u02e8",
    "\u000b&\u0003&\u0003&\u0003&\u0003&\u0007&\u02ee\n&\f&\u000e&\u02f1",
    "\u000b&\u0003&\u0003&\u0007&\u02f5\n&\f&\u000e&\u02f8\u000b&\u0003&",
    "\u0003&\u0003&\u0003&\u0003&\u0005&\u02ff\n&\u0003&\u0003&\u0003&\u0007",
    "&\u0304\n&\f&\u000e&\u0307\u000b&\u0003&\u0003&\u0006&\u030b\n&\r&\u000e",
    "&\u030c\u0005&\u030f\n&\u0003\'\u0003\'\u0007\'\u0313\n\'\f\'\u000e",
    "\'\u0316\u000b\'\u0003\'\u0005\'\u0319\n\'\u0003(\u0003(\u0007(\u031d",
    "\n(\f(\u000e(\u0320\u000b(\u0003(\u0003(\u0007(\u0324\n(\f(\u000e(\u0327",
    "\u000b(\u0003(\u0005(\u032a\n(\u0003)\u0003)\u0007)\u032e\n)\f)\u000e",
    ")\u0331\u000b)\u0003)\u0003)\u0007)\u0335\n)\f)\u000e)\u0338\u000b)",
    "\u0003)\u0003)\u0007)\u033c\n)\f)\u000e)\u033f\u000b)\u0003)\u0003)",
    "\u0007)\u0343\n)\f)\u000e)\u0346\u000b)\u0003)\u0003)\u0005)\u034a\n",
    ")\u0005)\u034c\n)\u0003*\u0003*\u0003*\u0005*\u0351\n*\u0003+\u0003",
    "+\u0003,\u0003,\u0003,\u0003,\u0003,\u0006,\u035a\n,\r,\u000e,\u035b",
    "\u0003,\u0006,\u035f\n,\r,\u000e,\u0360\u0003,\u0007,\u0364\n,\f,\u000e",
    ",\u0367\u000b,\u0003,\u0006,\u036a\n,\r,\u000e,\u036b\u0005,\u036e\n",
    ",\u0003,\u0003,\u0005,\u0372\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u037e\n-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u0003",
    "0\u00070\u038e\n0\f0\u000e0\u0391\u000b0\u00030\u00030\u00050\u0395",
    "\n0\u00030\u00030\u00031\u00031\u00061\u039b\n1\r1\u000e1\u039c\u0003",
    "1\u00031\u00061\u03a1\n1\r1\u000e1\u03a2\u00031\u00031\u00031\u0005",
    "1\u03a8\n1\u00032\u00032\u00052\u03ac\n2\u00033\u00033\u00073\u03b0",
    "\n3\f3\u000e3\u03b3\u000b3\u00033\u00033\u00073\u03b7\n3\f3\u000e3\u03ba",
    "\u000b3\u00033\u00033\u00073\u03be\n3\f3\u000e3\u03c1\u000b3\u00033",
    "\u00033\u00063\u03c5\n3\r3\u000e3\u03c6\u00073\u03c9\n3\f3\u000e3\u03cc",
    "\u000b3\u00033\u00033\u00033\u00073\u03d1\n3\f3\u000e3\u03d4\u000b3",
    "\u00033\u00053\u03d7\n3\u00034\u00034\u00034\u00054\u03dc\n4\u00035",
    "\u00035\u00075\u03e0\n5\f5\u000e5\u03e3\u000b5\u00035\u00035\u00036",
    "\u00036\u00076\u03e9\n6\f6\u000e6\u03ec\u000b6\u00036\u00036\u00076",
    "\u03f0\n6\f6\u000e6\u03f3\u000b6\u00036\u00036\u00076\u03f7\n6\f6\u000e",
    "6\u03fa\u000b6\u00036\u00036\u00076\u03fe\n6\f6\u000e6\u0401\u000b6",
    "\u00076\u0403\n6\f6\u000e6\u0406\u000b6\u00036\u00036\u00056\u040a\n",
    "6\u00036\u00036\u00076\u040e\n6\f6\u000e6\u0411\u000b6\u00036\u0003",
    "6\u00037\u00037\u00077\u0417\n7\f7\u000e7\u041a\u000b7\u00057\u041c",
    "\n7\u00037\u00037\u00077\u0420\n7\f7\u000e7\u0423\u000b7\u00037\u0003",
    "7\u00077\u0427\n7\f7\u000e7\u042a\u000b7\u00037\u00037\u00077\u042e",
    "\n7\f7\u000e7\u0431\u000b7\u00037\u00037\u00038\u00038\u00039\u0003",
    "9\u0003:\u0003:\u0007:\u043b\n:\f:\u000e:\u043e\u000b:\u0003:\u0003",
    ":\u0007:\u0442\n:\f:\u000e:\u0445\u000b:\u0003:\u0003:\u0003;\u0003",
    ";\u0007;\u044b\n;\f;\u000e;\u044e\u000b;\u0003;\u0003;\u0007;\u0452",
    "\n;\f;\u000e;\u0455\u000b;\u0003;\u0007;\u0458\n;\f;\u000e;\u045b\u000b",
    ";\u0003<\u0003<\u0005<\u045f\n<\u0003<\u0003<\u0005<\u0463\n<\u0003",
    "<\u0003<\u0003<\u0003<\u0005<\u0469\n<\u0003<\u0003<\u0005<\u046d\n",
    "<\u0003<\u0007<\u0470\n<\f<\u000e<\u0473\u000b<\u0003=\u0003=\u0006",
    "=\u0477\n=\r=\u000e=\u0478\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u0482\n=\u0003>\u0003>\u0003>\u0007>\u0487\n>\f>\u000e",
    ">\u048a\u000b>\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0491\n?\u0003",
    "@\u0003@\u0005@\u0495\n@\u0003A\u0006A\u0498\nA\rA\u000eA\u0499\u0003",
    "B\u0003B\u0003B\u0005B\u049f\nB\u0003C\u0003C\u0007C\u04a3\nC\fC\u000e",
    "C\u04a6\u000bC\u0003C\u0003C\u0007C\u04aa\nC\fC\u000eC\u04ad\u000bC",
    "\u0003C\u0003C\u0003C\u0002\u0002D\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0002\u0007\u0003\u0002",
    ")*\u0004\u0002%%//\u0004\u0002\u000f\u000f-.\u0003\u0002\u0010\u0011",
    "\u0004\u0002\u0006\u0006//\u0002\u053e\u0002\u00a4\u0003\u0002\u0002",
    "\u0002\u0004\u00a6\u0003\u0002\u0002\u0002\u0006\u00aa\u0003\u0002\u0002",
    "\u0002\b\u00ac\u0003\u0002\u0002\u0002\n\u00ba\u0003\u0002\u0002\u0002",
    "\f\u00c8\u0003\u0002\u0002\u0002\u000e\u00d6\u0003\u0002\u0002\u0002",
    "\u0010\u00d8\u0003\u0002\u0002\u0002\u0012\u00de\u0003\u0002\u0002\u0002",
    "\u0014\u00fe\u0003\u0002\u0002\u0002\u0016\u0108\u0003\u0002\u0002\u0002",
    "\u0018\u010a\u0003\u0002\u0002\u0002\u001a\u012d\u0003\u0002\u0002\u0002",
    "\u001c\u0137\u0003\u0002\u0002\u0002\u001e\u014e\u0003\u0002\u0002\u0002",
    " \u015d\u0003\u0002\u0002\u0002\"\u0194\u0003\u0002\u0002\u0002$\u0196",
    "\u0003\u0002\u0002\u0002&\u01b0\u0003\u0002\u0002\u0002(\u01b9\u0003",
    "\u0002\u0002\u0002*\u01bb\u0003\u0002\u0002\u0002,\u01d7\u0003\u0002",
    "\u0002\u0002.\u01f3\u0003\u0002\u0002\u00020\u0212\u0003\u0002\u0002",
    "\u00022\u021b\u0003\u0002\u0002\u00024\u021f\u0003\u0002\u0002\u0002",
    "6\u0228\u0003\u0002\u0002\u00028\u022c\u0003\u0002\u0002\u0002:\u023c",
    "\u0003\u0002\u0002\u0002<\u0248\u0003\u0002\u0002\u0002>\u0258\u0003",
    "\u0002\u0002\u0002@\u026c\u0003\u0002\u0002\u0002B\u028d\u0003\u0002",
    "\u0002\u0002D\u02af\u0003\u0002\u0002\u0002F\u02c2\u0003\u0002\u0002",
    "\u0002H\u02dc\u0003\u0002\u0002\u0002J\u030e\u0003\u0002\u0002\u0002",
    "L\u0310\u0003\u0002\u0002\u0002N\u031a\u0003\u0002\u0002\u0002P\u032b",
    "\u0003\u0002\u0002\u0002R\u0350\u0003\u0002\u0002\u0002T\u0352\u0003",
    "\u0002\u0002\u0002V\u0371\u0003\u0002\u0002\u0002X\u0373\u0003\u0002",
    "\u0002\u0002Z\u037f\u0003\u0002\u0002\u0002\\\u0385\u0003\u0002\u0002",
    "\u0002^\u0389\u0003\u0002\u0002\u0002`\u0398\u0003\u0002\u0002\u0002",
    "b\u03ab\u0003\u0002\u0002\u0002d\u03ad\u0003\u0002\u0002\u0002f\u03db",
    "\u0003\u0002\u0002\u0002h\u03dd\u0003\u0002\u0002\u0002j\u03e6\u0003",
    "\u0002\u0002\u0002l\u041b\u0003\u0002\u0002\u0002n\u0434\u0003\u0002",
    "\u0002\u0002p\u0436\u0003\u0002\u0002\u0002r\u0438\u0003\u0002\u0002",
    "\u0002t\u0448\u0003\u0002\u0002\u0002v\u045c\u0003\u0002\u0002\u0002",
    "x\u0474\u0003\u0002\u0002\u0002z\u0483\u0003\u0002\u0002\u0002|\u048b",
    "\u0003\u0002\u0002\u0002~\u0494\u0003\u0002\u0002\u0002\u0080\u0497",
    "\u0003\u0002\u0002\u0002\u0082\u049e\u0003\u0002\u0002\u0002\u0084\u04a0",
    "\u0003\u0002\u0002\u0002\u0086\u0088\u0005\u0004\u0003\u0002\u0087\u0086",
    "\u0003\u0002\u0002\u0002\u0088\u008b\u0003\u0002\u0002\u0002\u0089\u0087",
    "\u0003\u0002\u0002\u0002\u0089\u008a\u0003\u0002\u0002\u0002\u008a\u008f",
    "\u0003\u0002\u0002\u0002\u008b\u0089\u0003\u0002\u0002\u0002\u008c\u008e",
    "\u0005\u0006\u0004\u0002\u008d\u008c\u0003\u0002\u0002\u0002\u008e\u0091",
    "\u0003\u0002\u0002\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u008f\u0090",
    "\u0003\u0002\u0002\u0002\u0090\u009f\u0003\u0002\u0002\u0002\u0091\u008f",
    "\u0003\u0002\u0002\u0002\u0092\u00a0\u0005\u0012\n\u0002\u0093\u00a0",
    "\u0005*\u0016\u0002\u0094\u00a0\u0005 \u0011\u0002\u0095\u00a0\u0005",
    "X-\u0002\u0096\u00a0\u0005^0\u0002\u0097\u00a0\u0005`1\u0002\u0098\u00a0",
    "\u0005d3\u0002\u0099\u00a0\u0005x=\u0002\u009a\u009c\u0005\u0004\u0003",
    "\u0002\u009b\u009a\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002",
    "\u0002\u009d\u009b\u0003\u0002\u0002\u0002\u009d\u009e\u0003\u0002\u0002",
    "\u0002\u009e\u00a0\u0003\u0002\u0002\u0002\u009f\u0092\u0003\u0002\u0002",
    "\u0002\u009f\u0093\u0003\u0002\u0002\u0002\u009f\u0094\u0003\u0002\u0002",
    "\u0002\u009f\u0095\u0003\u0002\u0002\u0002\u009f\u0096\u0003\u0002\u0002",
    "\u0002\u009f\u0097\u0003\u0002\u0002\u0002\u009f\u0098\u0003\u0002\u0002",
    "\u0002\u009f\u0099\u0003\u0002\u0002\u0002\u009f\u009b\u0003\u0002\u0002",
    "\u0002\u00a0\u00a1\u0003\u0002\u0002\u0002\u00a1\u009f\u0003\u0002\u0002",
    "\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a5\u0003\u0002\u0002",
    "\u0002\u00a3\u00a5\u0007\u0002\u0002\u0003\u00a4\u0089\u0003\u0002\u0002",
    "\u0002\u00a4\u00a3\u0003\u0002\u0002\u0002\u00a5\u0003\u0003\u0002\u0002",
    "\u0002\u00a6\u00a7\t\u0002\u0002\u0002\u00a7\u0005\u0003\u0002\u0002",
    "\u0002\u00a8\u00ab\u0005\b\u0005\u0002\u00a9\u00ab\u0005\n\u0006\u0002",
    "\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00a9\u0003\u0002\u0002\u0002",
    "\u00ab\u0007\u0003\u0002\u0002\u0002\u00ac\u00ad\u0007\u0003\u0002\u0002",
    "\u00ad\u00ae\u0007*\u0002\u0002\u00ae\u00b3\u0005\f\u0007\u0002\u00af",
    "\u00b0\u0007*\u0002\u0002\u00b0\u00b1\u0007\u000e\u0002\u0002\u00b1",
    "\u00b2\u0007*\u0002\u0002\u00b2\u00b4\u0007/\u0002\u0002\u00b3\u00af",
    "\u0003\u0002\u0002\u0002\u00b3\u00b4\u0003\u0002\u0002\u0002\u00b4\u00b6",
    "\u0003\u0002\u0002\u0002\u00b5\u00b7\u0007)\u0002\u0002\u00b6\u00b5",
    "\u0003\u0002\u0002\u0002\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u00b6",
    "\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003\u0002\u0002\u0002\u00b9\t",
    "\u0003\u0002\u0002\u0002\u00ba\u00bb\u0007\u0004\u0002\u0002\u00bb\u00bc",
    "\u0007*\u0002\u0002\u00bc\u00bd\u0005\f\u0007\u0002\u00bd\u00be\u0007",
    "*\u0002\u0002\u00be\u00bf\u0007\u0003\u0002\u0002\u00bf\u00c0\u0007",
    "*\u0002\u0002\u00c0\u00c2\u0005z>\u0002\u00c1\u00c3\u0007)\u0002\u0002",
    "\u00c2\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002",
    "\u00c4\u00c2\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002",
    "\u00c5\u000b\u0003\u0002\u0002\u0002\u00c6\u00c9\u0005\u000e\b\u0002",
    "\u00c7\u00c9\u0005\u0010\t\u0002\u00c8\u00c6\u0003\u0002\u0002\u0002",
    "\u00c8\u00c7\u0003\u0002\u0002\u0002\u00c9\r\u0003\u0002\u0002\u0002",
    "\u00ca\u00cc\u0007#\u0002\u0002\u00cb\u00cd\t\u0003\u0002\u0002\u00cc",
    "\u00cb\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce",
    "\u00cc\u0003\u0002\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002\u0002\u00cf",
    "\u00d7\u0003\u0002\u0002\u0002\u00d0\u00d2\u0007$\u0002\u0002\u00d1",
    "\u00d3\t\u0003\u0002\u0002\u00d2\u00d1\u0003\u0002\u0002\u0002\u00d3",
    "\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d4",
    "\u00d5\u0003\u0002\u0002\u0002\u00d5\u00d7\u0003\u0002\u0002\u0002\u00d6",
    "\u00ca\u0003\u0002\u0002\u0002\u00d6\u00d0\u0003\u0002\u0002\u0002\u00d7",
    "\u000f\u0003\u0002\u0002\u0002\u00d8\u00da\u0007\"\u0002\u0002\u00d9",
    "\u00db\t\u0003\u0002\u0002\u00da\u00d9\u0003\u0002\u0002\u0002\u00db",
    "\u00dc\u0003\u0002\u0002\u0002\u00dc\u00da\u0003\u0002\u0002\u0002\u00dc",
    "\u00dd\u0003\u0002\u0002\u0002\u00dd\u0011\u0003\u0002\u0002\u0002\u00de",
    "\u00e0\u0007\u0005\u0002\u0002\u00df\u00e1\u0005\u0004\u0003\u0002\u00e0",
    "\u00df\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2",
    "\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3",
    "\u00e4\u0003\u0002\u0002\u0002\u00e4\u00e8\u0005\u0016\f\u0002\u00e5",
    "\u00e7\u0005\u0004\u0003\u0002\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e7",
    "\u00ea\u0003\u0002\u0002\u0002\u00e8\u00e6\u0003\u0002\u0002\u0002\u00e8",
    "\u00e9\u0003\u0002\u0002\u0002\u00e9\u00ec\u0003\u0002\u0002\u0002\u00ea",
    "\u00e8\u0003\u0002\u0002\u0002\u00eb\u00ed\u0005\u0018\r\u0002\u00ec",
    "\u00eb\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed",
    "\u00ef\u0003\u0002\u0002\u0002\u00ee\u00f0\u0005\u0004\u0003\u0002\u00ef",
    "\u00ee\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1",
    "\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2",
    "\u00fc\u0003\u0002\u0002\u0002\u00f3\u00fd\u0005\u001c\u000f\u0002\u00f4",
    "\u00f8\u0007!\u0002\u0002\u00f5\u00f7\u0005\u0004\u0003\u0002\u00f6",
    "\u00f5\u0003\u0002\u0002\u0002\u00f7\u00fa\u0003\u0002\u0002\u0002\u00f8",
    "\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9",
    "\u00fb\u0003\u0002\u0002\u0002\u00fa\u00f8\u0003\u0002\u0002\u0002\u00fb",
    "\u00fd\u0005\u0014\u000b\u0002\u00fc\u00f3\u0003\u0002\u0002\u0002\u00fc",
    "\u00f4\u0003\u0002\u0002\u0002\u00fd\u0013\u0003\u0002\u0002\u0002\u00fe",
    "\u0102\u0005\u0016\f\u0002\u00ff\u0101\u0005\u0004\u0003\u0002\u0100",
    "\u00ff\u0003\u0002\u0002\u0002\u0101\u0104\u0003\u0002\u0002\u0002\u0102",
    "\u0100\u0003\u0002\u0002\u0002\u0102\u0103\u0003\u0002\u0002\u0002\u0103",
    "\u0106\u0003\u0002\u0002\u0002\u0104\u0102\u0003\u0002\u0002\u0002\u0105",
    "\u0107\u0005\u0018\r\u0002\u0106\u0105\u0003\u0002\u0002\u0002\u0106",
    "\u0107\u0003\u0002\u0002\u0002\u0107\u0015\u0003\u0002\u0002\u0002\u0108",
    "\u0109\u0005\u0080A\u0002\u0109\u0017\u0003\u0002\u0002\u0002\u010a",
    "\u010e\u0007\u001c\u0002\u0002\u010b\u010d\u0005\u0004\u0003\u0002\u010c",
    "\u010b\u0003\u0002\u0002\u0002\u010d\u0110\u0003\u0002\u0002\u0002\u010e",
    "\u010c\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f",
    "\u0111\u0003\u0002\u0002\u0002\u0110\u010e\u0003\u0002\u0002\u0002\u0111",
    "\u0115\u0005\u001a\u000e\u0002\u0112\u0114\u0005\u0004\u0003\u0002\u0113",
    "\u0112\u0003\u0002\u0002\u0002\u0114\u0117\u0003\u0002\u0002\u0002\u0115",
    "\u0113\u0003\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116",
    "\u0128\u0003\u0002\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0118",
    "\u011c\u0007\u0017\u0002\u0002\u0119\u011b\u0005\u0004\u0003\u0002\u011a",
    "\u0119\u0003\u0002\u0002\u0002\u011b\u011e\u0003\u0002\u0002\u0002\u011c",
    "\u011a\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d",
    "\u011f\u0003\u0002\u0002\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011f",
    "\u0123\u0005\u001a\u000e\u0002\u0120\u0122\u0005\u0004\u0003\u0002\u0121",
    "\u0120\u0003\u0002\u0002\u0002\u0122\u0125\u0003\u0002\u0002\u0002\u0123",
    "\u0121\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124",
    "\u0127\u0003\u0002\u0002\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0126",
    "\u0118\u0003\u0002\u0002\u0002\u0127\u012a\u0003\u0002\u0002\u0002\u0128",
    "\u0126\u0003\u0002\u0002\u0002\u0128\u0129\u0003\u0002\u0002\u0002\u0129",
    "\u012b\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002\u0002\u0002\u012b",
    "\u012c\u0007\u001d\u0002\u0002\u012c\u0019\u0003\u0002\u0002\u0002\u012d",
    "\u0131\u0005\u0080A\u0002\u012e\u0130\u0005\u0004\u0003\u0002\u012f",
    "\u012e\u0003\u0002\u0002\u0002\u0130\u0133\u0003\u0002\u0002\u0002\u0131",
    "\u012f\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132",
    "\u0135\u0003\u0002\u0002\u0002\u0133\u0131\u0003\u0002\u0002\u0002\u0134",
    "\u0136\u0005\u0018\r\u0002\u0135\u0134\u0003\u0002\u0002\u0002\u0135",
    "\u0136\u0003\u0002\u0002\u0002\u0136\u001b\u0003\u0002\u0002\u0002\u0137",
    "\u013b\u0007\u0018\u0002\u0002\u0138\u013a\u0005\u0004\u0003\u0002\u0139",
    "\u0138\u0003\u0002\u0002\u0002\u013a\u013d\u0003\u0002\u0002\u0002\u013b",
    "\u0139\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c",
    "\u0145\u0003\u0002\u0002\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013e",
    "\u0140\u0007*\u0002\u0002\u013f\u013e\u0003\u0002\u0002\u0002\u0140",
    "\u0143\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002\u0002\u0002\u0141",
    "\u0142\u0003\u0002\u0002\u0002\u0142\u0144\u0003\u0002\u0002\u0002\u0143",
    "\u0141\u0003\u0002\u0002\u0002\u0144\u0146\u0005\u001e\u0010\u0002\u0145",
    "\u0141\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147",
    "\u0145\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148",
    "\u014a\u0003\u0002\u0002\u0002\u0149\u014b\u0005\u0004\u0003\u0002\u014a",
    "\u0149\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0003\u0002\u0002\u0002\u014c\u014d\u0007\u0019\u0002\u0002\u014d",
    "\u001d\u0003\u0002\u0002\u0002\u014e\u0150\u0007/\u0002\u0002\u014f",
    "\u0151\t\u0002\u0002\u0002\u0150\u014f\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152",
    "\u0154\u0007\'\u0002\u0002\u0153\u0155\t\u0002\u0002\u0002\u0154\u0153",
    "\u0003\u0002\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0156",
    "\u0003\u0002\u0002\u0002\u0156\u015a\u0005\u001a\u000e\u0002\u0157\u0159",
    "\u0007)\u0002\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0159\u015c",
    "\u0003\u0002\u0002\u0002\u015a\u0158\u0003\u0002\u0002\u0002\u015a\u015b",
    "\u0003\u0002\u0002\u0002\u015b\u001f\u0003\u0002\u0002\u0002\u015c\u015a",
    "\u0003\u0002\u0002\u0002\u015d\u015f\u0007\u0006\u0002\u0002\u015e\u0160",
    "\u0005\u0004\u0003\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u0160\u0161",
    "\u0003\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002\u0161\u0162",
    "\u0003\u0002\u0002\u0002\u0162\u0187\u0003\u0002\u0002\u0002\u0163\u0167",
    "\u0007/\u0002\u0002\u0164\u0166\u0005\u0004\u0003\u0002\u0165\u0164",
    "\u0003\u0002\u0002\u0002\u0166\u0169\u0003\u0002\u0002\u0002\u0167\u0165",
    "\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u016b",
    "\u0003\u0002\u0002\u0002\u0169\u0167\u0003\u0002\u0002\u0002\u016a\u0163",
    "\u0003\u0002\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u016c",
    "\u0003\u0002\u0002\u0002\u016c\u016e\u0007\u001a\u0002\u0002\u016d\u016f",
    "\u0005v<\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016e\u016f\u0003",
    "\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0174\u0007",
    "\u001b\u0002\u0002\u0171\u0173\u0005\u0004\u0003\u0002\u0172\u0171\u0003",
    "\u0002\u0002\u0002\u0173\u0176\u0003\u0002\u0002\u0002\u0174\u0172\u0003",
    "\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002\u0175\u0185\u0003",
    "\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002\u0177\u0179\t",
    "\u0002\u0002\u0002\u0178\u0177\u0003\u0002\u0002\u0002\u0178\u0179\u0003",
    "\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a\u017c\u0007",
    "\'\u0002\u0002\u017b\u017d\t\u0002\u0002\u0002\u017c\u017b\u0003\u0002",
    "\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002",
    "\u0002\u0002\u017e\u0182\u0005t;\u0002\u017f\u0181\u0005\u0004\u0003",
    "\u0002\u0180\u017f\u0003\u0002\u0002\u0002\u0181\u0184\u0003\u0002\u0002",
    "\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002",
    "\u0002\u0183\u0186\u0003\u0002\u0002\u0002\u0184\u0182\u0003\u0002\u0002",
    "\u0002\u0185\u0178\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002",
    "\u0002\u0186\u0188\u0003\u0002\u0002\u0002\u0187\u016a\u0003\u0002\u0002",
    "\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002\u0002",
    "\u0002\u0189\u018a\u0005\"\u0012\u0002\u018a!\u0003\u0002\u0002\u0002",
    "\u018b\u0195\u0005$\u0013\u0002\u018c\u0190\u0007!\u0002\u0002\u018d",
    "\u018f\u0005\u0004\u0003\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018f",
    "\u0192\u0003\u0002\u0002\u0002\u0190\u018e\u0003\u0002\u0002\u0002\u0190",
    "\u0191\u0003\u0002\u0002\u0002\u0191\u0193\u0003\u0002\u0002\u0002\u0192",
    "\u0190\u0003\u0002\u0002\u0002\u0193\u0195\u00050\u0019\u0002\u0194",
    "\u018b\u0003\u0002\u0002\u0002\u0194\u018c\u0003\u0002\u0002\u0002\u0195",
    "#\u0003\u0002\u0002\u0002\u0196\u019a\u0007\u0018\u0002\u0002\u0197",
    "\u0199\u0005\u0004\u0003\u0002\u0198\u0197\u0003\u0002\u0002\u0002\u0199",
    "\u019c\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002\u019a",
    "\u019b\u0003\u0002\u0002\u0002\u019b\u019e\u0003\u0002\u0002\u0002\u019c",
    "\u019a\u0003\u0002\u0002\u0002\u019d\u019f\u0005&\u0014\u0002\u019e",
    "\u019d\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0",
    "\u019e\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1",
    "\u01a5\u0003\u0002\u0002\u0002\u01a2\u01a4\u0005\u0004\u0003\u0002\u01a3",
    "\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a7\u0003\u0002\u0002\u0002\u01a5",
    "\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6",
    "\u01a8\u0003\u0002\u0002\u0002\u01a7\u01a5\u0003\u0002\u0002\u0002\u01a8",
    "\u01a9\u0007\u0019\u0002\u0002\u01a9%\u0003\u0002\u0002\u0002\u01aa",
    "\u01b1\u0005(\u0015\u0002\u01ab\u01b1\u0005.\u0018\u0002\u01ac\u01b1",
    "\u0005J&\u0002\u01ad\u01b1\u0005L\'\u0002\u01ae\u01b1\u0005N(\u0002",
    "\u01af\u01b1\u0005P)\u0002\u01b0\u01aa\u0003\u0002\u0002\u0002\u01b0",
    "\u01ab\u0003\u0002\u0002\u0002\u01b0\u01ac\u0003\u0002\u0002\u0002\u01b0",
    "\u01ad\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0",
    "\u01af\u0003\u0002\u0002\u0002\u01b1\u01b3\u0003\u0002\u0002\u0002\u01b2",
    "\u01b4\u0005\u0004\u0003\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b4",
    "\u01b5\u0003\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0003\u0002\u0002\u0002\u01b6\'\u0003\u0002\u0002\u0002\u01b7",
    "\u01ba\u0005*\u0016\u0002\u01b8\u01ba\u0005,\u0017\u0002\u01b9\u01b7",
    "\u0003\u0002\u0002\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002\u01ba)",
    "\u0003\u0002\u0002\u0002\u01bb\u01bf\u0007\n\u0002\u0002\u01bc\u01be",
    "\u0005\u0004\u0003\u0002\u01bd\u01bc\u0003\u0002\u0002\u0002\u01be\u01c1",
    "\u0003\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002\u0002\u0002\u01bf\u01c0",
    "\u0003\u0002\u0002\u0002\u01c0\u01cd\u0003\u0002\u0002\u0002\u01c1\u01bf",
    "\u0003\u0002\u0002\u0002\u01c2\u01c6\u0007/\u0002\u0002\u01c3\u01c5",
    "\u0005\u0004\u0003\u0002\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c8",
    "\u0003\u0002\u0002\u0002\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c7",
    "\u0003\u0002\u0002\u0002\u01c7\u01c9\u0003\u0002\u0002\u0002\u01c8\u01c6",
    "\u0003\u0002\u0002\u0002\u01c9\u01cb\u0007\'\u0002\u0002\u01ca\u01cc",
    "\t\u0002\u0002\u0002\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cb\u01cc",
    "\u0003\u0002\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01c2",
    "\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01d2",
    "\u0003\u0002\u0002\u0002\u01cf\u01d1\u0005\u0004\u0003\u0002\u01d0\u01cf",
    "\u0003\u0002\u0002\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5",
    "\u0003\u0002\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d6",
    "\u0005.\u0018\u0002\u01d6+\u0003\u0002\u0002\u0002\u01d7\u01db\u0007",
    "\u000b\u0002\u0002\u01d8\u01da\u0005\u0004\u0003\u0002\u01d9\u01d8\u0003",
    "\u0002\u0002\u0002\u01da\u01dd\u0003\u0002\u0002\u0002\u01db\u01d9\u0003",
    "\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01e9\u0003",
    "\u0002\u0002\u0002\u01dd\u01db\u0003\u0002\u0002\u0002\u01de\u01e2\u0007",
    "/\u0002\u0002\u01df\u01e1\u0005\u0004\u0003\u0002\u01e0\u01df\u0003",
    "\u0002\u0002\u0002\u01e1\u01e4\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e5\u0003",
    "\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e5\u01e7\u0007",
    "\'\u0002\u0002\u01e6\u01e8\t\u0002\u0002\u0002\u01e7\u01e6\u0003\u0002",
    "\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ea\u0003\u0002",
    "\u0002\u0002\u01e9\u01de\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002",
    "\u0002\u0002\u01ea\u01ee\u0003\u0002\u0002\u0002\u01eb\u01ed\u0005\u0004",
    "\u0003\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ed\u01f0\u0003\u0002",
    "\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002",
    "\u0002\u0002\u01ef\u01f1\u0003\u0002\u0002\u0002\u01f0\u01ee\u0003\u0002",
    "\u0002\u0002\u01f1\u01f2\u0005.\u0018\u0002\u01f2-\u0003\u0002\u0002",
    "\u0002\u01f3\u01f7\u0005\u0080A\u0002\u01f4\u01f6\u0005\u0004\u0003",
    "\u0002\u01f5\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f9\u0003\u0002\u0002",
    "\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002",
    "\u0002\u01f8\u020e\u0003\u0002\u0002\u0002\u01f9\u01f7\u0003\u0002\u0002",
    "\u0002\u01fa\u01fc\u0005\u0018\r\u0002\u01fb\u01fa\u0003\u0002\u0002",
    "\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u0200\u0003\u0002\u0002",
    "\u0002\u01fd\u01ff\u0005\u0004\u0003\u0002\u01fe\u01fd\u0003\u0002\u0002",
    "\u0002\u01ff\u0202\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002",
    "\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0203\u0003\u0002\u0002",
    "\u0002\u0202\u0200\u0003\u0002\u0002\u0002\u0203\u0207\u0007!\u0002",
    "\u0002\u0204\u0206\u0005\u0004\u0003\u0002\u0205\u0204\u0003\u0002\u0002",
    "\u0002\u0206\u0209\u0003\u0002\u0002\u0002\u0207\u0205\u0003\u0002\u0002",
    "\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u020a\u0003\u0002\u0002",
    "\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u020a\u020f\u00050\u0019",
    "\u0002\u020b\u020d\u0005\u0018\r\u0002\u020c\u020b\u0003\u0002\u0002",
    "\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d\u020f\u0003\u0002\u0002",
    "\u0002\u020e\u01fb\u0003\u0002\u0002\u0002\u020e\u020c\u0003\u0002\u0002",
    "\u0002\u020f/\u0003\u0002\u0002\u0002\u0210\u0213\u00052\u001a\u0002",
    "\u0211\u0213\u00056\u001c\u0002\u0212\u0210\u0003\u0002\u0002\u0002",
    "\u0212\u0211\u0003\u0002\u0002\u0002\u02131\u0003\u0002\u0002\u0002",
    "\u0214\u021c\u0005 \u0011\u0002\u0215\u021c\u0005J&\u0002\u0216\u021c",
    "\u0005\u0080A\u0002\u0217\u021c\u0005T+\u0002\u0218\u021c\u00058\u001d",
    "\u0002\u0219\u021c\u0005:\u001e\u0002\u021a\u021c\u0005<\u001f\u0002",
    "\u021b\u0214\u0003\u0002\u0002\u0002\u021b\u0215\u0003\u0002\u0002\u0002",
    "\u021b\u0216\u0003\u0002\u0002\u0002\u021b\u0217\u0003\u0002\u0002\u0002",
    "\u021b\u0218\u0003\u0002\u0002\u0002\u021b\u0219\u0003\u0002\u0002\u0002",
    "\u021b\u021a\u0003\u0002\u0002\u0002\u021c3\u0003\u0002\u0002\u0002",
    "\u021d\u0220\u0005V,\u0002\u021e\u0220\u00052\u001a\u0002\u021f\u021d",
    "\u0003\u0002\u0002\u0002\u021f\u021e\u0003\u0002\u0002\u0002\u02205",
    "\u0003\u0002\u0002\u0002\u0221\u0225\u00054\u001b\u0002\u0222\u0224",
    "\u0007*\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0224\u0227",
    "\u0003\u0002\u0002\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0225\u0226",
    "\u0003\u0002\u0002\u0002\u0226\u0229\u0003\u0002\u0002\u0002\u0227\u0225",
    "\u0003\u0002\u0002\u0002\u0228\u0221\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022a\u022b",
    "\u0003\u0002\u0002\u0002\u022b7\u0003\u0002\u0002\u0002\u022c\u0230",
    "\u0007\u001a\u0002\u0002\u022d\u022f\u0007*\u0002\u0002\u022e\u022d",
    "\u0003\u0002\u0002\u0002\u022f\u0232\u0003\u0002\u0002\u0002\u0230\u022e",
    "\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002\u0231\u0233",
    "\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0233\u0237",
    "\u00056\u001c\u0002\u0234\u0236\u0007*\u0002\u0002\u0235\u0234\u0003",
    "\u0002\u0002\u0002\u0236\u0239\u0003\u0002\u0002\u0002\u0237\u0235\u0003",
    "\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u023a\u0003",
    "\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u023a\u023b\u0007",
    "\u001b\u0002\u0002\u023b9\u0003\u0002\u0002\u0002\u023c\u0240\u0007",
    "\u0005\u0002\u0002\u023d\u023f\u0007*\u0002\u0002\u023e\u023d\u0003",
    "\u0002\u0002\u0002\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e\u0003",
    "\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0243\u0003",
    "\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u0244\u0005",
    "2\u001a\u0002\u0244;\u0003\u0002\u0002\u0002\u0245\u0249\u0005> \u0002",
    "\u0246\u0249\u0005@!\u0002\u0247\u0249\u0005B\"\u0002\u0248\u0245\u0003",
    "\u0002\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0247\u0003",
    "\u0002\u0002\u0002\u0249=\u0003\u0002\u0002\u0002\u024a\u024e\u0007",
    "\u0015\u0002\u0002\u024b\u024d\u0007*\u0002\u0002\u024c\u024b\u0003",
    "\u0002\u0002\u0002\u024d\u0250\u0003\u0002\u0002\u0002\u024e\u024c\u0003",
    "\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0251\u0003",
    "\u0002\u0002\u0002\u0250\u024e\u0003\u0002\u0002\u0002\u0251\u0255\u0005",
    "\u0014\u000b\u0002\u0252\u0254\u0007*\u0002\u0002\u0253\u0252\u0003",
    "\u0002\u0002\u0002\u0254\u0257\u0003\u0002\u0002\u0002\u0255\u0253\u0003",
    "\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u0259\u0003",
    "\u0002\u0002\u0002\u0257\u0255\u0003\u0002\u0002\u0002\u0258\u024a\u0003",
    "\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025a\u0003",
    "\u0002\u0002\u0002\u025a\u025e\u0007\u001e\u0002\u0002\u025b\u025d\u0005",
    "\u0004\u0003\u0002\u025c\u025b\u0003\u0002\u0002\u0002\u025d\u0260\u0003",
    "\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e\u025f\u0003",
    "\u0002\u0002\u0002\u025f\u0262\u0003\u0002\u0002\u0002\u0260\u025e\u0003",
    "\u0002\u0002\u0002\u0261\u0263\u0005F$\u0002\u0262\u0261\u0003\u0002",
    "\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0267\u0003\u0002",
    "\u0002\u0002\u0264\u0266\u0005\u0004\u0003\u0002\u0265\u0264\u0003\u0002",
    "\u0002\u0002\u0266\u0269\u0003\u0002\u0002\u0002\u0267\u0265\u0003\u0002",
    "\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u026a\u0003\u0002",
    "\u0002\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u026a\u026b\u0007\u001f",
    "\u0002\u0002\u026b?\u0003\u0002\u0002\u0002\u026c\u0270\u0007\u0015",
    "\u0002\u0002\u026d\u026f\u0007*\u0002\u0002\u026e\u026d\u0003\u0002",
    "\u0002\u0002\u026f\u0272\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002",
    "\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0273\u0003\u0002",
    "\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0273\u0277\u0005\u0014",
    "\u000b\u0002\u0274\u0276\u0007*\u0002\u0002\u0275\u0274\u0003\u0002",
    "\u0002\u0002\u0276\u0279\u0003\u0002\u0002\u0002\u0277\u0275\u0003\u0002",
    "\u0002\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278\u027a\u0003\u0002",
    "\u0002\u0002\u0279\u0277\u0003\u0002\u0002\u0002\u027a\u027e\u0007\u0018",
    "\u0002\u0002\u027b\u027d\u0005\u0004\u0003\u0002\u027c\u027b\u0003\u0002",
    "\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002",
    "\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f\u0287\u0003\u0002",
    "\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0281\u0283\u0005.",
    "\u0018\u0002\u0282\u0284\u0005\u0004\u0003\u0002\u0283\u0282\u0003\u0002",
    "\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002",
    "\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0288\u0003\u0002",
    "\u0002\u0002\u0287\u0281\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002",
    "\u0002\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002",
    "\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u028c\u0007\u0019",
    "\u0002\u0002\u028cA\u0003\u0002\u0002\u0002\u028d\u0291\u0007\u0015",
    "\u0002\u0002\u028e\u0290\u0007*\u0002\u0002\u028f\u028e\u0003\u0002",
    "\u0002\u0002\u0290\u0293\u0003\u0002\u0002\u0002\u0291\u028f\u0003\u0002",
    "\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292\u0294\u0003\u0002",
    "\u0002\u0002\u0293\u0291\u0003\u0002\u0002\u0002\u0294\u0298\u0005\u0014",
    "\u000b\u0002\u0295\u0297\u0007*\u0002\u0002\u0296\u0295\u0003\u0002",
    "\u0002\u0002\u0297\u029a\u0003\u0002\u0002\u0002\u0298\u0296\u0003\u0002",
    "\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u029b\u0003\u0002",
    "\u0002\u0002\u029a\u0298\u0003\u0002\u0002\u0002\u029b\u029f\u0007\u0018",
    "\u0002\u0002\u029c\u029e\u0005\u0004\u0003\u0002\u029d\u029c\u0003\u0002",
    "\u0002\u0002\u029e\u02a1\u0003\u0002\u0002\u0002\u029f\u029d\u0003\u0002",
    "\u0002\u0002\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02aa\u0003\u0002",
    "\u0002\u0002\u02a1\u029f\u0003\u0002\u0002\u0002\u02a2\u02a4\u0005D",
    "#\u0002\u02a3\u02a5\u0005\u0004\u0003\u0002\u02a4\u02a3\u0003\u0002",
    "\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002",
    "\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02a9\u0003\u0002",
    "\u0002\u0002\u02a8\u02a2\u0003\u0002\u0002\u0002\u02a9\u02ac\u0003\u0002",
    "\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002",
    "\u0002\u0002\u02ab\u02ad\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003\u0002",
    "\u0002\u0002\u02ad\u02ae\u0007\u0019\u0002\u0002\u02aeC\u0003\u0002",
    "\u0002\u0002\u02af\u02b3\u00050\u0019\u0002\u02b0\u02b2\u0007*\u0002",
    "\u0002\u02b1\u02b0\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003\u0002\u0002",
    "\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002",
    "\u0002\u02b4\u02b6\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002",
    "\u0002\u02b6\u02ba\u0007\'\u0002\u0002\u02b7\u02b9\u0007*\u0002\u0002",
    "\u02b8\u02b7\u0003\u0002\u0002\u0002\u02b9\u02bc\u0003\u0002\u0002\u0002",
    "\u02ba\u02b8\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002",
    "\u02bb\u02bd\u0003\u0002\u0002\u0002\u02bc\u02ba\u0003\u0002\u0002\u0002",
    "\u02bd\u02be\u00050\u0019\u0002\u02beE\u0003\u0002\u0002\u0002\u02bf",
    "\u02c1\u0005\u0004\u0003\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c1",
    "\u02c4\u0003\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c2",
    "\u02c3\u0003\u0002\u0002\u0002\u02c3\u02c5\u0003\u0002\u0002\u0002\u02c4",
    "\u02c2\u0003\u0002\u0002\u0002\u02c5\u02d0\u00050\u0019\u0002\u02c6",
    "\u02ca\u0007\u0017\u0002\u0002\u02c7\u02c9\u0005\u0004\u0003\u0002\u02c8",
    "\u02c7\u0003\u0002\u0002\u0002\u02c9\u02cc\u0003\u0002\u0002\u0002\u02ca",
    "\u02c8\u0003\u0002\u0002\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb",
    "\u02cd\u0003\u0002\u0002\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cd",
    "\u02cf\u00050\u0019\u0002\u02ce\u02c6\u0003\u0002\u0002\u0002\u02cf",
    "\u02d2\u0003\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d0",
    "\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d4\u0003\u0002\u0002\u0002\u02d2",
    "\u02d0\u0003\u0002\u0002\u0002\u02d3\u02d5\u0007\u0017\u0002\u0002\u02d4",
    "\u02d3\u0003\u0002\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5",
    "\u02d9\u0003\u0002\u0002\u0002\u02d6\u02d8\u0005\u0004\u0003\u0002\u02d7",
    "\u02d6\u0003\u0002\u0002\u0002\u02d8\u02db\u0003\u0002\u0002\u0002\u02d9",
    "\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da",
    "G\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02dc",
    "\u02de\u0007\u001a\u0002\u0002\u02dd\u02df\u0005F$\u0002\u02de\u02dd",
    "\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02df\u02e0",
    "\u0003\u0002\u0002\u0002\u02e0\u02e1\u0007\u001b\u0002\u0002\u02e1I",
    "\u0003\u0002\u0002\u0002\u02e2\u02e6\u0005\u0080A\u0002\u02e3\u02e5",
    "\u0007*\u0002\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e5\u02e8",
    "\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002\u0002\u0002\u02e6\u02e7",
    "\u0003\u0002\u0002\u0002\u02e7\u02e9\u0003\u0002\u0002\u0002\u02e8\u02e6",
    "\u0003\u0002\u0002\u0002\u02e9\u02f6\u0005H%\u0002\u02ea\u02eb\u0007",
    " \u0002\u0002\u02eb\u02ef\u0005\u0080A\u0002\u02ec\u02ee\u0007*\u0002",
    "\u0002\u02ed\u02ec\u0003\u0002\u0002\u0002\u02ee\u02f1\u0003\u0002\u0002",
    "\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002",
    "\u0002\u02f0\u02f2\u0003\u0002\u0002\u0002\u02f1\u02ef\u0003\u0002\u0002",
    "\u0002\u02f2\u02f3\u0005H%\u0002\u02f3\u02f5\u0003\u0002\u0002\u0002",
    "\u02f4\u02ea\u0003\u0002\u0002\u0002\u02f5\u02f8\u0003\u0002\u0002\u0002",
    "\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002",
    "\u02f7\u030f\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002",
    "\u02f9\u02ff\u0005T+\u0002\u02fa\u02fb\u0007\u001a\u0002\u0002\u02fb",
    "\u02fc\u00050\u0019\u0002\u02fc\u02fd\u0007\u001b\u0002\u0002\u02fd",
    "\u02ff\u0003\u0002\u0002\u0002\u02fe\u02f9\u0003\u0002\u0002\u0002\u02fe",
    "\u02fa\u0003\u0002\u0002\u0002\u02ff\u030a\u0003\u0002\u0002\u0002\u0300",
    "\u0301\u0007 \u0002\u0002\u0301\u0305\u0005\u0080A\u0002\u0302\u0304",
    "\u0007*\u0002\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0304\u0307",
    "\u0003\u0002\u0002\u0002\u0305\u0303\u0003\u0002\u0002\u0002\u0305\u0306",
    "\u0003\u0002\u0002\u0002\u0306\u0308\u0003\u0002\u0002\u0002\u0307\u0305",
    "\u0003\u0002\u0002\u0002\u0308\u0309\u0005H%\u0002\u0309\u030b\u0003",
    "\u0002\u0002\u0002\u030a\u0300\u0003\u0002\u0002\u0002\u030b\u030c\u0003",
    "\u0002\u0002\u0002\u030c\u030a\u0003\u0002\u0002\u0002\u030c\u030d\u0003",
    "\u0002\u0002\u0002\u030d\u030f\u0003\u0002\u0002\u0002\u030e\u02e2\u0003",
    "\u0002\u0002\u0002\u030e\u02fe\u0003\u0002\u0002\u0002\u030fK\u0003",
    "\u0002\u0002\u0002\u0310\u0318\u0007\f\u0002\u0002\u0311\u0313\u0005",
    "\u0004\u0003\u0002\u0312\u0311\u0003\u0002\u0002\u0002\u0313\u0316\u0003",
    "\u0002\u0002\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0314\u0315\u0003",
    "\u0002\u0002\u0002\u0315\u0317\u0003\u0002\u0002\u0002\u0316\u0314\u0003",
    "\u0002\u0002\u0002\u0317\u0319\u00050\u0019\u0002\u0318\u0314\u0003",
    "\u0002\u0002\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319M\u0003",
    "\u0002\u0002\u0002\u031a\u031e\u0007\r\u0002\u0002\u031b\u031d\u0005",
    "\u0004\u0003\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031d\u0320\u0003",
    "\u0002\u0002\u0002\u031e\u031c\u0003\u0002\u0002\u0002\u031e\u031f\u0003",
    "\u0002\u0002\u0002\u031f\u0321\u0003\u0002\u0002\u0002\u0320\u031e\u0003",
    "\u0002\u0002\u0002\u0321\u0329\u0005\u0080A\u0002\u0322\u0324\u0005",
    "\u0004\u0003\u0002\u0323\u0322\u0003\u0002\u0002\u0002\u0324\u0327\u0003",
    "\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0326\u0003",
    "\u0002\u0002\u0002\u0326\u0328\u0003\u0002\u0002\u0002\u0327\u0325\u0003",
    "\u0002\u0002\u0002\u0328\u032a\u00050\u0019\u0002\u0329\u0325\u0003",
    "\u0002\u0002\u0002\u0329\u032a\u0003\u0002\u0002\u0002\u032aO\u0003",
    "\u0002\u0002\u0002\u032b\u032f\u0007\u0013\u0002\u0002\u032c\u032e\u0005",
    "\u0004\u0003\u0002\u032d\u032c\u0003\u0002\u0002\u0002\u032e\u0331\u0003",
    "\u0002\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u032f\u0330\u0003",
    "\u0002\u0002\u0002\u0330\u0332\u0003\u0002\u0002\u0002\u0331\u032f\u0003",
    "\u0002\u0002\u0002\u0332\u0336\u00056\u001c\u0002\u0333\u0335\u0005",
    "\u0004\u0003\u0002\u0334\u0333\u0003\u0002\u0002\u0002\u0335\u0338\u0003",
    "\u0002\u0002\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0336\u0337\u0003",
    "\u0002\u0002\u0002\u0337\u0339\u0003\u0002\u0002\u0002\u0338\u0336\u0003",
    "\u0002\u0002\u0002\u0339\u034b\u0005R*\u0002\u033a\u033c\u0005\u0004",
    "\u0003\u0002\u033b\u033a\u0003\u0002\u0002\u0002\u033c\u033f\u0003\u0002",
    "\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002",
    "\u0002\u0002\u033e\u0340\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002",
    "\u0002\u0002\u0340\u0344\u0007\u0014\u0002\u0002\u0341\u0343\u0005\u0004",
    "\u0003\u0002\u0342\u0341\u0003\u0002\u0002\u0002\u0343\u0346\u0003\u0002",
    "\u0002\u0002\u0344\u0342\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002",
    "\u0002\u0002\u0345\u0349\u0003\u0002\u0002\u0002\u0346\u0344\u0003\u0002",
    "\u0002\u0002\u0347\u034a\u0005P)\u0002\u0348\u034a\u0005R*\u0002\u0349",
    "\u0347\u0003\u0002\u0002\u0002\u0349\u0348\u0003\u0002\u0002\u0002\u034a",
    "\u034c\u0003\u0002\u0002\u0002\u034b\u033d\u0003\u0002\u0002\u0002\u034b",
    "\u034c\u0003\u0002\u0002\u0002\u034cQ\u0003\u0002\u0002\u0002\u034d",
    "\u0351\u0005 \u0011\u0002\u034e\u0351\u0005$\u0013\u0002\u034f\u0351",
    "\u0005\u0080A\u0002\u0350\u034d\u0003\u0002\u0002\u0002\u0350\u034e",
    "\u0003\u0002\u0002\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0351S",
    "\u0003\u0002\u0002\u0002\u0352\u0353\t\u0004\u0002\u0002\u0353U\u0003",
    "\u0002\u0002\u0002\u0354\u0372\u0007(\u0002\u0002\u0355\u0372\u0007",
    "\'\u0002\u0002\u0356\u0372\u0007\u001c\u0002\u0002\u0357\u0372\u0007",
    "&\u0002\u0002\u0358\u035a\u0007\u001d\u0002\u0002\u0359\u0358\u0003",
    "\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u0359\u0003",
    "\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002\u0002\u035c\u036d\u0003",
    "\u0002\u0002\u0002\u035d\u035f\u0007!\u0002\u0002\u035e\u035d\u0003",
    "\u0002\u0002\u0002\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u035e\u0003",
    "\u0002\u0002\u0002\u0360\u0361\u0003\u0002\u0002\u0002\u0361\u0365\u0003",
    "\u0002\u0002\u0002\u0362\u0364\u0007(\u0002\u0002\u0363\u0362\u0003",
    "\u0002\u0002\u0002\u0364\u0367\u0003\u0002\u0002\u0002\u0365\u0363\u0003",
    "\u0002\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u036e\u0003",
    "\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0368\u036a\u0007",
    "(\u0002\u0002\u0369\u0368\u0003\u0002\u0002\u0002\u036a\u036b\u0003",
    "\u0002\u0002\u0002\u036b\u0369\u0003\u0002\u0002\u0002\u036b\u036c\u0003",
    "\u0002\u0002\u0002\u036c\u036e\u0003\u0002\u0002\u0002\u036d\u035e\u0003",
    "\u0002\u0002\u0002\u036d\u0369\u0003\u0002\u0002\u0002\u036d\u036e\u0003",
    "\u0002\u0002\u0002\u036e\u0372\u0003\u0002\u0002\u0002\u036f\u0372\u0007",
    "\"\u0002\u0002\u0370\u0372\u0007%\u0002\u0002\u0371\u0354\u0003\u0002",
    "\u0002\u0002\u0371\u0355\u0003\u0002\u0002\u0002\u0371\u0356\u0003\u0002",
    "\u0002\u0002\u0371\u0357\u0003\u0002\u0002\u0002\u0371\u0359\u0003\u0002",
    "\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0371\u0370\u0003\u0002",
    "\u0002\u0002\u0372W\u0003\u0002\u0002\u0002\u0373\u0374\t\u0005\u0002",
    "\u0002\u0374\u037d\u0007*\u0002\u0002\u0375\u0376\u0005Z.\u0002\u0376",
    "\u0377\u0007*\u0002\u0002\u0377\u0378\u0005\\/\u0002\u0378\u037e\u0003",
    "\u0002\u0002\u0002\u0379\u037a\u0005\\/\u0002\u037a\u037b\u0007*\u0002",
    "\u0002\u037b\u037c\u0005Z.\u0002\u037c\u037e\u0003\u0002\u0002\u0002",
    "\u037d\u0375\u0003\u0002\u0002\u0002\u037d\u0379\u0003\u0002\u0002\u0002",
    "\u037eY\u0003\u0002\u0002\u0002\u037f\u0380\u0005\u0080A\u0002\u0380",
    "\u0381\u0007*\u0002\u0002\u0381\u0382\u0007\u000e\u0002\u0002\u0382",
    "\u0383\u0007*\u0002\u0002\u0383\u0384\u0005V,\u0002\u0384[\u0003\u0002",
    "\u0002\u0002\u0385\u0386\u0007\u0012\u0002\u0002\u0386\u0387\u0007*",
    "\u0002\u0002\u0387\u0388\u0007.\u0002\u0002\u0388]\u0003\u0002\u0002",
    "\u0002\u0389\u038a\u0007\u0007\u0002\u0002\u038a\u038b\u0005\u0004\u0003",
    "\u0002\u038b\u038f\u0007/\u0002\u0002\u038c\u038e\u0005\u0004\u0003",
    "\u0002\u038d\u038c\u0003\u0002\u0002\u0002\u038e\u0391\u0003\u0002\u0002",
    "\u0002\u038f\u038d\u0003\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002",
    "\u0002\u0390\u0392\u0003\u0002\u0002\u0002\u0391\u038f\u0003\u0002\u0002",
    "\u0002\u0392\u0394\u0007\'\u0002\u0002\u0393\u0395\t\u0002\u0002\u0002",
    "\u0394\u0393\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002\u0002",
    "\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u0397\u0005\u0080A\u0002",
    "\u0397_\u0003\u0002\u0002\u0002\u0398\u039a\u0007\b\u0002\u0002\u0399",
    "\u039b\u0005\u0004\u0003\u0002\u039a\u0399\u0003\u0002\u0002\u0002\u039b",
    "\u039c\u0003\u0002\u0002\u0002\u039c\u039a\u0003\u0002\u0002\u0002\u039c",
    "\u039d\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e",
    "\u03a0\u0005b2\u0002\u039f\u03a1\u0005\u0004\u0003\u0002\u03a0\u039f",
    "\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a0",
    "\u0003\u0002\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3\u03a7",
    "\u0003\u0002\u0002\u0002\u03a4\u03a8\u0005 \u0011\u0002\u03a5\u03a8",
    "\u0005\u0080A\u0002\u03a6\u03a8\u0005$\u0013\u0002\u03a7\u03a4\u0003",
    "\u0002\u0002\u0002\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a7\u03a6\u0003",
    "\u0002\u0002\u0002\u03a8a\u0003\u0002\u0002\u0002\u03a9\u03ac\u0005",
    "\u0080A\u0002\u03aa\u03ac\u0005J&\u0002\u03ab\u03a9\u0003\u0002\u0002",
    "\u0002\u03ab\u03aa\u0003\u0002\u0002\u0002\u03acc\u0003\u0002\u0002",
    "\u0002\u03ad\u03b1\u0007\u0016\u0002\u0002\u03ae\u03b0\u0007*\u0002",
    "\u0002\u03af\u03ae\u0003\u0002\u0002\u0002\u03b0\u03b3\u0003\u0002\u0002",
    "\u0002\u03b1\u03af\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002",
    "\u0002\u03b2\u03b4\u0003\u0002\u0002\u0002\u03b3\u03b1\u0003\u0002\u0002",
    "\u0002\u03b4\u03b8\u0007/\u0002\u0002\u03b5\u03b7\u0007*\u0002\u0002",
    "\u03b6\u03b5\u0003\u0002\u0002\u0002\u03b7\u03ba\u0003\u0002\u0002\u0002",
    "\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002",
    "\u03b9\u03d6\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002",
    "\u03bb\u03bf\u0007\u0018\u0002\u0002\u03bc\u03be\u0005\u0004\u0003\u0002",
    "\u03bd\u03bc\u0003\u0002\u0002\u0002\u03be\u03c1\u0003\u0002\u0002\u0002",
    "\u03bf\u03bd\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002",
    "\u03c0\u03ca\u0003\u0002\u0002\u0002\u03c1\u03bf\u0003\u0002\u0002\u0002",
    "\u03c2\u03c4\u0005f4\u0002\u03c3\u03c5\u0005\u0004\u0003\u0002\u03c4",
    "\u03c3\u0003\u0002\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6",
    "\u03c4\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7",
    "\u03c9\u0003\u0002\u0002\u0002\u03c8\u03c2\u0003\u0002\u0002\u0002\u03c9",
    "\u03cc\u0003\u0002\u0002\u0002\u03ca\u03c8\u0003\u0002\u0002\u0002\u03ca",
    "\u03cb\u0003\u0002\u0002\u0002\u03cb\u03cd\u0003\u0002\u0002\u0002\u03cc",
    "\u03ca\u0003\u0002\u0002\u0002\u03cd\u03d7\u0007\u0019\u0002\u0002\u03ce",
    "\u03d2\u0007!\u0002\u0002\u03cf\u03d1\u0005\u0004\u0003\u0002\u03d0",
    "\u03cf\u0003\u0002\u0002\u0002\u03d1\u03d4\u0003\u0002\u0002\u0002\u03d2",
    "\u03d0\u0003\u0002\u0002\u0002\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3",
    "\u03d5\u0003\u0002\u0002\u0002\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d5",
    "\u03d7\u0005\u0080A\u0002\u03d6\u03bb\u0003\u0002\u0002\u0002\u03d6",
    "\u03ce\u0003\u0002\u0002\u0002\u03d7e\u0003\u0002\u0002\u0002\u03d8",
    "\u03dc\u0005h5\u0002\u03d9\u03dc\u0005l7\u0002\u03da\u03dc\u0005r:\u0002",
    "\u03db\u03d8\u0003\u0002\u0002\u0002\u03db\u03d9\u0003\u0002\u0002\u0002",
    "\u03db\u03da\u0003\u0002\u0002\u0002\u03dcg\u0003\u0002\u0002\u0002",
    "\u03dd\u03e1\t\u0006\u0002\u0002\u03de\u03e0\u0007*\u0002\u0002\u03df",
    "\u03de\u0003\u0002\u0002\u0002\u03e0\u03e3\u0003\u0002\u0002\u0002\u03e1",
    "\u03df\u0003\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2",
    "\u03e4\u0003\u0002\u0002\u0002\u03e3\u03e1\u0003\u0002\u0002\u0002\u03e4",
    "\u03e5\u0005j6\u0002\u03e5i\u0003\u0002\u0002\u0002\u03e6\u03ea\u0007",
    "\u001a\u0002\u0002\u03e7\u03e9\u0005\u0004\u0003\u0002\u03e8\u03e7\u0003",
    "\u0002\u0002\u0002\u03e9\u03ec\u0003\u0002\u0002\u0002\u03ea\u03e8\u0003",
    "\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ed\u0003",
    "\u0002\u0002\u0002\u03ec\u03ea\u0003\u0002\u0002\u0002\u03ed\u03f1\u0005",
    "\u0080A\u0002\u03ee\u03f0\u0005\u0004\u0003\u0002\u03ef\u03ee\u0003",
    "\u0002\u0002\u0002\u03f0\u03f3\u0003\u0002\u0002\u0002\u03f1\u03ef\u0003",
    "\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002\u0002\u0002\u03f2\u0404\u0003",
    "\u0002\u0002\u0002\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f4\u03f8\u0007",
    "\u0017\u0002\u0002\u03f5\u03f7\u0005\u0004\u0003\u0002\u03f6\u03f5\u0003",
    "\u0002\u0002\u0002\u03f7\u03fa\u0003\u0002\u0002\u0002\u03f8\u03f6\u0003",
    "\u0002\u0002\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fb\u0003",
    "\u0002\u0002\u0002\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fb\u03ff\u0005",
    "\u0080A\u0002\u03fc\u03fe\u0005\u0004\u0003\u0002\u03fd\u03fc\u0003",
    "\u0002\u0002\u0002\u03fe\u0401\u0003\u0002\u0002\u0002\u03ff\u03fd\u0003",
    "\u0002\u0002\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0403\u0003",
    "\u0002\u0002\u0002\u0401\u03ff\u0003\u0002\u0002\u0002\u0402\u03f4\u0003",
    "\u0002\u0002\u0002\u0403\u0406\u0003\u0002\u0002\u0002\u0404\u0402\u0003",
    "\u0002\u0002\u0002\u0404\u0405\u0003\u0002\u0002\u0002\u0405\u0407\u0003",
    "\u0002\u0002\u0002\u0406\u0404\u0003\u0002\u0002\u0002\u0407\u0409\u0007",
    "\u001b\u0002\u0002\u0408\u040a\t\u0002\u0002\u0002\u0409\u0408\u0003",
    "\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u040b\u0003",
    "\u0002\u0002\u0002\u040b\u040f\u0007\'\u0002\u0002\u040c\u040e\u0005",
    "\u0004\u0003\u0002\u040d\u040c\u0003\u0002\u0002\u0002\u040e\u0411\u0003",
    "\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002\u0002\u040f\u0410\u0003",
    "\u0002\u0002\u0002\u0410\u0412\u0003\u0002\u0002\u0002\u0411\u040f\u0003",
    "\u0002\u0002\u0002\u0412\u0413\u0005\u0080A\u0002\u0413k\u0003\u0002",
    "\u0002\u0002\u0414\u0418\u0005n8\u0002\u0415\u0417\u0005\u0004\u0003",
    "\u0002\u0416\u0415\u0003\u0002\u0002\u0002\u0417\u041a\u0003\u0002\u0002",
    "\u0002\u0418\u0416\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002",
    "\u0002\u0419\u041c\u0003\u0002\u0002\u0002\u041a\u0418\u0003\u0002\u0002",
    "\u0002\u041b\u0414\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002\u0002",
    "\u0002\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u0421\u0005V,\u0002",
    "\u041e\u0420\u0005\u0004\u0003\u0002\u041f\u041e\u0003\u0002\u0002\u0002",
    "\u0420\u0423\u0003\u0002\u0002\u0002\u0421\u041f\u0003\u0002\u0002\u0002",
    "\u0421\u0422\u0003\u0002\u0002\u0002\u0422\u0424\u0003\u0002\u0002\u0002",
    "\u0423\u0421\u0003\u0002\u0002\u0002\u0424\u0428\u0005p9\u0002\u0425",
    "\u0427\u0005\u0004\u0003\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0427",
    "\u042a\u0003\u0002\u0002\u0002\u0428\u0426\u0003\u0002\u0002\u0002\u0428",
    "\u0429\u0003\u0002\u0002\u0002\u0429\u042b\u0003\u0002\u0002\u0002\u042a",
    "\u0428\u0003\u0002\u0002\u0002\u042b\u042f\u0007\'\u0002\u0002\u042c",
    "\u042e\u0005\u0004\u0003\u0002\u042d\u042c\u0003\u0002\u0002\u0002\u042e",
    "\u0431\u0003\u0002\u0002\u0002\u042f\u042d\u0003\u0002\u0002\u0002\u042f",
    "\u0430\u0003\u0002\u0002\u0002\u0430\u0432\u0003\u0002\u0002\u0002\u0431",
    "\u042f\u0003\u0002\u0002\u0002\u0432\u0433\u0005\u0080A\u0002\u0433",
    "m\u0003\u0002\u0002\u0002\u0434\u0435\u0005\u0080A\u0002\u0435o\u0003",
    "\u0002\u0002\u0002\u0436\u0437\u0005\u0080A\u0002\u0437q\u0003\u0002",
    "\u0002\u0002\u0438\u043c\u0007/\u0002\u0002\u0439\u043b\u0007*\u0002",
    "\u0002\u043a\u0439\u0003\u0002\u0002\u0002\u043b\u043e\u0003\u0002\u0002",
    "\u0002\u043c\u043a\u0003\u0002\u0002\u0002\u043c\u043d\u0003\u0002\u0002",
    "\u0002\u043d\u043f\u0003\u0002\u0002\u0002\u043e\u043c\u0003\u0002\u0002",
    "\u0002\u043f\u0443\u0007\'\u0002\u0002\u0440\u0442\u0007*\u0002\u0002",
    "\u0441\u0440\u0003\u0002\u0002\u0002\u0442\u0445\u0003\u0002\u0002\u0002",
    "\u0443\u0441\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002\u0002\u0002",
    "\u0444\u0446\u0003\u0002\u0002\u0002\u0445\u0443\u0003\u0002\u0002\u0002",
    "\u0446\u0447\u0005\u0080A\u0002\u0447s\u0003\u0002\u0002\u0002\u0448",
    "\u0459\u0005\u0014\u000b\u0002\u0449\u044b\u0005\u0004\u0003\u0002\u044a",
    "\u0449\u0003\u0002\u0002\u0002\u044b\u044e\u0003\u0002\u0002\u0002\u044c",
    "\u044a\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002\u044d",
    "\u044f\u0003\u0002\u0002\u0002\u044e\u044c\u0003\u0002\u0002\u0002\u044f",
    "\u0453\u0007&\u0002\u0002\u0450\u0452\u0005\u0004\u0003\u0002\u0451",
    "\u0450\u0003\u0002\u0002\u0002\u0452\u0455\u0003\u0002\u0002\u0002\u0453",
    "\u0451\u0003\u0002\u0002\u0002\u0453\u0454\u0003\u0002\u0002\u0002\u0454",
    "\u0456\u0003\u0002\u0002\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0456",
    "\u0458\u0005\u0014\u000b\u0002\u0457\u044c\u0003\u0002\u0002\u0002\u0458",
    "\u045b\u0003\u0002\u0002\u0002\u0459\u0457\u0003\u0002\u0002\u0002\u0459",
    "\u045a\u0003\u0002\u0002\u0002\u045au\u0003\u0002\u0002\u0002\u045b",
    "\u0459\u0003\u0002\u0002\u0002\u045c\u045e\u0007/\u0002\u0002\u045d",
    "\u045f\t\u0002\u0002\u0002\u045e\u045d\u0003\u0002\u0002\u0002\u045e",
    "\u045f\u0003\u0002\u0002\u0002\u045f\u0460\u0003\u0002\u0002\u0002\u0460",
    "\u0462\u0007\'\u0002\u0002\u0461\u0463\t\u0002\u0002\u0002\u0462\u0461",
    "\u0003\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0464",
    "\u0003\u0002\u0002\u0002\u0464\u0471\u0005t;\u0002\u0465\u0466\u0007",
    "\u0017\u0002\u0002\u0466\u0468\u0007/\u0002\u0002\u0467\u0469\t\u0002",
    "\u0002\u0002\u0468\u0467\u0003\u0002\u0002\u0002\u0468\u0469\u0003\u0002",
    "\u0002\u0002\u0469\u046a\u0003\u0002\u0002\u0002\u046a\u046c\u0007\'",
    "\u0002\u0002\u046b\u046d\t\u0002\u0002\u0002\u046c\u046b\u0003\u0002",
    "\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u046e\u0003\u0002",
    "\u0002\u0002\u046e\u0470\u0005t;\u0002\u046f\u0465\u0003\u0002\u0002",
    "\u0002\u0470\u0473\u0003\u0002\u0002\u0002\u0471\u046f\u0003\u0002\u0002",
    "\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472w\u0003\u0002\u0002",
    "\u0002\u0473\u0471\u0003\u0002\u0002\u0002\u0474\u0476\u0007\t\u0002",
    "\u0002\u0475\u0477\t\u0002\u0002\u0002\u0476\u0475\u0003\u0002\u0002",
    "\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u0476\u0003\u0002\u0002",
    "\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u0481\u0003\u0002\u0002",
    "\u0002\u047a\u0482\u0005\u0080A\u0002\u047b\u0482\u0005\u0012\n\u0002",
    "\u047c\u0482\u0005*\u0016\u0002\u047d\u0482\u0005 \u0011\u0002\u047e",
    "\u0482\u0005X-\u0002\u047f\u0482\u0005^0\u0002\u0480\u0482\u0005d3\u0002",
    "\u0481\u047a\u0003\u0002\u0002\u0002\u0481\u047b\u0003\u0002\u0002\u0002",
    "\u0481\u047c\u0003\u0002\u0002\u0002\u0481\u047d\u0003\u0002\u0002\u0002",
    "\u0481\u047e\u0003\u0002\u0002\u0002\u0481\u047f\u0003\u0002\u0002\u0002",
    "\u0481\u0480\u0003\u0002\u0002\u0002\u0482y\u0003\u0002\u0002\u0002",
    "\u0483\u0488\u0005|?\u0002\u0484\u0485\u0007\u0017\u0002\u0002\u0485",
    "\u0487\u0005|?\u0002\u0486\u0484\u0003\u0002\u0002\u0002\u0487\u048a",
    "\u0003\u0002\u0002\u0002\u0488\u0486\u0003\u0002\u0002\u0002\u0488\u0489",
    "\u0003\u0002\u0002\u0002\u0489{\u0003\u0002\u0002\u0002\u048a\u0488",
    "\u0003\u0002\u0002\u0002\u048b\u0490\u0005~@\u0002\u048c\u048d\u0007",
    "*\u0002\u0002\u048d\u048e\u0007\u000e\u0002\u0002\u048e\u048f\u0007",
    "*\u0002\u0002\u048f\u0491\u0005~@\u0002\u0490\u048c\u0003\u0002\u0002",
    "\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491}\u0003\u0002\u0002",
    "\u0002\u0492\u0495\u0007/\u0002\u0002\u0493\u0495\u0005V,\u0002\u0494",
    "\u0492\u0003\u0002\u0002\u0002\u0494\u0493\u0003\u0002\u0002\u0002\u0495",
    "\u007f\u0003\u0002\u0002\u0002\u0496\u0498\u0005\u0082B\u0002\u0497",
    "\u0496\u0003\u0002\u0002\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499",
    "\u0497\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a",
    "\u0081\u0003\u0002\u0002\u0002\u049b\u049f\u0007/\u0002\u0002\u049c",
    "\u049f\u0007 \u0002\u0002\u049d\u049f\u0005\u0084C\u0002\u049e\u049b",
    "\u0003\u0002\u0002\u0002\u049e\u049c\u0003\u0002\u0002\u0002\u049e\u049d",
    "\u0003\u0002\u0002\u0002\u049f\u0083\u0003\u0002\u0002\u0002\u04a0\u04a4",
    "\u0007\u001e\u0002\u0002\u04a1\u04a3\u0007*\u0002\u0002\u04a2\u04a1",
    "\u0003\u0002\u0002\u0002\u04a3\u04a6\u0003\u0002\u0002\u0002\u04a4\u04a2",
    "\u0003\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002\u0002\u0002\u04a5\u04a7",
    "\u0003\u0002\u0002\u0002\u04a6\u04a4\u0003\u0002\u0002\u0002\u04a7\u04ab",
    "\u00050\u0019\u0002\u04a8\u04aa\u0007*\u0002\u0002\u04a9\u04a8\u0003",
    "\u0002\u0002\u0002\u04aa\u04ad\u0003\u0002\u0002\u0002\u04ab\u04a9\u0003",
    "\u0002\u0002\u0002\u04ab\u04ac\u0003\u0002\u0002\u0002\u04ac\u04ae\u0003",
    "\u0002\u0002\u0002\u04ad\u04ab\u0003\u0002\u0002\u0002\u04ae\u04af\u0007",
    "\u001f\u0002\u0002\u04af\u0085\u0003\u0002\u0002\u0002\u00b2\u0089\u008f",
    "\u009d\u009f\u00a1\u00a4\u00aa\u00b3\u00b8\u00c4\u00c8\u00ce\u00d4\u00d6",
    "\u00dc\u00e2\u00e8\u00ec\u00f1\u00f8\u00fc\u0102\u0106\u010e\u0115\u011c",
    "\u0123\u0128\u0131\u0135\u013b\u0141\u0147\u014a\u0150\u0154\u015a\u0161",
    "\u0167\u016a\u016e\u0174\u0178\u017c\u0182\u0185\u0187\u0190\u0194\u019a",
    "\u01a0\u01a5\u01b0\u01b5\u01b9\u01bf\u01c6\u01cb\u01cd\u01d2\u01db\u01e2",
    "\u01e7\u01e9\u01ee\u01f7\u01fb\u0200\u0207\u020c\u020e\u0212\u021b\u021f",
    "\u0225\u022a\u0230\u0237\u0240\u0248\u024e\u0255\u0258\u025e\u0262\u0267",
    "\u0270\u0277\u027e\u0285\u0289\u0291\u0298\u029f\u02a6\u02aa\u02b3\u02ba",
    "\u02c2\u02ca\u02d0\u02d4\u02d9\u02de\u02e6\u02ef\u02f6\u02fe\u0305\u030c",
    "\u030e\u0314\u0318\u031e\u0325\u0329\u032f\u0336\u033d\u0344\u0349\u034b",
    "\u0350\u035b\u0360\u0365\u036b\u036d\u0371\u037d\u038f\u0394\u039c\u03a2",
    "\u03a7\u03ab\u03b1\u03b8\u03bf\u03c6\u03ca\u03d2\u03d6\u03db\u03e1\u03ea",
    "\u03f1\u03f8\u03ff\u0404\u0409\u040f\u0418\u041b\u0421\u0428\u042f\u043c",
    "\u0443\u044c\u0453\u0459\u045e\u0462\u0468\u046c\u0471\u0478\u0481\u0488",
    "\u0490\u0494\u0499\u049e\u04a4\u04ab"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'import'", "'from'", "'type'", "'fn'", "'event'", 
                     "'on'", "'export'", "'const'", "'let'", "'return'", 
                     "'emit'", "'as'", null, "'prefix'", "'infix'", "'precedence'", 
                     "'if'", "'else'", "'new'", "'interface'", null, "'{'", 
                     "'}'", "'('", "')'", "'<'", "'>'", "'['", "']'", "'.'", 
                     "'='", "'@'", "'./'", "'../'", "'/'", "'|'", "':'" ];

var symbolicNames = [ null, "IMPORT", "FROM", "TYPE", "FN", "EVENT", "ON", 
                      "EXPORT", "CONST", "LET", "RETURN", "EMIT", "AS", 
                      "BOOLCONSTANT", "PREFIX", "INFIX", "PRECEDENCE", "IF", 
                      "ELSE", "NEW", "INTERFACE", "SEP", "OPENBODY", "CLOSEBODY", 
                      "OPENARGS", "CLOSEARGS", "OPENGENERIC", "CLOSEGENERIC", 
                      "OPENARRAY", "CLOSEARRAY", "METHODSEP", "EQUALS", 
                      "GLOBAL", "CURDIR", "PARDIR", "DIRSEP", "OR", "TYPESEP", 
                      "GENERALOPERATORS", "NEWLINE", "WS", "SINGLELINECOMMENT", 
                      "MULTILINECOMMENT", "STRINGCONSTANT", "NUMBERCONSTANT", 
                      "VARNAME" ];

var ruleNames =  [ "module", "blank", "imports", "standardImport", "fromImport", 
                   "dependency", "localdependency", "globaldependency", 
                   "types", "othertype", "typename", "typegenerics", "fulltypename", 
                   "typebody", "typeline", "functions", "fullfunctionbody", 
                   "functionbody", "statements", "declarations", "constdeclaration", 
                   "letdeclaration", "assignments", "assignables", "basicassignables", 
                   "operatororassignable", "withoperators", "groups", "typeofn", 
                   "objectliterals", "arrayliteral", "typeliteral", "mapliteral", 
                   "mapline", "assignablelist", "fncall", "calls", "exits", 
                   "emits", "conditionals", "blocklikes", "constants", "operators", 
                   "operatormapping", "fntoop", "opprecedence", "events", 
                   "handlers", "eventref", "interfaces", "interfaceline", 
                   "functiontypeline", "functiontype", "operatortypeline", 
                   "leftarg", "rightarg", "propertytypeline", "argtype", 
                   "arglist", "exports", "varlist", "renameablevar", "varop", 
                   "varn", "varsegment", "arrayaccess" ];

function LnParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

LnParser.prototype = Object.create(antlr4.Parser.prototype);
LnParser.prototype.constructor = LnParser;

Object.defineProperty(LnParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

LnParser.EOF = antlr4.Token.EOF;
LnParser.IMPORT = 1;
LnParser.FROM = 2;
LnParser.TYPE = 3;
LnParser.FN = 4;
LnParser.EVENT = 5;
LnParser.ON = 6;
LnParser.EXPORT = 7;
LnParser.CONST = 8;
LnParser.LET = 9;
LnParser.RETURN = 10;
LnParser.EMIT = 11;
LnParser.AS = 12;
LnParser.BOOLCONSTANT = 13;
LnParser.PREFIX = 14;
LnParser.INFIX = 15;
LnParser.PRECEDENCE = 16;
LnParser.IF = 17;
LnParser.ELSE = 18;
LnParser.NEW = 19;
LnParser.INTERFACE = 20;
LnParser.SEP = 21;
LnParser.OPENBODY = 22;
LnParser.CLOSEBODY = 23;
LnParser.OPENARGS = 24;
LnParser.CLOSEARGS = 25;
LnParser.OPENGENERIC = 26;
LnParser.CLOSEGENERIC = 27;
LnParser.OPENARRAY = 28;
LnParser.CLOSEARRAY = 29;
LnParser.METHODSEP = 30;
LnParser.EQUALS = 31;
LnParser.GLOBAL = 32;
LnParser.CURDIR = 33;
LnParser.PARDIR = 34;
LnParser.DIRSEP = 35;
LnParser.OR = 36;
LnParser.TYPESEP = 37;
LnParser.GENERALOPERATORS = 38;
LnParser.NEWLINE = 39;
LnParser.WS = 40;
LnParser.SINGLELINECOMMENT = 41;
LnParser.MULTILINECOMMENT = 42;
LnParser.STRINGCONSTANT = 43;
LnParser.NUMBERCONSTANT = 44;
LnParser.VARNAME = 45;

LnParser.RULE_module = 0;
LnParser.RULE_blank = 1;
LnParser.RULE_imports = 2;
LnParser.RULE_standardImport = 3;
LnParser.RULE_fromImport = 4;
LnParser.RULE_dependency = 5;
LnParser.RULE_localdependency = 6;
LnParser.RULE_globaldependency = 7;
LnParser.RULE_types = 8;
LnParser.RULE_othertype = 9;
LnParser.RULE_typename = 10;
LnParser.RULE_typegenerics = 11;
LnParser.RULE_fulltypename = 12;
LnParser.RULE_typebody = 13;
LnParser.RULE_typeline = 14;
LnParser.RULE_functions = 15;
LnParser.RULE_fullfunctionbody = 16;
LnParser.RULE_functionbody = 17;
LnParser.RULE_statements = 18;
LnParser.RULE_declarations = 19;
LnParser.RULE_constdeclaration = 20;
LnParser.RULE_letdeclaration = 21;
LnParser.RULE_assignments = 22;
LnParser.RULE_assignables = 23;
LnParser.RULE_basicassignables = 24;
LnParser.RULE_operatororassignable = 25;
LnParser.RULE_withoperators = 26;
LnParser.RULE_groups = 27;
LnParser.RULE_typeofn = 28;
LnParser.RULE_objectliterals = 29;
LnParser.RULE_arrayliteral = 30;
LnParser.RULE_typeliteral = 31;
LnParser.RULE_mapliteral = 32;
LnParser.RULE_mapline = 33;
LnParser.RULE_assignablelist = 34;
LnParser.RULE_fncall = 35;
LnParser.RULE_calls = 36;
LnParser.RULE_exits = 37;
LnParser.RULE_emits = 38;
LnParser.RULE_conditionals = 39;
LnParser.RULE_blocklikes = 40;
LnParser.RULE_constants = 41;
LnParser.RULE_operators = 42;
LnParser.RULE_operatormapping = 43;
LnParser.RULE_fntoop = 44;
LnParser.RULE_opprecedence = 45;
LnParser.RULE_events = 46;
LnParser.RULE_handlers = 47;
LnParser.RULE_eventref = 48;
LnParser.RULE_interfaces = 49;
LnParser.RULE_interfaceline = 50;
LnParser.RULE_functiontypeline = 51;
LnParser.RULE_functiontype = 52;
LnParser.RULE_operatortypeline = 53;
LnParser.RULE_leftarg = 54;
LnParser.RULE_rightarg = 55;
LnParser.RULE_propertytypeline = 56;
LnParser.RULE_argtype = 57;
LnParser.RULE_arglist = 58;
LnParser.RULE_exports = 59;
LnParser.RULE_varlist = 60;
LnParser.RULE_renameablevar = 61;
LnParser.RULE_varop = 62;
LnParser.RULE_varn = 63;
LnParser.RULE_varsegment = 64;
LnParser.RULE_arrayaccess = 65;

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ModuleContext.prototype.imports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportsContext);
    } else {
        return this.getTypedRuleContext(ImportsContext,i);
    }
};

ModuleContext.prototype.types = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypesContext);
    } else {
        return this.getTypedRuleContext(TypesContext,i);
    }
};

ModuleContext.prototype.constdeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstdeclarationContext);
    } else {
        return this.getTypedRuleContext(ConstdeclarationContext,i);
    }
};

ModuleContext.prototype.functions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionsContext);
    } else {
        return this.getTypedRuleContext(FunctionsContext,i);
    }
};

ModuleContext.prototype.operatormapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatormappingContext);
    } else {
        return this.getTypedRuleContext(OperatormappingContext,i);
    }
};

ModuleContext.prototype.events = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventsContext);
    } else {
        return this.getTypedRuleContext(EventsContext,i);
    }
};

ModuleContext.prototype.handlers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlersContext);
    } else {
        return this.getTypedRuleContext(HandlersContext,i);
    }
};

ModuleContext.prototype.interfaces = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfacesContext);
    } else {
        return this.getTypedRuleContext(InterfacesContext,i);
    }
};

ModuleContext.prototype.exports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExportsContext);
    } else {
        return this.getTypedRuleContext(ExportsContext,i);
    }
};

ModuleContext.prototype.EOF = function() {
    return this.getToken(LnParser.EOF, 0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitModule(this);
	}
};




LnParser.ModuleContext = ModuleContext;

LnParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, LnParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 162;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.IMPORT:
        case LnParser.FROM:
        case LnParser.TYPE:
        case LnParser.FN:
        case LnParser.EVENT:
        case LnParser.ON:
        case LnParser.EXPORT:
        case LnParser.CONST:
        case LnParser.PREFIX:
        case LnParser.INFIX:
        case LnParser.INTERFACE:
        case LnParser.NEWLINE:
        case LnParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 135;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 132;
                    this.blank(); 
                }
                this.state = 137;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            this.state = 141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.IMPORT || _la===LnParser.FROM) {
                this.state = 138;
                this.imports();
                this.state = 143;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 157; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 157;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case LnParser.TYPE:
                    this.state = 144;
                    this.types();
                    break;
                case LnParser.CONST:
                    this.state = 145;
                    this.constdeclaration();
                    break;
                case LnParser.FN:
                    this.state = 146;
                    this.functions();
                    break;
                case LnParser.PREFIX:
                case LnParser.INFIX:
                    this.state = 147;
                    this.operatormapping();
                    break;
                case LnParser.EVENT:
                    this.state = 148;
                    this.events();
                    break;
                case LnParser.ON:
                    this.state = 149;
                    this.handlers();
                    break;
                case LnParser.INTERFACE:
                    this.state = 150;
                    this.interfaces();
                    break;
                case LnParser.EXPORT:
                    this.state = 151;
                    this.exports();
                    break;
                case LnParser.NEWLINE:
                case LnParser.WS:
                    this.state = 153; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 152;
                    		this.blank();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 155; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 159; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.EVENT) | (1 << LnParser.ON) | (1 << LnParser.EXPORT) | (1 << LnParser.CONST) | (1 << LnParser.PREFIX) | (1 << LnParser.INFIX) | (1 << LnParser.INTERFACE))) !== 0) || _la===LnParser.NEWLINE || _la===LnParser.WS);
            break;
        case LnParser.EOF:
            this.enterOuterAlt(localctx, 2);
            this.state = 161;
            this.match(LnParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_blank;
    return this;
}

BlankContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankContext.prototype.constructor = BlankContext;

BlankContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

BlankContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

BlankContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBlank(this);
	}
};

BlankContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBlank(this);
	}
};




LnParser.BlankContext = BlankContext;

LnParser.prototype.blank = function() {

    var localctx = new BlankContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, LnParser.RULE_blank);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 164;
        _la = this._input.LA(1);
        if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_imports;
    return this;
}

ImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsContext.prototype.constructor = ImportsContext;

ImportsContext.prototype.standardImport = function() {
    return this.getTypedRuleContext(StandardImportContext,0);
};

ImportsContext.prototype.fromImport = function() {
    return this.getTypedRuleContext(FromImportContext,0);
};

ImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterImports(this);
	}
};

ImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitImports(this);
	}
};




LnParser.ImportsContext = ImportsContext;

LnParser.prototype.imports = function() {

    var localctx = new ImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, LnParser.RULE_imports);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.IMPORT:
            this.state = 166;
            this.standardImport();
            break;
        case LnParser.FROM:
            this.state = 167;
            this.fromImport();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StandardImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_standardImport;
    return this;
}

StandardImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardImportContext.prototype.constructor = StandardImportContext;

StandardImportContext.prototype.IMPORT = function() {
    return this.getToken(LnParser.IMPORT, 0);
};

StandardImportContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


StandardImportContext.prototype.dependency = function() {
    return this.getTypedRuleContext(DependencyContext,0);
};

StandardImportContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

StandardImportContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

StandardImportContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


StandardImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterStandardImport(this);
	}
};

StandardImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitStandardImport(this);
	}
};




LnParser.StandardImportContext = StandardImportContext;

LnParser.prototype.standardImport = function() {

    var localctx = new StandardImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, LnParser.RULE_standardImport);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 170;
        this.match(LnParser.IMPORT);
        this.state = 171;
        this.match(LnParser.WS);
        this.state = 172;
        this.dependency();
        this.state = 177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.WS) {
            this.state = 173;
            this.match(LnParser.WS);
            this.state = 174;
            this.match(LnParser.AS);
            this.state = 175;
            this.match(LnParser.WS);
            this.state = 176;
            this.match(LnParser.VARNAME);
        }

        this.state = 180; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 179;
        		this.match(LnParser.NEWLINE);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 182; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fromImport;
    return this;
}

FromImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromImportContext.prototype.constructor = FromImportContext;

FromImportContext.prototype.FROM = function() {
    return this.getToken(LnParser.FROM, 0);
};

FromImportContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FromImportContext.prototype.dependency = function() {
    return this.getTypedRuleContext(DependencyContext,0);
};

FromImportContext.prototype.IMPORT = function() {
    return this.getToken(LnParser.IMPORT, 0);
};

FromImportContext.prototype.varlist = function() {
    return this.getTypedRuleContext(VarlistContext,0);
};

FromImportContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


FromImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFromImport(this);
	}
};

FromImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFromImport(this);
	}
};




LnParser.FromImportContext = FromImportContext;

LnParser.prototype.fromImport = function() {

    var localctx = new FromImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, LnParser.RULE_fromImport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 184;
        this.match(LnParser.FROM);
        this.state = 185;
        this.match(LnParser.WS);
        this.state = 186;
        this.dependency();
        this.state = 187;
        this.match(LnParser.WS);
        this.state = 188;
        this.match(LnParser.IMPORT);
        this.state = 189;
        this.match(LnParser.WS);
        this.state = 190;
        this.varlist();
        this.state = 192; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 191;
        		this.match(LnParser.NEWLINE);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 194; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,9, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_dependency;
    return this;
}

DependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DependencyContext.prototype.constructor = DependencyContext;

DependencyContext.prototype.localdependency = function() {
    return this.getTypedRuleContext(LocaldependencyContext,0);
};

DependencyContext.prototype.globaldependency = function() {
    return this.getTypedRuleContext(GlobaldependencyContext,0);
};

DependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterDependency(this);
	}
};

DependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitDependency(this);
	}
};




LnParser.DependencyContext = DependencyContext;

LnParser.prototype.dependency = function() {

    var localctx = new DependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, LnParser.RULE_dependency);
    try {
        this.state = 198;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CURDIR:
        case LnParser.PARDIR:
            this.enterOuterAlt(localctx, 1);
            this.state = 196;
            this.localdependency();
            break;
        case LnParser.GLOBAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 197;
            this.globaldependency();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocaldependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_localdependency;
    return this;
}

LocaldependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocaldependencyContext.prototype.constructor = LocaldependencyContext;

LocaldependencyContext.prototype.CURDIR = function() {
    return this.getToken(LnParser.CURDIR, 0);
};

LocaldependencyContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


LocaldependencyContext.prototype.DIRSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.DIRSEP);
    } else {
        return this.getToken(LnParser.DIRSEP, i);
    }
};


LocaldependencyContext.prototype.PARDIR = function() {
    return this.getToken(LnParser.PARDIR, 0);
};

LocaldependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLocaldependency(this);
	}
};

LocaldependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLocaldependency(this);
	}
};




LnParser.LocaldependencyContext = LocaldependencyContext;

LnParser.prototype.localdependency = function() {

    var localctx = new LocaldependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, LnParser.RULE_localdependency);
    var _la = 0; // Token type
    try {
        this.state = 212;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CURDIR:
            this.enterOuterAlt(localctx, 1);
            this.state = 200;
            this.match(LnParser.CURDIR);
            this.state = 202; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 201;
                _la = this._input.LA(1);
                if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 204; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
            break;
        case LnParser.PARDIR:
            this.enterOuterAlt(localctx, 2);
            this.state = 206;
            this.match(LnParser.PARDIR);
            this.state = 208; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 207;
                _la = this._input.LA(1);
                if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 210; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobaldependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_globaldependency;
    return this;
}

GlobaldependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobaldependencyContext.prototype.constructor = GlobaldependencyContext;

GlobaldependencyContext.prototype.GLOBAL = function() {
    return this.getToken(LnParser.GLOBAL, 0);
};

GlobaldependencyContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


GlobaldependencyContext.prototype.DIRSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.DIRSEP);
    } else {
        return this.getToken(LnParser.DIRSEP, i);
    }
};


GlobaldependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterGlobaldependency(this);
	}
};

GlobaldependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitGlobaldependency(this);
	}
};




LnParser.GlobaldependencyContext = GlobaldependencyContext;

LnParser.prototype.globaldependency = function() {

    var localctx = new GlobaldependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, LnParser.RULE_globaldependency);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 214;
        this.match(LnParser.GLOBAL);
        this.state = 216; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 215;
            _la = this._input.LA(1);
            if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 218; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPE = function() {
    return this.getToken(LnParser.TYPE, 0);
};

TypesContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypesContext.prototype.typebody = function() {
    return this.getTypedRuleContext(TypebodyContext,0);
};

TypesContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

TypesContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

TypesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypesContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypes(this);
	}
};




LnParser.TypesContext = TypesContext;

LnParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, LnParser.RULE_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 220;
        this.match(LnParser.TYPE);
        this.state = 222; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 221;
            this.blank();
            this.state = 224; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 226;
        this.typename();
        this.state = 230;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 227;
                this.blank(); 
            }
            this.state = 232;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

        this.state = 234;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 233;
            this.typegenerics();
        }

        this.state = 237; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 236;
            this.blank();
            this.state = 239; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 250;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.state = 241;
            this.typebody();
            break;
        case LnParser.EQUALS:
            this.state = 242;
            this.match(LnParser.EQUALS);
            this.state = 246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 243;
                this.blank();
                this.state = 248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 249;
            this.othertype();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OthertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_othertype;
    return this;
}

OthertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OthertypeContext.prototype.constructor = OthertypeContext;

OthertypeContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

OthertypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OthertypeContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

OthertypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOthertype(this);
	}
};

OthertypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOthertype(this);
	}
};




LnParser.OthertypeContext = OthertypeContext;

LnParser.prototype.othertype = function() {

    var localctx = new OthertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, LnParser.RULE_othertype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        this.typename();
        this.state = 256;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 253;
                this.blank(); 
            }
            this.state = 258;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

        this.state = 260;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 259;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

TypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypename(this);
	}
};

TypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypename(this);
	}
};




LnParser.TypenameContext = TypenameContext;

LnParser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, LnParser.RULE_typename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 262;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypegenericsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typegenerics;
    return this;
}

TypegenericsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypegenericsContext.prototype.constructor = TypegenericsContext;

TypegenericsContext.prototype.OPENGENERIC = function() {
    return this.getToken(LnParser.OPENGENERIC, 0);
};

TypegenericsContext.prototype.fulltypename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltypenameContext);
    } else {
        return this.getTypedRuleContext(FulltypenameContext,i);
    }
};

TypegenericsContext.prototype.CLOSEGENERIC = function() {
    return this.getToken(LnParser.CLOSEGENERIC, 0);
};

TypegenericsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypegenericsContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


TypegenericsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypegenerics(this);
	}
};

TypegenericsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypegenerics(this);
	}
};




LnParser.TypegenericsContext = TypegenericsContext;

LnParser.prototype.typegenerics = function() {

    var localctx = new TypegenericsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, LnParser.RULE_typegenerics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 264;
        this.match(LnParser.OPENGENERIC);
        this.state = 268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 265;
            this.blank();
            this.state = 270;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 271;
        this.fulltypename();
        this.state = 275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 272;
            this.blank();
            this.state = 277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 278;
            this.match(LnParser.SEP);
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 279;
                this.blank();
                this.state = 284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 285;
            this.fulltypename();
            this.state = 289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 286;
                this.blank();
                this.state = 291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 296;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 297;
        this.match(LnParser.CLOSEGENERIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FulltypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fulltypename;
    return this;
}

FulltypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltypenameContext.prototype.constructor = FulltypenameContext;

FulltypenameContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

FulltypenameContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FulltypenameContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

FulltypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFulltypename(this);
	}
};

FulltypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFulltypename(this);
	}
};




LnParser.FulltypenameContext = FulltypenameContext;

LnParser.prototype.fulltypename = function() {

    var localctx = new FulltypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, LnParser.RULE_fulltypename);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.varn();
        this.state = 303;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 300;
                this.blank(); 
            }
            this.state = 305;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 306;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typebody;
    return this;
}

TypebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypebodyContext.prototype.constructor = TypebodyContext;

TypebodyContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

TypebodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

TypebodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypebodyContext.prototype.typeline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypelineContext);
    } else {
        return this.getTypedRuleContext(TypelineContext,i);
    }
};

TypebodyContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypebodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypebody(this);
	}
};

TypebodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypebody(this);
	}
};




LnParser.TypebodyContext = TypebodyContext;

LnParser.prototype.typebody = function() {

    var localctx = new TypebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, LnParser.RULE_typebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.match(LnParser.OPENBODY);
        this.state = 313;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 310;
                this.blank(); 
            }
            this.state = 315;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

        this.state = 323; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 319;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===LnParser.WS) {
        		    this.state = 316;
        		    this.match(LnParser.WS);
        		    this.state = 321;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 322;
        		this.typeline();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 325; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,32, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 327;
            this.blank();
        }

        this.state = 330;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeline;
    return this;
}

TypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypelineContext.prototype.constructor = TypelineContext;

TypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

TypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

TypelineContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

TypelineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


TypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeline(this);
	}
};

TypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeline(this);
	}
};




LnParser.TypelineContext = TypelineContext;

LnParser.prototype.typeline = function() {

    var localctx = new TypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, LnParser.RULE_typeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.match(LnParser.VARNAME);
        this.state = 334;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 333;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 336;
        this.match(LnParser.TYPESEP);
        this.state = 338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 337;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 340;
        this.fulltypename();
        this.state = 344;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 341;
                this.match(LnParser.NEWLINE); 
            }
            this.state = 346;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FN = function() {
    return this.getToken(LnParser.FN, 0);
};

FunctionsContext.prototype.fullfunctionbody = function() {
    return this.getTypedRuleContext(FullfunctionbodyContext,0);
};

FunctionsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FunctionsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FunctionsContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

FunctionsContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

FunctionsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

FunctionsContext.prototype.argtype = function() {
    return this.getTypedRuleContext(ArgtypeContext,0);
};

FunctionsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FunctionsContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctions(this);
	}
};




LnParser.FunctionsContext = FunctionsContext;

LnParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, LnParser.RULE_functions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.match(LnParser.FN);
        this.state = 349; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 348;
            this.blank();
            this.state = 351; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENARGS || _la===LnParser.VARNAME) {
            this.state = 360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.VARNAME) {
                this.state = 353;
                this.match(LnParser.VARNAME);
                this.state = 357;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 354;
                    this.blank();
                    this.state = 359;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 362;
            this.match(LnParser.OPENARGS);
            this.state = 364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.VARNAME) {
                this.state = 363;
                this.arglist();
            }

            this.state = 366;
            this.match(LnParser.CLOSEARGS);
            this.state = 370;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 367;
                    this.blank(); 
                }
                this.state = 372;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
            }

            this.state = 387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (LnParser.TYPESEP - 37)) | (1 << (LnParser.NEWLINE - 37)) | (1 << (LnParser.WS - 37)))) !== 0)) {
                this.state = 374;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 373;
                    _la = this._input.LA(1);
                    if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 376;
                this.match(LnParser.TYPESEP);
                this.state = 378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 377;
                    _la = this._input.LA(1);
                    if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 380;
                this.argtype();
                this.state = 384;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 381;
                    this.blank();
                    this.state = 386;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

        }

        this.state = 391;
        this.fullfunctionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FullfunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fullfunctionbody;
    return this;
}

FullfunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullfunctionbodyContext.prototype.constructor = FullfunctionbodyContext;

FullfunctionbodyContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FullfunctionbodyContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

FullfunctionbodyContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

FullfunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FullfunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFullfunctionbody(this);
	}
};

FullfunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFullfunctionbody(this);
	}
};




LnParser.FullfunctionbodyContext = FullfunctionbodyContext;

LnParser.prototype.fullfunctionbody = function() {

    var localctx = new FullfunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, LnParser.RULE_fullfunctionbody);
    var _la = 0; // Token type
    try {
        this.state = 402;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.enterOuterAlt(localctx, 1);
            this.state = 393;
            this.functionbody();
            break;
        case LnParser.EQUALS:
            this.enterOuterAlt(localctx, 2);
            this.state = 394;
            this.match(LnParser.EQUALS);
            this.state = 398;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 395;
                this.blank();
                this.state = 400;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 401;
            this.assignables();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

FunctionbodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

FunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionbodyContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

FunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctionbody(this);
	}
};

FunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctionbody(this);
	}
};




LnParser.FunctionbodyContext = FunctionbodyContext;

LnParser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, LnParser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        this.match(LnParser.OPENBODY);
        this.state = 408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 405;
            this.blank();
            this.state = 410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 412; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 411;
            this.statements();
            this.state = 414; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.CONST) | (1 << LnParser.LET) | (1 << LnParser.RETURN) | (1 << LnParser.EMIT) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.IF) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (LnParser.STRINGCONSTANT - 43)) | (1 << (LnParser.NUMBERCONSTANT - 43)) | (1 << (LnParser.VARNAME - 43)))) !== 0));
        this.state = 419;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 416;
            this.blank();
            this.state = 421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 422;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

StatementsContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

StatementsContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

StatementsContext.prototype.exits = function() {
    return this.getTypedRuleContext(ExitsContext,0);
};

StatementsContext.prototype.emits = function() {
    return this.getTypedRuleContext(EmitsContext,0);
};

StatementsContext.prototype.conditionals = function() {
    return this.getTypedRuleContext(ConditionalsContext,0);
};

StatementsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitStatements(this);
	}
};




LnParser.StatementsContext = StatementsContext;

LnParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, LnParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.state = 424;
            this.declarations();
            break;

        case 2:
            this.state = 425;
            this.assignments();
            break;

        case 3:
            this.state = 426;
            this.calls();
            break;

        case 4:
            this.state = 427;
            this.exits();
            break;

        case 5:
            this.state = 428;
            this.emits();
            break;

        case 6:
            this.state = 429;
            this.conditionals();
            break;

        }
        this.state = 433; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 432;
        		this.blank();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 435; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,53, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

DeclarationsContext.prototype.letdeclaration = function() {
    return this.getTypedRuleContext(LetdeclarationContext,0);
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitDeclarations(this);
	}
};




LnParser.DeclarationsContext = DeclarationsContext;

LnParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, LnParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CONST:
            this.state = 437;
            this.constdeclaration();
            break;
        case LnParser.LET:
            this.state = 438;
            this.letdeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_constdeclaration;
    return this;
}

ConstdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstdeclarationContext.prototype.constructor = ConstdeclarationContext;

ConstdeclarationContext.prototype.CONST = function() {
    return this.getToken(LnParser.CONST, 0);
};

ConstdeclarationContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

ConstdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConstdeclarationContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

ConstdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

ConstdeclarationContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

ConstdeclarationContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

ConstdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConstdeclaration(this);
	}
};

ConstdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConstdeclaration(this);
	}
};




LnParser.ConstdeclarationContext = ConstdeclarationContext;

LnParser.prototype.constdeclaration = function() {

    var localctx = new ConstdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, LnParser.RULE_constdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.match(LnParser.CONST);
        this.state = 445;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 442;
                this.blank(); 
            }
            this.state = 447;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

        this.state = 459;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        if(la_===1) {
            this.state = 448;
            this.match(LnParser.VARNAME);
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 449;
                this.blank();
                this.state = 454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 455;
            this.match(LnParser.TYPESEP);
            this.state = 457;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 456;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }

        }
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 461;
            this.blank();
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 467;
        this.assignments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_letdeclaration;
    return this;
}

LetdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetdeclarationContext.prototype.constructor = LetdeclarationContext;

LetdeclarationContext.prototype.LET = function() {
    return this.getToken(LnParser.LET, 0);
};

LetdeclarationContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

LetdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

LetdeclarationContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

LetdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

LetdeclarationContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

LetdeclarationContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

LetdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLetdeclaration(this);
	}
};

LetdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLetdeclaration(this);
	}
};




LnParser.LetdeclarationContext = LetdeclarationContext;

LnParser.prototype.letdeclaration = function() {

    var localctx = new LetdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, LnParser.RULE_letdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.match(LnParser.LET);
        this.state = 473;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 470;
                this.blank(); 
            }
            this.state = 475;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

        this.state = 487;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        if(la_===1) {
            this.state = 476;
            this.match(LnParser.VARNAME);
            this.state = 480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 477;
                this.blank();
                this.state = 482;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 483;
            this.match(LnParser.TYPESEP);
            this.state = 485;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            if(la_===1) {
                this.state = 484;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }

        }
        this.state = 492;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 489;
            this.blank();
            this.state = 494;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 495;
        this.assignments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignments;
    return this;
}

AssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentsContext.prototype.constructor = AssignmentsContext;

AssignmentsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

AssignmentsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignmentsContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

AssignmentsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

AssignmentsContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

AssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignments(this);
	}
};

AssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignments(this);
	}
};




LnParser.AssignmentsContext = AssignmentsContext;

LnParser.prototype.assignments = function() {

    var localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, LnParser.RULE_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.varn();
        this.state = 501;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 498;
                this.blank(); 
            }
            this.state = 503;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 524;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.state = 505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.OPENGENERIC) {
                this.state = 504;
                this.typegenerics();
            }

            this.state = 510;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 507;
                this.blank();
                this.state = 512;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 513;
            this.match(LnParser.EQUALS);
            this.state = 517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 514;
                this.blank();
                this.state = 519;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 520;
            this.assignables();
            break;

        case 2:
            this.state = 522;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.OPENGENERIC) {
                this.state = 521;
                this.typegenerics();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignables;
    return this;
}

AssignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablesContext.prototype.constructor = AssignablesContext;

AssignablesContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

AssignablesContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

AssignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignables(this);
	}
};

AssignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignables(this);
	}
};




LnParser.AssignablesContext = AssignablesContext;

LnParser.prototype.assignables = function() {

    var localctx = new AssignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, LnParser.RULE_assignables);
    try {
        this.state = 528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 526;
            this.basicassignables();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 527;
            this.withoperators();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasicassignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_basicassignables;
    return this;
}

BasicassignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicassignablesContext.prototype.constructor = BasicassignablesContext;

BasicassignablesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

BasicassignablesContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

BasicassignablesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

BasicassignablesContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

BasicassignablesContext.prototype.groups = function() {
    return this.getTypedRuleContext(GroupsContext,0);
};

BasicassignablesContext.prototype.typeofn = function() {
    return this.getTypedRuleContext(TypeofnContext,0);
};

BasicassignablesContext.prototype.objectliterals = function() {
    return this.getTypedRuleContext(ObjectliteralsContext,0);
};

BasicassignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBasicassignables(this);
	}
};

BasicassignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBasicassignables(this);
	}
};




LnParser.BasicassignablesContext = BasicassignablesContext;

LnParser.prototype.basicassignables = function() {

    var localctx = new BasicassignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, LnParser.RULE_basicassignables);
    try {
        this.state = 537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.functions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 531;
            this.calls();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 532;
            this.varn();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 533;
            this.constants();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 534;
            this.groups();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 535;
            this.typeofn();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 536;
            this.objectliterals();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatororassignableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatororassignable;
    return this;
}

OperatororassignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatororassignableContext.prototype.constructor = OperatororassignableContext;

OperatororassignableContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatororassignableContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

OperatororassignableContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatororassignable(this);
	}
};

OperatororassignableContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatororassignable(this);
	}
};




LnParser.OperatororassignableContext = OperatororassignableContext;

LnParser.prototype.operatororassignable = function() {

    var localctx = new OperatororassignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, LnParser.RULE_operatororassignable);
    try {
        this.state = 541;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENGENERIC:
        case LnParser.CLOSEGENERIC:
        case LnParser.GLOBAL:
        case LnParser.DIRSEP:
        case LnParser.OR:
        case LnParser.TYPESEP:
        case LnParser.GENERALOPERATORS:
            this.enterOuterAlt(localctx, 1);
            this.state = 539;
            this.operators();
            break;
        case LnParser.TYPE:
        case LnParser.FN:
        case LnParser.BOOLCONSTANT:
        case LnParser.NEW:
        case LnParser.OPENARGS:
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.STRINGCONSTANT:
        case LnParser.NUMBERCONSTANT:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 2);
            this.state = 540;
            this.basicassignables();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithoperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_withoperators;
    return this;
}

WithoperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithoperatorsContext.prototype.constructor = WithoperatorsContext;

WithoperatorsContext.prototype.operatororassignable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatororassignableContext);
    } else {
        return this.getTypedRuleContext(OperatororassignableContext,i);
    }
};

WithoperatorsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


WithoperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterWithoperators(this);
	}
};

WithoperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitWithoperators(this);
	}
};




LnParser.WithoperatorsContext = WithoperatorsContext;

LnParser.prototype.withoperators = function() {

    var localctx = new WithoperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, LnParser.RULE_withoperators);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 543;
        		this.operatororassignable();
        		this.state = 547;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 544;
        		        this.match(LnParser.WS); 
        		    }
        		    this.state = 549;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 552; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,75, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_groups;
    return this;
}

GroupsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupsContext.prototype.constructor = GroupsContext;

GroupsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

GroupsContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

GroupsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

GroupsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


GroupsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterGroups(this);
	}
};

GroupsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitGroups(this);
	}
};




LnParser.GroupsContext = GroupsContext;

LnParser.prototype.groups = function() {

    var localctx = new GroupsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, LnParser.RULE_groups);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.match(LnParser.OPENARGS);
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 555;
            this.match(LnParser.WS);
            this.state = 560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 561;
        this.withoperators();
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 562;
            this.match(LnParser.WS);
            this.state = 567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 568;
        this.match(LnParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeofnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeofn;
    return this;
}

TypeofnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeofnContext.prototype.constructor = TypeofnContext;

TypeofnContext.prototype.TYPE = function() {
    return this.getToken(LnParser.TYPE, 0);
};

TypeofnContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

TypeofnContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypeofnContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeofn(this);
	}
};

TypeofnContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeofn(this);
	}
};




LnParser.TypeofnContext = TypeofnContext;

LnParser.prototype.typeofn = function() {

    var localctx = new TypeofnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, LnParser.RULE_typeofn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.match(LnParser.TYPE);
        this.state = 574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 571;
            this.match(LnParser.WS);
            this.state = 576;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 577;
        this.basicassignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectliteralsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_objectliterals;
    return this;
}

ObjectliteralsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectliteralsContext.prototype.constructor = ObjectliteralsContext;

ObjectliteralsContext.prototype.arrayliteral = function() {
    return this.getTypedRuleContext(ArrayliteralContext,0);
};

ObjectliteralsContext.prototype.typeliteral = function() {
    return this.getTypedRuleContext(TypeliteralContext,0);
};

ObjectliteralsContext.prototype.mapliteral = function() {
    return this.getTypedRuleContext(MapliteralContext,0);
};

ObjectliteralsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterObjectliterals(this);
	}
};

ObjectliteralsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitObjectliterals(this);
	}
};




LnParser.ObjectliteralsContext = ObjectliteralsContext;

LnParser.prototype.objectliterals = function() {

    var localctx = new ObjectliteralsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, LnParser.RULE_objectliterals);
    try {
        this.state = 582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 579;
            this.arrayliteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 580;
            this.typeliteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 581;
            this.mapliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arrayliteral;
    return this;
}

ArrayliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayliteralContext.prototype.constructor = ArrayliteralContext;

ArrayliteralContext.prototype.OPENARRAY = function() {
    return this.getToken(LnParser.OPENARRAY, 0);
};

ArrayliteralContext.prototype.CLOSEARRAY = function() {
    return this.getToken(LnParser.CLOSEARRAY, 0);
};

ArrayliteralContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

ArrayliteralContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

ArrayliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArrayliteralContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

ArrayliteralContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArrayliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArrayliteral(this);
	}
};

ArrayliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArrayliteral(this);
	}
};




LnParser.ArrayliteralContext = ArrayliteralContext;

LnParser.prototype.arrayliteral = function() {

    var localctx = new ArrayliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, LnParser.RULE_arrayliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEW) {
            this.state = 584;
            this.match(LnParser.NEW);
            this.state = 588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 585;
                this.match(LnParser.WS);
                this.state = 590;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 591;
            this.othertype();
            this.state = 595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 592;
                this.match(LnParser.WS);
                this.state = 597;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 600;
        this.match(LnParser.OPENARRAY);
        this.state = 604;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 601;
                this.blank(); 
            }
            this.state = 606;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

        this.state = 608;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 607;
            this.assignablelist();

        }
        this.state = 613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 610;
            this.blank();
            this.state = 615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 616;
        this.match(LnParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeliteral;
    return this;
}

TypeliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeliteralContext.prototype.constructor = TypeliteralContext;

TypeliteralContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

TypeliteralContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

TypeliteralContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

TypeliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

TypeliteralContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypeliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypeliteralContext.prototype.assignments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentsContext);
    } else {
        return this.getTypedRuleContext(AssignmentsContext,i);
    }
};

TypeliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeliteral(this);
	}
};

TypeliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeliteral(this);
	}
};




LnParser.TypeliteralContext = TypeliteralContext;

LnParser.prototype.typeliteral = function() {

    var localctx = new TypeliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, LnParser.RULE_typeliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(LnParser.NEW);
        this.state = 622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 619;
            this.match(LnParser.WS);
            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 625;
        this.othertype();
        this.state = 629;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 626;
            this.match(LnParser.WS);
            this.state = 631;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 632;
        this.match(LnParser.OPENBODY);
        this.state = 636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 633;
            this.blank();
            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 645; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 639;
            this.assignments();
            this.state = 641; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 640;
                this.blank();
                this.state = 643; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            this.state = 647; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 28)) & ~0x1f) == 0 && ((1 << (_la - 28)) & ((1 << (LnParser.OPENARRAY - 28)) | (1 << (LnParser.METHODSEP - 28)) | (1 << (LnParser.VARNAME - 28)))) !== 0));
        this.state = 649;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_mapliteral;
    return this;
}

MapliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapliteralContext.prototype.constructor = MapliteralContext;

MapliteralContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

MapliteralContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

MapliteralContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

MapliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

MapliteralContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


MapliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

MapliteralContext.prototype.mapline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MaplineContext);
    } else {
        return this.getTypedRuleContext(MaplineContext,i);
    }
};

MapliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterMapliteral(this);
	}
};

MapliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitMapliteral(this);
	}
};




LnParser.MapliteralContext = MapliteralContext;

LnParser.prototype.mapliteral = function() {

    var localctx = new MapliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, LnParser.RULE_mapliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(LnParser.NEW);
        this.state = 655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 652;
            this.match(LnParser.WS);
            this.state = 657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 658;
        this.othertype();
        this.state = 662;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 659;
            this.match(LnParser.WS);
            this.state = 664;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 665;
        this.match(LnParser.OPENBODY);
        this.state = 669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 666;
            this.blank();
            this.state = 671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.NEW) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LnParser.GLOBAL - 32)) | (1 << (LnParser.DIRSEP - 32)) | (1 << (LnParser.OR - 32)) | (1 << (LnParser.TYPESEP - 32)) | (1 << (LnParser.GENERALOPERATORS - 32)) | (1 << (LnParser.STRINGCONSTANT - 32)) | (1 << (LnParser.NUMBERCONSTANT - 32)) | (1 << (LnParser.VARNAME - 32)))) !== 0)) {
            this.state = 672;
            this.mapline();
            this.state = 674; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 673;
                this.blank();
                this.state = 676; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            this.state = 682;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 683;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaplineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_mapline;
    return this;
}

MaplineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaplineContext.prototype.constructor = MaplineContext;

MaplineContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

MaplineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

MaplineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


MaplineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterMapline(this);
	}
};

MaplineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitMapline(this);
	}
};




LnParser.MaplineContext = MaplineContext;

LnParser.prototype.mapline = function() {

    var localctx = new MaplineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, LnParser.RULE_mapline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.assignables();
        this.state = 689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 686;
            this.match(LnParser.WS);
            this.state = 691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 692;
        this.match(LnParser.TYPESEP);
        this.state = 696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 693;
            this.match(LnParser.WS);
            this.state = 698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 699;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignablelist;
    return this;
}

AssignablelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablelistContext.prototype.constructor = AssignablelistContext;

AssignablelistContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

AssignablelistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignablelistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


AssignablelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignablelist(this);
	}
};

AssignablelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignablelist(this);
	}
};




LnParser.AssignablelistContext = AssignablelistContext;

LnParser.prototype.assignablelist = function() {

    var localctx = new AssignablelistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, LnParser.RULE_assignablelist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 701;
            this.blank();
            this.state = 706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 707;
        this.assignables();
        this.state = 718;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 708;
                this.match(LnParser.SEP);
                this.state = 712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 709;
                    this.blank();
                    this.state = 714;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 715;
                this.assignables(); 
            }
            this.state = 720;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

        this.state = 722;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.SEP) {
            this.state = 721;
            this.match(LnParser.SEP);
        }

        this.state = 727;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 724;
                this.blank(); 
            }
            this.state = 729;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FncallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fncall;
    return this;
}

FncallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FncallContext.prototype.constructor = FncallContext;

FncallContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FncallContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FncallContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

FncallContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFncall(this);
	}
};

FncallContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFncall(this);
	}
};




LnParser.FncallContext = FncallContext;

LnParser.prototype.fncall = function() {

    var localctx = new FncallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, LnParser.RULE_fncall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this.match(LnParser.OPENARGS);
        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.NEW) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LnParser.GLOBAL - 32)) | (1 << (LnParser.DIRSEP - 32)) | (1 << (LnParser.OR - 32)) | (1 << (LnParser.TYPESEP - 32)) | (1 << (LnParser.GENERALOPERATORS - 32)) | (1 << (LnParser.NEWLINE - 32)) | (1 << (LnParser.WS - 32)) | (1 << (LnParser.STRINGCONSTANT - 32)) | (1 << (LnParser.NUMBERCONSTANT - 32)) | (1 << (LnParser.VARNAME - 32)))) !== 0)) {
            this.state = 731;
            this.assignablelist();
        }

        this.state = 734;
        this.match(LnParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.varn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarnContext);
    } else {
        return this.getTypedRuleContext(VarnContext,i);
    }
};

CallsContext.prototype.fncall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FncallContext);
    } else {
        return this.getTypedRuleContext(FncallContext,i);
    }
};

CallsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


CallsContext.prototype.METHODSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.METHODSEP);
    } else {
        return this.getToken(LnParser.METHODSEP, i);
    }
};


CallsContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

CallsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

CallsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

CallsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitCalls(this);
	}
};




LnParser.CallsContext = CallsContext;

LnParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, LnParser.RULE_calls);
    var _la = 0; // Token type
    try {
        this.state = 780;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 736;
            this.varn();
            this.state = 740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 737;
                this.match(LnParser.WS);
                this.state = 742;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 743;
            this.fncall();
            this.state = 756;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 744;
                    this.match(LnParser.METHODSEP);
                    this.state = 745;
                    this.varn();
                    this.state = 749;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===LnParser.WS) {
                        this.state = 746;
                        this.match(LnParser.WS);
                        this.state = 751;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 752;
                    this.fncall(); 
                }
                this.state = 758;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
            }

            break;
        case LnParser.BOOLCONSTANT:
        case LnParser.OPENARGS:
        case LnParser.STRINGCONSTANT:
        case LnParser.NUMBERCONSTANT:
            this.enterOuterAlt(localctx, 2);
            this.state = 764;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LnParser.BOOLCONSTANT:
            case LnParser.STRINGCONSTANT:
            case LnParser.NUMBERCONSTANT:
                this.state = 759;
                this.constants();
                break;
            case LnParser.OPENARGS:
                this.state = 760;
                this.match(LnParser.OPENARGS);
                this.state = 761;
                this.assignables();
                this.state = 762;
                this.match(LnParser.CLOSEARGS);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 776; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 766;
            		this.match(LnParser.METHODSEP);
            		this.state = 767;
            		this.varn();
            		this.state = 771;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		while(_la===LnParser.WS) {
            		    this.state = 768;
            		    this.match(LnParser.WS);
            		    this.state = 773;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		}
            		this.state = 774;
            		this.fncall();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 778; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,109, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_exits;
    return this;
}

ExitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitsContext.prototype.constructor = ExitsContext;

ExitsContext.prototype.RETURN = function() {
    return this.getToken(LnParser.RETURN, 0);
};

ExitsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ExitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ExitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterExits(this);
	}
};

ExitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitExits(this);
	}
};




LnParser.ExitsContext = ExitsContext;

LnParser.prototype.exits = function() {

    var localctx = new ExitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, LnParser.RULE_exits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 782;
        this.match(LnParser.RETURN);
        this.state = 790;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        if(la_===1) {
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 783;
                this.blank();
                this.state = 788;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 789;
            this.assignables();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_emits;
    return this;
}

EmitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitsContext.prototype.constructor = EmitsContext;

EmitsContext.prototype.EMIT = function() {
    return this.getToken(LnParser.EMIT, 0);
};

EmitsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EmitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EmitsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

EmitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEmits(this);
	}
};

EmitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEmits(this);
	}
};




LnParser.EmitsContext = EmitsContext;

LnParser.prototype.emits = function() {

    var localctx = new EmitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, LnParser.RULE_emits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this.match(LnParser.EMIT);
        this.state = 796;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 793;
            this.blank();
            this.state = 798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 799;
        this.varn();
        this.state = 807;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 800;
                this.blank();
                this.state = 805;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 806;
            this.assignables();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_conditionals;
    return this;
}

ConditionalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalsContext.prototype.constructor = ConditionalsContext;

ConditionalsContext.prototype.IF = function() {
    return this.getToken(LnParser.IF, 0);
};

ConditionalsContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

ConditionalsContext.prototype.blocklikes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlocklikesContext);
    } else {
        return this.getTypedRuleContext(BlocklikesContext,i);
    }
};

ConditionalsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConditionalsContext.prototype.ELSE = function() {
    return this.getToken(LnParser.ELSE, 0);
};

ConditionalsContext.prototype.conditionals = function() {
    return this.getTypedRuleContext(ConditionalsContext,0);
};

ConditionalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConditionals(this);
	}
};

ConditionalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConditionals(this);
	}
};




LnParser.ConditionalsContext = ConditionalsContext;

LnParser.prototype.conditionals = function() {

    var localctx = new ConditionalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, LnParser.RULE_conditionals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.match(LnParser.IF);
        this.state = 813;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 810;
            this.blank();
            this.state = 815;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 816;
        this.withoperators();
        this.state = 820;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 817;
            this.blank();
            this.state = 822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 823;
        this.blocklikes();
        this.state = 841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        if(la_===1) {
            this.state = 827;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 824;
                this.blank();
                this.state = 829;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 830;
            this.match(LnParser.ELSE);
            this.state = 834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 831;
                this.blank();
                this.state = 836;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 839;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LnParser.IF:
                this.state = 837;
                this.conditionals();
                break;
            case LnParser.FN:
            case LnParser.OPENBODY:
            case LnParser.OPENARRAY:
            case LnParser.METHODSEP:
            case LnParser.VARNAME:
                this.state = 838;
                this.blocklikes();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlocklikesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_blocklikes;
    return this;
}

BlocklikesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlocklikesContext.prototype.constructor = BlocklikesContext;

BlocklikesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

BlocklikesContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

BlocklikesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

BlocklikesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBlocklikes(this);
	}
};

BlocklikesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBlocklikes(this);
	}
};




LnParser.BlocklikesContext = BlocklikesContext;

LnParser.prototype.blocklikes = function() {

    var localctx = new BlocklikesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, LnParser.RULE_blocklikes);
    try {
        this.state = 846;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.FN:
            this.enterOuterAlt(localctx, 1);
            this.state = 843;
            this.functions();
            break;
        case LnParser.OPENBODY:
            this.enterOuterAlt(localctx, 2);
            this.state = 844;
            this.functionbody();
            break;
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 3);
            this.state = 845;
            this.varn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_constants;
    return this;
}

ConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantsContext.prototype.constructor = ConstantsContext;

ConstantsContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(LnParser.NUMBERCONSTANT, 0);
};

ConstantsContext.prototype.STRINGCONSTANT = function() {
    return this.getToken(LnParser.STRINGCONSTANT, 0);
};

ConstantsContext.prototype.BOOLCONSTANT = function() {
    return this.getToken(LnParser.BOOLCONSTANT, 0);
};

ConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConstants(this);
	}
};

ConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConstants(this);
	}
};




LnParser.ConstantsContext = ConstantsContext;

LnParser.prototype.constants = function() {

    var localctx = new ConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, LnParser.RULE_constants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        _la = this._input.LA(1);
        if(!(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (LnParser.BOOLCONSTANT - 13)) | (1 << (LnParser.STRINGCONSTANT - 13)) | (1 << (LnParser.NUMBERCONSTANT - 13)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operators;
    return this;
}

OperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorsContext.prototype.constructor = OperatorsContext;

OperatorsContext.prototype.GENERALOPERATORS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.GENERALOPERATORS);
    } else {
        return this.getToken(LnParser.GENERALOPERATORS, i);
    }
};


OperatorsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

OperatorsContext.prototype.OPENGENERIC = function() {
    return this.getToken(LnParser.OPENGENERIC, 0);
};

OperatorsContext.prototype.OR = function() {
    return this.getToken(LnParser.OR, 0);
};

OperatorsContext.prototype.GLOBAL = function() {
    return this.getToken(LnParser.GLOBAL, 0);
};

OperatorsContext.prototype.DIRSEP = function() {
    return this.getToken(LnParser.DIRSEP, 0);
};

OperatorsContext.prototype.CLOSEGENERIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.CLOSEGENERIC);
    } else {
        return this.getToken(LnParser.CLOSEGENERIC, i);
    }
};


OperatorsContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.EQUALS);
    } else {
        return this.getToken(LnParser.EQUALS, i);
    }
};


OperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperators(this);
	}
};

OperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperators(this);
	}
};




LnParser.OperatorsContext = OperatorsContext;

LnParser.prototype.operators = function() {

    var localctx = new OperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, LnParser.RULE_operators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 879;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.GENERALOPERATORS:
            this.state = 850;
            this.match(LnParser.GENERALOPERATORS);
            break;
        case LnParser.TYPESEP:
            this.state = 851;
            this.match(LnParser.TYPESEP);
            break;
        case LnParser.OPENGENERIC:
            this.state = 852;
            this.match(LnParser.OPENGENERIC);
            break;
        case LnParser.OR:
            this.state = 853;
            this.match(LnParser.OR);
            break;
        case LnParser.CLOSEGENERIC:
            this.state = 855; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 854;
            		this.match(LnParser.CLOSEGENERIC);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 857; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,123, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 875;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
            if(la_===1) {
                this.state = 860; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 859;
                    this.match(LnParser.EQUALS);
                    this.state = 862; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.EQUALS);
                this.state = 867;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 864;
                        this.match(LnParser.GENERALOPERATORS); 
                    }
                    this.state = 869;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
                }


            } else if(la_===2) {
                this.state = 871; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 870;
                		this.match(LnParser.GENERALOPERATORS);
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 873; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,126, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

            }
            break;
        case LnParser.GLOBAL:
            this.state = 877;
            this.match(LnParser.GLOBAL);
            break;
        case LnParser.DIRSEP:
            this.state = 878;
            this.match(LnParser.DIRSEP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatormappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatormapping;
    return this;
}

OperatormappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatormappingContext.prototype.constructor = OperatormappingContext;

OperatormappingContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


OperatormappingContext.prototype.PREFIX = function() {
    return this.getToken(LnParser.PREFIX, 0);
};

OperatormappingContext.prototype.INFIX = function() {
    return this.getToken(LnParser.INFIX, 0);
};

OperatormappingContext.prototype.fntoop = function() {
    return this.getTypedRuleContext(FntoopContext,0);
};

OperatormappingContext.prototype.opprecedence = function() {
    return this.getTypedRuleContext(OpprecedenceContext,0);
};

OperatormappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatormapping(this);
	}
};

OperatormappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatormapping(this);
	}
};




LnParser.OperatormappingContext = OperatormappingContext;

LnParser.prototype.operatormapping = function() {

    var localctx = new OperatormappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, LnParser.RULE_operatormapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        _la = this._input.LA(1);
        if(!(_la===LnParser.PREFIX || _la===LnParser.INFIX)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 882;
        this.match(LnParser.WS);
        this.state = 891;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 883;
            this.fntoop();
            this.state = 884;
            this.match(LnParser.WS);
            this.state = 885;
            this.opprecedence();
            break;
        case LnParser.PRECEDENCE:
            this.state = 887;
            this.opprecedence();
            this.state = 888;
            this.match(LnParser.WS);
            this.state = 889;
            this.fntoop();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FntoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fntoop;
    return this;
}

FntoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FntoopContext.prototype.constructor = FntoopContext;

FntoopContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

FntoopContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FntoopContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

FntoopContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

FntoopContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFntoop(this);
	}
};

FntoopContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFntoop(this);
	}
};




LnParser.FntoopContext = FntoopContext;

LnParser.prototype.fntoop = function() {

    var localctx = new FntoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, LnParser.RULE_fntoop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 893;
        this.varn();
        this.state = 894;
        this.match(LnParser.WS);
        this.state = 895;
        this.match(LnParser.AS);
        this.state = 896;
        this.match(LnParser.WS);
        this.state = 897;
        this.operators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpprecedenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_opprecedence;
    return this;
}

OpprecedenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpprecedenceContext.prototype.constructor = OpprecedenceContext;

OpprecedenceContext.prototype.PRECEDENCE = function() {
    return this.getToken(LnParser.PRECEDENCE, 0);
};

OpprecedenceContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

OpprecedenceContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(LnParser.NUMBERCONSTANT, 0);
};

OpprecedenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOpprecedence(this);
	}
};

OpprecedenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOpprecedence(this);
	}
};




LnParser.OpprecedenceContext = OpprecedenceContext;

LnParser.prototype.opprecedence = function() {

    var localctx = new OpprecedenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, LnParser.RULE_opprecedence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.match(LnParser.PRECEDENCE);
        this.state = 900;
        this.match(LnParser.WS);
        this.state = 901;
        this.match(LnParser.NUMBERCONSTANT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_events;
    return this;
}

EventsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventsContext.prototype.constructor = EventsContext;

EventsContext.prototype.EVENT = function() {
    return this.getToken(LnParser.EVENT, 0);
};

EventsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EventsContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

EventsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

EventsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EventsContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

EventsContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

EventsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEvents(this);
	}
};

EventsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEvents(this);
	}
};




LnParser.EventsContext = EventsContext;

LnParser.prototype.events = function() {

    var localctx = new EventsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, LnParser.RULE_events);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this.match(LnParser.EVENT);
        this.state = 904;
        this.blank();
        this.state = 905;
        this.match(LnParser.VARNAME);
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 906;
            this.blank();
            this.state = 911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 912;
        this.match(LnParser.TYPESEP);
        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 913;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 916;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_handlers;
    return this;
}

HandlersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlersContext.prototype.constructor = HandlersContext;

HandlersContext.prototype.ON = function() {
    return this.getToken(LnParser.ON, 0);
};

HandlersContext.prototype.eventref = function() {
    return this.getTypedRuleContext(EventrefContext,0);
};

HandlersContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

HandlersContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

HandlersContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

HandlersContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

HandlersContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterHandlers(this);
	}
};

HandlersContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitHandlers(this);
	}
};




LnParser.HandlersContext = HandlersContext;

LnParser.prototype.handlers = function() {

    var localctx = new HandlersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, LnParser.RULE_handlers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.match(LnParser.ON);
        this.state = 920; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 919;
            this.blank();
            this.state = 922; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 924;
        this.eventref();
        this.state = 926; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 925;
            this.blank();
            this.state = 928; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 933;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.FN:
            this.state = 930;
            this.functions();
            break;
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 931;
            this.varn();
            break;
        case LnParser.OPENBODY:
            this.state = 932;
            this.functionbody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventrefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_eventref;
    return this;
}

EventrefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventrefContext.prototype.constructor = EventrefContext;

EventrefContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EventrefContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

EventrefContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEventref(this);
	}
};

EventrefContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEventref(this);
	}
};




LnParser.EventrefContext = EventrefContext;

LnParser.prototype.eventref = function() {

    var localctx = new EventrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, LnParser.RULE_eventref);
    try {
        this.state = 937;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 935;
            this.varn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 936;
            this.calls();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_interfaces;
    return this;
}

InterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacesContext.prototype.constructor = InterfacesContext;

InterfacesContext.prototype.INTERFACE = function() {
    return this.getToken(LnParser.INTERFACE, 0);
};

InterfacesContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

InterfacesContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


InterfacesContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

InterfacesContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

InterfacesContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

InterfacesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

InterfacesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

InterfacesContext.prototype.interfaceline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfacelineContext);
    } else {
        return this.getTypedRuleContext(InterfacelineContext,i);
    }
};

InterfacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInterfaces(this);
	}
};

InterfacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInterfaces(this);
	}
};




LnParser.InterfacesContext = InterfacesContext;

LnParser.prototype.interfaces = function() {

    var localctx = new InterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, LnParser.RULE_interfaces);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.match(LnParser.INTERFACE);
        this.state = 943;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 940;
            this.match(LnParser.WS);
            this.state = 945;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 946;
        this.match(LnParser.VARNAME);
        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 947;
            this.match(LnParser.WS);
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 980;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.state = 953;
            this.match(LnParser.OPENBODY);
            this.state = 957;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 954;
                this.blank();
                this.state = 959;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.FN) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LnParser.GLOBAL - 32)) | (1 << (LnParser.DIRSEP - 32)) | (1 << (LnParser.OR - 32)) | (1 << (LnParser.TYPESEP - 32)) | (1 << (LnParser.GENERALOPERATORS - 32)) | (1 << (LnParser.VARNAME - 32)))) !== 0)) {
                this.state = 960;
                this.interfaceline();
                this.state = 962; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 961;
                    this.blank();
                    this.state = 964; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
                this.state = 970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 971;
            this.match(LnParser.CLOSEBODY);
            break;
        case LnParser.EQUALS:
            this.state = 972;
            this.match(LnParser.EQUALS);
            this.state = 976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 973;
                this.blank();
                this.state = 978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 979;
            this.varn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfacelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_interfaceline;
    return this;
}

InterfacelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacelineContext.prototype.constructor = InterfacelineContext;

InterfacelineContext.prototype.functiontypeline = function() {
    return this.getTypedRuleContext(FunctiontypelineContext,0);
};

InterfacelineContext.prototype.operatortypeline = function() {
    return this.getTypedRuleContext(OperatortypelineContext,0);
};

InterfacelineContext.prototype.propertytypeline = function() {
    return this.getTypedRuleContext(PropertytypelineContext,0);
};

InterfacelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInterfaceline(this);
	}
};

InterfacelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInterfaceline(this);
	}
};




LnParser.InterfacelineContext = InterfacelineContext;

LnParser.prototype.interfaceline = function() {

    var localctx = new InterfacelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, LnParser.RULE_interfaceline);
    try {
        this.state = 985;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 982;
            this.functiontypeline();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 983;
            this.operatortypeline();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 984;
            this.propertytypeline();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functiontypeline;
    return this;
}

FunctiontypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontypelineContext.prototype.constructor = FunctiontypelineContext;

FunctiontypelineContext.prototype.functiontype = function() {
    return this.getTypedRuleContext(FunctiontypeContext,0);
};

FunctiontypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

FunctiontypelineContext.prototype.FN = function() {
    return this.getToken(LnParser.FN, 0);
};

FunctiontypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FunctiontypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctiontypeline(this);
	}
};

FunctiontypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctiontypeline(this);
	}
};




LnParser.FunctiontypelineContext = FunctiontypelineContext;

LnParser.prototype.functiontypeline = function() {

    var localctx = new FunctiontypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, LnParser.RULE_functiontypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        _la = this._input.LA(1);
        if(!(_la===LnParser.FN || _la===LnParser.VARNAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 991;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 988;
            this.match(LnParser.WS);
            this.state = 993;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 994;
        this.functiontype();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functiontype;
    return this;
}

FunctiontypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontypeContext.prototype.constructor = FunctiontypeContext;

FunctiontypeContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FunctiontypeContext.prototype.varn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarnContext);
    } else {
        return this.getTypedRuleContext(VarnContext,i);
    }
};

FunctiontypeContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FunctiontypeContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

FunctiontypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctiontypeContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


FunctiontypeContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

FunctiontypeContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

FunctiontypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctiontype(this);
	}
};

FunctiontypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctiontype(this);
	}
};




LnParser.FunctiontypeContext = FunctiontypeContext;

LnParser.prototype.functiontype = function() {

    var localctx = new FunctiontypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, LnParser.RULE_functiontype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 996;
        this.match(LnParser.OPENARGS);
        this.state = 1000;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 997;
            this.blank();
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1003;
        this.varn();
        this.state = 1007;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1004;
            this.blank();
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1010;
            this.match(LnParser.SEP);
            this.state = 1014;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1011;
                this.blank();
                this.state = 1016;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1017;
            this.varn();
            this.state = 1021;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1018;
                this.blank();
                this.state = 1023;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1029;
        this.match(LnParser.CLOSEARGS);
        this.state = 1031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1030;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1033;
        this.match(LnParser.TYPESEP);
        this.state = 1037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1034;
            this.blank();
            this.state = 1039;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1040;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatortypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatortypeline;
    return this;
}

OperatortypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatortypelineContext.prototype.constructor = OperatortypelineContext;

OperatortypelineContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatortypelineContext.prototype.rightarg = function() {
    return this.getTypedRuleContext(RightargContext,0);
};

OperatortypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

OperatortypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

OperatortypelineContext.prototype.leftarg = function() {
    return this.getTypedRuleContext(LeftargContext,0);
};

OperatortypelineContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OperatortypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatortypeline(this);
	}
};

OperatortypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatortypeline(this);
	}
};




LnParser.OperatortypelineContext = OperatortypelineContext;

LnParser.prototype.operatortypeline = function() {

    var localctx = new OperatortypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, LnParser.RULE_operatortypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 28)) & ~0x1f) == 0 && ((1 << (_la - 28)) & ((1 << (LnParser.OPENARRAY - 28)) | (1 << (LnParser.METHODSEP - 28)) | (1 << (LnParser.VARNAME - 28)))) !== 0)) {
            this.state = 1042;
            this.leftarg();
            this.state = 1046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1043;
                this.blank();
                this.state = 1048;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1051;
        this.operators();
        this.state = 1055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1052;
            this.blank();
            this.state = 1057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1058;
        this.rightarg();
        this.state = 1062;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1059;
            this.blank();
            this.state = 1064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1065;
        this.match(LnParser.TYPESEP);
        this.state = 1069;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1066;
            this.blank();
            this.state = 1071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1072;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftargContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_leftarg;
    return this;
}

LeftargContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftargContext.prototype.constructor = LeftargContext;

LeftargContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

LeftargContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLeftarg(this);
	}
};

LeftargContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLeftarg(this);
	}
};




LnParser.LeftargContext = LeftargContext;

LnParser.prototype.leftarg = function() {

    var localctx = new LeftargContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, LnParser.RULE_leftarg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1074;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightargContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_rightarg;
    return this;
}

RightargContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightargContext.prototype.constructor = RightargContext;

RightargContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

RightargContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterRightarg(this);
	}
};

RightargContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitRightarg(this);
	}
};




LnParser.RightargContext = RightargContext;

LnParser.prototype.rightarg = function() {

    var localctx = new RightargContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, LnParser.RULE_rightarg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertytypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_propertytypeline;
    return this;
}

PropertytypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertytypelineContext.prototype.constructor = PropertytypelineContext;

PropertytypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

PropertytypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

PropertytypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

PropertytypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


PropertytypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterPropertytypeline(this);
	}
};

PropertytypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitPropertytypeline(this);
	}
};




LnParser.PropertytypelineContext = PropertytypelineContext;

LnParser.prototype.propertytypeline = function() {

    var localctx = new PropertytypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, LnParser.RULE_propertytypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1078;
        this.match(LnParser.VARNAME);
        this.state = 1082;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1079;
            this.match(LnParser.WS);
            this.state = 1084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1085;
        this.match(LnParser.TYPESEP);
        this.state = 1089;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1086;
            this.match(LnParser.WS);
            this.state = 1091;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1092;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_argtype;
    return this;
}

ArgtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgtypeContext.prototype.constructor = ArgtypeContext;

ArgtypeContext.prototype.othertype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OthertypeContext);
    } else {
        return this.getTypedRuleContext(OthertypeContext,i);
    }
};

ArgtypeContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.OR);
    } else {
        return this.getToken(LnParser.OR, i);
    }
};


ArgtypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArgtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArgtype(this);
	}
};

ArgtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArgtype(this);
	}
};




LnParser.ArgtypeContext = ArgtypeContext;

LnParser.prototype.argtype = function() {

    var localctx = new ArgtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, LnParser.RULE_argtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.othertype();
        this.state = 1111;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 1095;
                    this.blank();
                    this.state = 1100;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1101;
                this.match(LnParser.OR);
                this.state = 1105;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 1102;
                    this.blank();
                    this.state = 1107;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1108;
                this.othertype(); 
            }
            this.state = 1113;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


ArglistContext.prototype.TYPESEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.TYPESEP);
    } else {
        return this.getToken(LnParser.TYPESEP, i);
    }
};


ArglistContext.prototype.argtype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgtypeContext);
    } else {
        return this.getTypedRuleContext(ArgtypeContext,i);
    }
};

ArglistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


ArglistContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArglistContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArglist(this);
	}
};




LnParser.ArglistContext = ArglistContext;

LnParser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, LnParser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1114;
        this.match(LnParser.VARNAME);
        this.state = 1116;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1115;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1118;
        this.match(LnParser.TYPESEP);
        this.state = 1120;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1119;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1122;
        this.argtype();
        this.state = 1135;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1123;
            this.match(LnParser.SEP);
            this.state = 1124;
            this.match(LnParser.VARNAME);
            this.state = 1126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1125;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1128;
            this.match(LnParser.TYPESEP);
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1129;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1132;
            this.argtype();
            this.state = 1137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_exports;
    return this;
}

ExportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsContext.prototype.constructor = ExportsContext;

ExportsContext.prototype.EXPORT = function() {
    return this.getToken(LnParser.EXPORT, 0);
};

ExportsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

ExportsContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ExportsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

ExportsContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExportsContext.prototype.operatormapping = function() {
    return this.getTypedRuleContext(OperatormappingContext,0);
};

ExportsContext.prototype.events = function() {
    return this.getTypedRuleContext(EventsContext,0);
};

ExportsContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

ExportsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ExportsContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


ExportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterExports(this);
	}
};

ExportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitExports(this);
	}
};




LnParser.ExportsContext = ExportsContext;

LnParser.prototype.exports = function() {

    var localctx = new ExportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, LnParser.RULE_exports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        this.match(LnParser.EXPORT);
        this.state = 1140; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1139;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1142; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 1151;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 1144;
            this.varn();
            break;
        case LnParser.TYPE:
            this.state = 1145;
            this.types();
            break;
        case LnParser.CONST:
            this.state = 1146;
            this.constdeclaration();
            break;
        case LnParser.FN:
            this.state = 1147;
            this.functions();
            break;
        case LnParser.PREFIX:
        case LnParser.INFIX:
            this.state = 1148;
            this.operatormapping();
            break;
        case LnParser.EVENT:
            this.state = 1149;
            this.events();
            break;
        case LnParser.INTERFACE:
            this.state = 1150;
            this.interfaces();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varlist;
    return this;
}

VarlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarlistContext.prototype.constructor = VarlistContext;

VarlistContext.prototype.renameablevar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenameablevarContext);
    } else {
        return this.getTypedRuleContext(RenameablevarContext,i);
    }
};

VarlistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


VarlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarlist(this);
	}
};

VarlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarlist(this);
	}
};




LnParser.VarlistContext = VarlistContext;

LnParser.prototype.varlist = function() {

    var localctx = new VarlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, LnParser.RULE_varlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1153;
        this.renameablevar();
        this.state = 1158;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1154;
            this.match(LnParser.SEP);
            this.state = 1155;
            this.renameablevar();
            this.state = 1160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RenameablevarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_renameablevar;
    return this;
}

RenameablevarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameablevarContext.prototype.constructor = RenameablevarContext;

RenameablevarContext.prototype.varop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VaropContext);
    } else {
        return this.getTypedRuleContext(VaropContext,i);
    }
};

RenameablevarContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


RenameablevarContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

RenameablevarContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterRenameablevar(this);
	}
};

RenameablevarContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitRenameablevar(this);
	}
};




LnParser.RenameablevarContext = RenameablevarContext;

LnParser.prototype.renameablevar = function() {

    var localctx = new RenameablevarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, LnParser.RULE_renameablevar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1161;
        this.varop();
        this.state = 1166;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.WS) {
            this.state = 1162;
            this.match(LnParser.WS);
            this.state = 1163;
            this.match(LnParser.AS);
            this.state = 1164;
            this.match(LnParser.WS);
            this.state = 1165;
            this.varop();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VaropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varop;
    return this;
}

VaropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VaropContext.prototype.constructor = VaropContext;

VaropContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

VaropContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

VaropContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarop(this);
	}
};

VaropContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarop(this);
	}
};




LnParser.VaropContext = VaropContext;

LnParser.prototype.varop = function() {

    var localctx = new VaropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, LnParser.RULE_varop);
    try {
        this.state = 1170;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1168;
            this.match(LnParser.VARNAME);
            break;
        case LnParser.OPENGENERIC:
        case LnParser.CLOSEGENERIC:
        case LnParser.GLOBAL:
        case LnParser.DIRSEP:
        case LnParser.OR:
        case LnParser.TYPESEP:
        case LnParser.GENERALOPERATORS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1169;
            this.operators();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varn;
    return this;
}

VarnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarnContext.prototype.constructor = VarnContext;

VarnContext.prototype.varsegment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarsegmentContext);
    } else {
        return this.getTypedRuleContext(VarsegmentContext,i);
    }
};

VarnContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarn(this);
	}
};

VarnContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarn(this);
	}
};




LnParser.VarnContext = VarnContext;

LnParser.prototype.varn = function() {

    var localctx = new VarnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, LnParser.RULE_varn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1172;
        		this.varsegment();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1175; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,172, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarsegmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varsegment;
    return this;
}

VarsegmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarsegmentContext.prototype.constructor = VarsegmentContext;

VarsegmentContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

VarsegmentContext.prototype.METHODSEP = function() {
    return this.getToken(LnParser.METHODSEP, 0);
};

VarsegmentContext.prototype.arrayaccess = function() {
    return this.getTypedRuleContext(ArrayaccessContext,0);
};

VarsegmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarsegment(this);
	}
};

VarsegmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarsegment(this);
	}
};




LnParser.VarsegmentContext = VarsegmentContext;

LnParser.prototype.varsegment = function() {

    var localctx = new VarsegmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, LnParser.RULE_varsegment);
    try {
        this.state = 1180;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1177;
            this.match(LnParser.VARNAME);
            break;
        case LnParser.METHODSEP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1178;
            this.match(LnParser.METHODSEP);
            break;
        case LnParser.OPENARRAY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1179;
            this.arrayaccess();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayaccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arrayaccess;
    return this;
}

ArrayaccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayaccessContext.prototype.constructor = ArrayaccessContext;

ArrayaccessContext.prototype.OPENARRAY = function() {
    return this.getToken(LnParser.OPENARRAY, 0);
};

ArrayaccessContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ArrayaccessContext.prototype.CLOSEARRAY = function() {
    return this.getToken(LnParser.CLOSEARRAY, 0);
};

ArrayaccessContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArrayaccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArrayaccess(this);
	}
};

ArrayaccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArrayaccess(this);
	}
};




LnParser.ArrayaccessContext = ArrayaccessContext;

LnParser.prototype.arrayaccess = function() {

    var localctx = new ArrayaccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, LnParser.RULE_arrayaccess);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1182;
        this.match(LnParser.OPENARRAY);
        this.state = 1186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1183;
            this.match(LnParser.WS);
            this.state = 1188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1189;
        this.assignables();
        this.state = 1193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1190;
            this.match(LnParser.WS);
            this.state = 1195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1196;
        this.match(LnParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.LnParser = LnParser;
