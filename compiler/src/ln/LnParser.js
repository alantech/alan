// Generated from Ln.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var LnListener = require('./LnListener').LnListener;
var grammarFileName = "Ln.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003/\u04b5\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0003\u0002\u0007\u0002\u0088\n\u0002\f\u0002",
    "\u000e\u0002\u008b\u000b\u0002\u0003\u0002\u0007\u0002\u008e\n\u0002",
    "\f\u0002\u000e\u0002\u0091\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0006\u0002\u009c\n\u0002\r\u0002\u000e\u0002\u009d\u0006\u0002",
    "\u00a0\n\u0002\r\u0002\u000e\u0002\u00a1\u0003\u0002\u0005\u0002\u00a5",
    "\n\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u00ab\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00b4\n\u0005\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u00b8\n\u0005\f\u0005\u000e\u0005\u00bb\u000b",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u00c6\n\u0006",
    "\f\u0006\u000e\u0006\u00c9\u000b\u0006\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u00cd\n\u0007\u0003\b\u0003\b\u0006\b\u00d1\n\b\r\b\u000e\b\u00d2",
    "\u0003\b\u0003\b\u0006\b\u00d7\n\b\r\b\u000e\b\u00d8\u0005\b\u00db\n",
    "\b\u0003\t\u0003\t\u0006\t\u00df\n\t\r\t\u000e\t\u00e0\u0003\n\u0003",
    "\n\u0006\n\u00e5\n\n\r\n\u000e\n\u00e6\u0003\n\u0003\n\u0007\n\u00eb",
    "\n\n\f\n\u000e\n\u00ee\u000b\n\u0003\n\u0005\n\u00f1\n\n\u0003\n\u0006",
    "\n\u00f4\n\n\r\n\u000e\n\u00f5\u0003\n\u0003\n\u0003\n\u0007\n\u00fb",
    "\n\n\f\n\u000e\n\u00fe\u000b\n\u0003\n\u0005\n\u0101\n\n\u0003\u000b",
    "\u0003\u000b\u0007\u000b\u0105\n\u000b\f\u000b\u000e\u000b\u0108\u000b",
    "\u000b\u0003\u000b\u0005\u000b\u010b\n\u000b\u0003\f\u0003\f\u0003\r",
    "\u0003\r\u0007\r\u0111\n\r\f\r\u000e\r\u0114\u000b\r\u0003\r\u0003\r",
    "\u0007\r\u0118\n\r\f\r\u000e\r\u011b\u000b\r\u0003\r\u0003\r\u0007\r",
    "\u011f\n\r\f\r\u000e\r\u0122\u000b\r\u0003\r\u0003\r\u0007\r\u0126\n",
    "\r\f\r\u000e\r\u0129\u000b\r\u0007\r\u012b\n\r\f\r\u000e\r\u012e\u000b",
    "\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0007\u000e\u0134\n\u000e",
    "\f\u000e\u000e\u000e\u0137\u000b\u000e\u0003\u000e\u0005\u000e\u013a",
    "\n\u000e\u0003\u000f\u0003\u000f\u0007\u000f\u013e\n\u000f\f\u000f\u000e",
    "\u000f\u0141\u000b\u000f\u0003\u000f\u0007\u000f\u0144\n\u000f\f\u000f",
    "\u000e\u000f\u0147\u000b\u000f\u0003\u000f\u0006\u000f\u014a\n\u000f",
    "\r\u000f\u000e\u000f\u014b\u0003\u000f\u0005\u000f\u014f\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0005\u0010\u0155\n\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0159\n\u0010\u0003\u0010\u0003",
    "\u0010\u0007\u0010\u015d\n\u0010\f\u0010\u000e\u0010\u0160\u000b\u0010",
    "\u0003\u0011\u0003\u0011\u0006\u0011\u0164\n\u0011\r\u0011\u000e\u0011",
    "\u0165\u0003\u0011\u0003\u0011\u0007\u0011\u016a\n\u0011\f\u0011\u000e",
    "\u0011\u016d\u000b\u0011\u0005\u0011\u016f\n\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0173\n\u0011\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u0177\n\u0011\f\u0011\u000e\u0011\u017a\u000b\u0011\u0003\u0011\u0005",
    "\u0011\u017d\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0181\n\u0011",
    "\u0003\u0011\u0003\u0011\u0007\u0011\u0185\n\u0011\f\u0011\u000e\u0011",
    "\u0188\u000b\u0011\u0005\u0011\u018a\n\u0011\u0005\u0011\u018c\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012",
    "\u0193\n\u0012\f\u0012\u000e\u0012\u0196\u000b\u0012\u0003\u0012\u0005",
    "\u0012\u0199\n\u0012\u0003\u0013\u0003\u0013\u0007\u0013\u019d\n\u0013",
    "\f\u0013\u000e\u0013\u01a0\u000b\u0013\u0003\u0013\u0006\u0013\u01a3",
    "\n\u0013\r\u0013\u000e\u0013\u01a4\u0003\u0013\u0007\u0013\u01a8\n\u0013",
    "\f\u0013\u000e\u0013\u01ab\u000b\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u01b5\n\u0014\u0003\u0014\u0006\u0014\u01b8\n\u0014\r\u0014\u000e",
    "\u0014\u01b9\u0003\u0015\u0003\u0015\u0005\u0015\u01be\n\u0015\u0003",
    "\u0016\u0003\u0016\u0007\u0016\u01c2\n\u0016\f\u0016\u000e\u0016\u01c5",
    "\u000b\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u01c9\n\u0016\f\u0016",
    "\u000e\u0016\u01cc\u000b\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01d0",
    "\n\u0016\u0005\u0016\u01d2\n\u0016\u0003\u0016\u0007\u0016\u01d5\n\u0016",
    "\f\u0016\u000e\u0016\u01d8\u000b\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0007\u0017\u01de\n\u0017\f\u0017\u000e\u0017\u01e1",
    "\u000b\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u01e5\n\u0017\f\u0017",
    "\u000e\u0017\u01e8\u000b\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01ec",
    "\n\u0017\u0005\u0017\u01ee\n\u0017\u0003\u0017\u0007\u0017\u01f1\n\u0017",
    "\f\u0017\u000e\u0017\u01f4\u000b\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0007\u0018\u01fa\n\u0018\f\u0018\u000e\u0018\u01fd",
    "\u000b\u0018\u0003\u0018\u0005\u0018\u0200\n\u0018\u0003\u0018\u0007",
    "\u0018\u0203\n\u0018\f\u0018\u000e\u0018\u0206\u000b\u0018\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u020a\n\u0018\f\u0018\u000e\u0018\u020d\u000b",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0211\n\u0018\u0005\u0018",
    "\u0213\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u0217\n\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u0220\n\u001a\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u0224\n\u001b\u0003\u001c\u0003\u001c\u0007\u001c\u0228\n\u001c\f\u001c",
    "\u000e\u001c\u022b\u000b\u001c\u0006\u001c\u022d\n\u001c\r\u001c\u000e",
    "\u001c\u022e\u0003\u001d\u0003\u001d\u0007\u001d\u0233\n\u001d\f\u001d",
    "\u000e\u001d\u0236\u000b\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u023a",
    "\n\u001d\f\u001d\u000e\u001d\u023d\u000b\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0007\u001e\u0243\n\u001e\f\u001e\u000e\u001e",
    "\u0246\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u024d\n\u001f\u0003 \u0003 \u0007 \u0251\n \f \u000e",
    " \u0254\u000b \u0003 \u0003 \u0007 \u0258\n \f \u000e \u025b\u000b ",
    "\u0005 \u025d\n \u0003 \u0003 \u0007 \u0261\n \f \u000e \u0264\u000b",
    " \u0003 \u0005 \u0267\n \u0003 \u0007 \u026a\n \f \u000e \u026d\u000b",
    " \u0003 \u0003 \u0003!\u0003!\u0007!\u0273\n!\f!\u000e!\u0276\u000b",
    "!\u0003!\u0003!\u0007!\u027a\n!\f!\u000e!\u027d\u000b!\u0003!\u0003",
    "!\u0007!\u0281\n!\f!\u000e!\u0284\u000b!\u0003!\u0003!\u0006!\u0288",
    "\n!\r!\u000e!\u0289\u0006!\u028c\n!\r!\u000e!\u028d\u0003!\u0003!\u0003",
    "\"\u0003\"\u0007\"\u0294\n\"\f\"\u000e\"\u0297\u000b\"\u0003\"\u0003",
    "\"\u0007\"\u029b\n\"\f\"\u000e\"\u029e\u000b\"\u0003\"\u0003\"\u0007",
    "\"\u02a2\n\"\f\"\u000e\"\u02a5\u000b\"\u0003\"\u0003\"\u0006\"\u02a9",
    "\n\"\r\"\u000e\"\u02aa\u0007\"\u02ad\n\"\f\"\u000e\"\u02b0\u000b\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0007#\u02b6\n#\f#\u000e#\u02b9\u000b#\u0003",
    "#\u0003#\u0007#\u02bd\n#\f#\u000e#\u02c0\u000b#\u0003#\u0003#\u0003",
    "$\u0007$\u02c5\n$\f$\u000e$\u02c8\u000b$\u0003$\u0003$\u0003$\u0007",
    "$\u02cd\n$\f$\u000e$\u02d0\u000b$\u0003$\u0007$\u02d3\n$\f$\u000e$\u02d6",
    "\u000b$\u0003$\u0005$\u02d9\n$\u0003$\u0007$\u02dc\n$\f$\u000e$\u02df",
    "\u000b$\u0003%\u0003%\u0005%\u02e3\n%\u0003%\u0003%\u0003&\u0003&\u0007",
    "&\u02e9\n&\f&\u000e&\u02ec\u000b&\u0003&\u0003&\u0003&\u0003&\u0007",
    "&\u02f2\n&\f&\u000e&\u02f5\u000b&\u0003&\u0003&\u0007&\u02f9\n&\f&\u000e",
    "&\u02fc\u000b&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0303\n&\u0003",
    "&\u0003&\u0003&\u0007&\u0308\n&\f&\u000e&\u030b\u000b&\u0003&\u0003",
    "&\u0006&\u030f\n&\r&\u000e&\u0310\u0005&\u0313\n&\u0003\'\u0003\'\u0007",
    "\'\u0317\n\'\f\'\u000e\'\u031a\u000b\'\u0003\'\u0005\'\u031d\n\'\u0003",
    "(\u0003(\u0007(\u0321\n(\f(\u000e(\u0324\u000b(\u0003(\u0003(\u0007",
    "(\u0328\n(\f(\u000e(\u032b\u000b(\u0003(\u0005(\u032e\n(\u0003)\u0003",
    ")\u0007)\u0332\n)\f)\u000e)\u0335\u000b)\u0003)\u0003)\u0007)\u0339",
    "\n)\f)\u000e)\u033c\u000b)\u0003)\u0003)\u0007)\u0340\n)\f)\u000e)\u0343",
    "\u000b)\u0003)\u0003)\u0007)\u0347\n)\f)\u000e)\u034a\u000b)\u0003)",
    "\u0003)\u0005)\u034e\n)\u0005)\u0350\n)\u0003*\u0003*\u0003*\u0005*",
    "\u0355\n*\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0006,\u035e",
    "\n,\r,\u000e,\u035f\u0003,\u0006,\u0363\n,\r,\u000e,\u0364\u0003,\u0007",
    ",\u0368\n,\f,\u000e,\u036b\u000b,\u0003,\u0006,\u036e\n,\r,\u000e,\u036f",
    "\u0005,\u0372\n,\u0003,\u0003,\u0005,\u0376\n,\u0003-\u0003-\u0003-",
    "\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0382\n-\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00030\u00070\u0392\n0\f0\u000e0\u0395\u000b0\u0003",
    "0\u00030\u00050\u0399\n0\u00030\u00030\u00031\u00031\u00061\u039f\n",
    "1\r1\u000e1\u03a0\u00031\u00031\u00061\u03a5\n1\r1\u000e1\u03a6\u0003",
    "1\u00031\u00031\u00051\u03ac\n1\u00032\u00032\u00052\u03b0\n2\u0003",
    "3\u00033\u00073\u03b4\n3\f3\u000e3\u03b7\u000b3\u00033\u00033\u0007",
    "3\u03bb\n3\f3\u000e3\u03be\u000b3\u00033\u00033\u00073\u03c2\n3\f3\u000e",
    "3\u03c5\u000b3\u00033\u00033\u00063\u03c9\n3\r3\u000e3\u03ca\u00073",
    "\u03cd\n3\f3\u000e3\u03d0\u000b3\u00033\u00033\u00033\u00073\u03d5\n",
    "3\f3\u000e3\u03d8\u000b3\u00033\u00053\u03db\n3\u00034\u00034\u0003",
    "4\u00054\u03e0\n4\u00035\u00035\u00075\u03e4\n5\f5\u000e5\u03e7\u000b",
    "5\u00035\u00035\u00036\u00036\u00076\u03ed\n6\f6\u000e6\u03f0\u000b",
    "6\u00036\u00036\u00076\u03f4\n6\f6\u000e6\u03f7\u000b6\u00036\u0003",
    "6\u00076\u03fb\n6\f6\u000e6\u03fe\u000b6\u00036\u00036\u00076\u0402",
    "\n6\f6\u000e6\u0405\u000b6\u00076\u0407\n6\f6\u000e6\u040a\u000b6\u0003",
    "6\u00036\u00056\u040e\n6\u00036\u00036\u00076\u0412\n6\f6\u000e6\u0415",
    "\u000b6\u00036\u00036\u00037\u00037\u00077\u041b\n7\f7\u000e7\u041e",
    "\u000b7\u00057\u0420\n7\u00037\u00037\u00077\u0424\n7\f7\u000e7\u0427",
    "\u000b7\u00037\u00037\u00077\u042b\n7\f7\u000e7\u042e\u000b7\u00037",
    "\u00037\u00077\u0432\n7\f7\u000e7\u0435\u000b7\u00037\u00037\u00038",
    "\u00038\u00039\u00039\u0003:\u0003:\u0007:\u043f\n:\f:\u000e:\u0442",
    "\u000b:\u0003:\u0003:\u0007:\u0446\n:\f:\u000e:\u0449\u000b:\u0003:",
    "\u0003:\u0003;\u0003;\u0007;\u044f\n;\f;\u000e;\u0452\u000b;\u0003;",
    "\u0003;\u0007;\u0456\n;\f;\u000e;\u0459\u000b;\u0003;\u0007;\u045c\n",
    ";\f;\u000e;\u045f\u000b;\u0003<\u0003<\u0005<\u0463\n<\u0003<\u0003",
    "<\u0005<\u0467\n<\u0003<\u0003<\u0003<\u0003<\u0005<\u046d\n<\u0003",
    "<\u0003<\u0005<\u0471\n<\u0003<\u0007<\u0474\n<\f<\u000e<\u0477\u000b",
    "<\u0003=\u0003=\u0006=\u047b\n=\r=\u000e=\u047c\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0005=\u0486\n=\u0003>\u0003>\u0003>\u0007",
    ">\u048b\n>\f>\u000e>\u048e\u000b>\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u0495\n?\u0003@\u0003@\u0005@\u0499\n@\u0003A\u0006A\u049c",
    "\nA\rA\u000eA\u049d\u0003B\u0003B\u0003B\u0005B\u04a3\nB\u0003C\u0003",
    "C\u0007C\u04a7\nC\fC\u000eC\u04aa\u000bC\u0003C\u0003C\u0007C\u04ae",
    "\nC\fC\u000eC\u04b1\u000bC\u0003C\u0003C\u0003C\u0002\u0002D\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0002\u0007\u0003\u0002)*\u0004\u0002%%//\u0004\u0002\u000f\u000f-",
    ".\u0003\u0002\u0010\u0011\u0004\u0002\u0006\u0006//\u0002\u0542\u0002",
    "\u00a4\u0003\u0002\u0002\u0002\u0004\u00a6\u0003\u0002\u0002\u0002\u0006",
    "\u00aa\u0003\u0002\u0002\u0002\b\u00ac\u0003\u0002\u0002\u0002\n\u00bc",
    "\u0003\u0002\u0002\u0002\f\u00cc\u0003\u0002\u0002\u0002\u000e\u00da",
    "\u0003\u0002\u0002\u0002\u0010\u00dc\u0003\u0002\u0002\u0002\u0012\u00e2",
    "\u0003\u0002\u0002\u0002\u0014\u0102\u0003\u0002\u0002\u0002\u0016\u010c",
    "\u0003\u0002\u0002\u0002\u0018\u010e\u0003\u0002\u0002\u0002\u001a\u0131",
    "\u0003\u0002\u0002\u0002\u001c\u013b\u0003\u0002\u0002\u0002\u001e\u0152",
    "\u0003\u0002\u0002\u0002 \u0161\u0003\u0002\u0002\u0002\"\u0198\u0003",
    "\u0002\u0002\u0002$\u019a\u0003\u0002\u0002\u0002&\u01b4\u0003\u0002",
    "\u0002\u0002(\u01bd\u0003\u0002\u0002\u0002*\u01bf\u0003\u0002\u0002",
    "\u0002,\u01db\u0003\u0002\u0002\u0002.\u01f7\u0003\u0002\u0002\u0002",
    "0\u0216\u0003\u0002\u0002\u00022\u021f\u0003\u0002\u0002\u00024\u0223",
    "\u0003\u0002\u0002\u00026\u022c\u0003\u0002\u0002\u00028\u0230\u0003",
    "\u0002\u0002\u0002:\u0240\u0003\u0002\u0002\u0002<\u024c\u0003\u0002",
    "\u0002\u0002>\u025c\u0003\u0002\u0002\u0002@\u0270\u0003\u0002\u0002",
    "\u0002B\u0291\u0003\u0002\u0002\u0002D\u02b3\u0003\u0002\u0002\u0002",
    "F\u02c6\u0003\u0002\u0002\u0002H\u02e0\u0003\u0002\u0002\u0002J\u0312",
    "\u0003\u0002\u0002\u0002L\u0314\u0003\u0002\u0002\u0002N\u031e\u0003",
    "\u0002\u0002\u0002P\u032f\u0003\u0002\u0002\u0002R\u0354\u0003\u0002",
    "\u0002\u0002T\u0356\u0003\u0002\u0002\u0002V\u0375\u0003\u0002\u0002",
    "\u0002X\u0377\u0003\u0002\u0002\u0002Z\u0383\u0003\u0002\u0002\u0002",
    "\\\u0389\u0003\u0002\u0002\u0002^\u038d\u0003\u0002\u0002\u0002`\u039c",
    "\u0003\u0002\u0002\u0002b\u03af\u0003\u0002\u0002\u0002d\u03b1\u0003",
    "\u0002\u0002\u0002f\u03df\u0003\u0002\u0002\u0002h\u03e1\u0003\u0002",
    "\u0002\u0002j\u03ea\u0003\u0002\u0002\u0002l\u041f\u0003\u0002\u0002",
    "\u0002n\u0438\u0003\u0002\u0002\u0002p\u043a\u0003\u0002\u0002\u0002",
    "r\u043c\u0003\u0002\u0002\u0002t\u044c\u0003\u0002\u0002\u0002v\u0460",
    "\u0003\u0002\u0002\u0002x\u0478\u0003\u0002\u0002\u0002z\u0487\u0003",
    "\u0002\u0002\u0002|\u048f\u0003\u0002\u0002\u0002~\u0498\u0003\u0002",
    "\u0002\u0002\u0080\u049b\u0003\u0002\u0002\u0002\u0082\u04a2\u0003\u0002",
    "\u0002\u0002\u0084\u04a4\u0003\u0002\u0002\u0002\u0086\u0088\u0005\u0004",
    "\u0003\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0088\u008b\u0003\u0002",
    "\u0002\u0002\u0089\u0087\u0003\u0002\u0002\u0002\u0089\u008a\u0003\u0002",
    "\u0002\u0002\u008a\u008f\u0003\u0002\u0002\u0002\u008b\u0089\u0003\u0002",
    "\u0002\u0002\u008c\u008e\u0005\u0006\u0004\u0002\u008d\u008c\u0003\u0002",
    "\u0002\u0002\u008e\u0091\u0003\u0002\u0002\u0002\u008f\u008d\u0003\u0002",
    "\u0002\u0002\u008f\u0090\u0003\u0002\u0002\u0002\u0090\u009f\u0003\u0002",
    "\u0002\u0002\u0091\u008f\u0003\u0002\u0002\u0002\u0092\u00a0\u0005\u0012",
    "\n\u0002\u0093\u00a0\u0005*\u0016\u0002\u0094\u00a0\u0005 \u0011\u0002",
    "\u0095\u00a0\u0005X-\u0002\u0096\u00a0\u0005^0\u0002\u0097\u00a0\u0005",
    "`1\u0002\u0098\u00a0\u0005d3\u0002\u0099\u00a0\u0005x=\u0002\u009a\u009c",
    "\u0005\u0004\u0003\u0002\u009b\u009a\u0003\u0002\u0002\u0002\u009c\u009d",
    "\u0003\u0002\u0002\u0002\u009d\u009b\u0003\u0002\u0002\u0002\u009d\u009e",
    "\u0003\u0002\u0002\u0002\u009e\u00a0\u0003\u0002\u0002\u0002\u009f\u0092",
    "\u0003\u0002\u0002\u0002\u009f\u0093\u0003\u0002\u0002\u0002\u009f\u0094",
    "\u0003\u0002\u0002\u0002\u009f\u0095\u0003\u0002\u0002\u0002\u009f\u0096",
    "\u0003\u0002\u0002\u0002\u009f\u0097\u0003\u0002\u0002\u0002\u009f\u0098",
    "\u0003\u0002\u0002\u0002\u009f\u0099\u0003\u0002\u0002\u0002\u009f\u009b",
    "\u0003\u0002\u0002\u0002\u00a0\u00a1\u0003\u0002\u0002\u0002\u00a1\u009f",
    "\u0003\u0002\u0002\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a5",
    "\u0003\u0002\u0002\u0002\u00a3\u00a5\u0007\u0002\u0002\u0003\u00a4\u0089",
    "\u0003\u0002\u0002\u0002\u00a4\u00a3\u0003\u0002\u0002\u0002\u00a5\u0003",
    "\u0003\u0002\u0002\u0002\u00a6\u00a7\t\u0002\u0002\u0002\u00a7\u0005",
    "\u0003\u0002\u0002\u0002\u00a8\u00ab\u0005\b\u0005\u0002\u00a9\u00ab",
    "\u0005\n\u0006\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00a9",
    "\u0003\u0002\u0002\u0002\u00ab\u0007\u0003\u0002\u0002\u0002\u00ac\u00ad",
    "\u0007\u0003\u0002\u0002\u00ad\u00ae\u0007*\u0002\u0002\u00ae\u00b3",
    "\u0005\f\u0007\u0002\u00af\u00b0\u0007*\u0002\u0002\u00b0\u00b1\u0007",
    "\u000e\u0002\u0002\u00b1\u00b2\u0007*\u0002\u0002\u00b2\u00b4\u0007",
    "/\u0002\u0002\u00b3\u00af\u0003\u0002\u0002\u0002\u00b3\u00b4\u0003",
    "\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5\u00b9\u0007",
    ")\u0002\u0002\u00b6\u00b8\u0005\u0004\u0003\u0002\u00b7\u00b6\u0003",
    "\u0002\u0002\u0002\u00b8\u00bb\u0003\u0002\u0002\u0002\u00b9\u00b7\u0003",
    "\u0002\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002\u0002\u00ba\t\u0003",
    "\u0002\u0002\u0002\u00bb\u00b9\u0003\u0002\u0002\u0002\u00bc\u00bd\u0007",
    "\u0004\u0002\u0002\u00bd\u00be\u0007*\u0002\u0002\u00be\u00bf\u0005",
    "\f\u0007\u0002\u00bf\u00c0\u0007*\u0002\u0002\u00c0\u00c1\u0007\u0003",
    "\u0002\u0002\u00c1\u00c2\u0007*\u0002\u0002\u00c2\u00c3\u0005z>\u0002",
    "\u00c3\u00c7\u0007)\u0002\u0002\u00c4\u00c6\u0005\u0004\u0003\u0002",
    "\u00c5\u00c4\u0003\u0002\u0002\u0002\u00c6\u00c9\u0003\u0002\u0002\u0002",
    "\u00c7\u00c5\u0003\u0002\u0002\u0002\u00c7\u00c8\u0003\u0002\u0002\u0002",
    "\u00c8\u000b\u0003\u0002\u0002\u0002\u00c9\u00c7\u0003\u0002\u0002\u0002",
    "\u00ca\u00cd\u0005\u000e\b\u0002\u00cb\u00cd\u0005\u0010\t\u0002\u00cc",
    "\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cb\u0003\u0002\u0002\u0002\u00cd",
    "\r\u0003\u0002\u0002\u0002\u00ce\u00d0\u0007#\u0002\u0002\u00cf\u00d1",
    "\t\u0003\u0002\u0002\u00d0\u00cf\u0003\u0002\u0002\u0002\u00d1\u00d2",
    "\u0003\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d2\u00d3",
    "\u0003\u0002\u0002\u0002\u00d3\u00db\u0003\u0002\u0002\u0002\u00d4\u00d6",
    "\u0007$\u0002\u0002\u00d5\u00d7\t\u0003\u0002\u0002\u00d6\u00d5\u0003",
    "\u0002\u0002\u0002\u00d7\u00d8\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9\u00db\u0003",
    "\u0002\u0002\u0002\u00da\u00ce\u0003\u0002\u0002\u0002\u00da\u00d4\u0003",
    "\u0002\u0002\u0002\u00db\u000f\u0003\u0002\u0002\u0002\u00dc\u00de\u0007",
    "\"\u0002\u0002\u00dd\u00df\t\u0003\u0002\u0002\u00de\u00dd\u0003\u0002",
    "\u0002\u0002\u00df\u00e0\u0003\u0002\u0002\u0002\u00e0\u00de\u0003\u0002",
    "\u0002\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002\u00e1\u0011\u0003\u0002",
    "\u0002\u0002\u00e2\u00e4\u0007\u0005\u0002\u0002\u00e3\u00e5\u0005\u0004",
    "\u0003\u0002\u00e4\u00e3\u0003\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002",
    "\u0002\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002",
    "\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00ec\u0005\u0016",
    "\f\u0002\u00e9\u00eb\u0005\u0004\u0003\u0002\u00ea\u00e9\u0003\u0002",
    "\u0002\u0002\u00eb\u00ee\u0003\u0002\u0002\u0002\u00ec\u00ea\u0003\u0002",
    "\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u00f0\u0003\u0002",
    "\u0002\u0002\u00ee\u00ec\u0003\u0002\u0002\u0002\u00ef\u00f1\u0005\u0018",
    "\r\u0002\u00f0\u00ef\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002",
    "\u0002\u0002\u00f1\u00f3\u0003\u0002\u0002\u0002\u00f2\u00f4\u0005\u0004",
    "\u0003\u0002\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003\u0002",
    "\u0002\u0002\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002",
    "\u0002\u0002\u00f6\u0100\u0003\u0002\u0002\u0002\u00f7\u0101\u0005\u001c",
    "\u000f\u0002\u00f8\u00fc\u0007!\u0002\u0002\u00f9\u00fb\u0005\u0004",
    "\u0003\u0002\u00fa\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fe\u0003\u0002",
    "\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002",
    "\u0002\u0002\u00fd\u00ff\u0003\u0002\u0002\u0002\u00fe\u00fc\u0003\u0002",
    "\u0002\u0002\u00ff\u0101\u0005\u0014\u000b\u0002\u0100\u00f7\u0003\u0002",
    "\u0002\u0002\u0100\u00f8\u0003\u0002\u0002\u0002\u0101\u0013\u0003\u0002",
    "\u0002\u0002\u0102\u0106\u0005\u0016\f\u0002\u0103\u0105\u0005\u0004",
    "\u0003\u0002\u0104\u0103\u0003\u0002\u0002\u0002\u0105\u0108\u0003\u0002",
    "\u0002\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0106\u0107\u0003\u0002",
    "\u0002\u0002\u0107\u010a\u0003\u0002\u0002\u0002\u0108\u0106\u0003\u0002",
    "\u0002\u0002\u0109\u010b\u0005\u0018\r\u0002\u010a\u0109\u0003\u0002",
    "\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\u0015\u0003\u0002",
    "\u0002\u0002\u010c\u010d\u0005\u0080A\u0002\u010d\u0017\u0003\u0002",
    "\u0002\u0002\u010e\u0112\u0007\u001c\u0002\u0002\u010f\u0111\u0005\u0004",
    "\u0003\u0002\u0110\u010f\u0003\u0002\u0002\u0002\u0111\u0114\u0003\u0002",
    "\u0002\u0002\u0112\u0110\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002",
    "\u0002\u0002\u0113\u0115\u0003\u0002\u0002\u0002\u0114\u0112\u0003\u0002",
    "\u0002\u0002\u0115\u0119\u0005\u001a\u000e\u0002\u0116\u0118\u0005\u0004",
    "\u0003\u0002\u0117\u0116\u0003\u0002\u0002\u0002\u0118\u011b\u0003\u0002",
    "\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002\u0119\u011a\u0003\u0002",
    "\u0002\u0002\u011a\u012c\u0003\u0002\u0002\u0002\u011b\u0119\u0003\u0002",
    "\u0002\u0002\u011c\u0120\u0007\u0017\u0002\u0002\u011d\u011f\u0005\u0004",
    "\u0003\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011f\u0122\u0003\u0002",
    "\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120\u0121\u0003\u0002",
    "\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u0120\u0003\u0002",
    "\u0002\u0002\u0123\u0127\u0005\u001a\u000e\u0002\u0124\u0126\u0005\u0004",
    "\u0003\u0002\u0125\u0124\u0003\u0002\u0002\u0002\u0126\u0129\u0003\u0002",
    "\u0002\u0002\u0127\u0125\u0003\u0002\u0002\u0002\u0127\u0128\u0003\u0002",
    "\u0002\u0002\u0128\u012b\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002",
    "\u0002\u0002\u012a\u011c\u0003\u0002\u0002\u0002\u012b\u012e\u0003\u0002",
    "\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012c\u012d\u0003\u0002",
    "\u0002\u0002\u012d\u012f\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002",
    "\u0002\u0002\u012f\u0130\u0007\u001d\u0002\u0002\u0130\u0019\u0003\u0002",
    "\u0002\u0002\u0131\u0135\u0005\u0080A\u0002\u0132\u0134\u0005\u0004",
    "\u0003\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0134\u0137\u0003\u0002",
    "\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002",
    "\u0002\u0002\u0136\u0139\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002",
    "\u0002\u0002\u0138\u013a\u0005\u0018\r\u0002\u0139\u0138\u0003\u0002",
    "\u0002\u0002\u0139\u013a\u0003\u0002\u0002\u0002\u013a\u001b\u0003\u0002",
    "\u0002\u0002\u013b\u013f\u0007\u0018\u0002\u0002\u013c\u013e\u0005\u0004",
    "\u0003\u0002\u013d\u013c\u0003\u0002\u0002\u0002\u013e\u0141\u0003\u0002",
    "\u0002\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002",
    "\u0002\u0002\u0140\u0149\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002",
    "\u0002\u0002\u0142\u0144\u0007*\u0002\u0002\u0143\u0142\u0003\u0002",
    "\u0002\u0002\u0144\u0147\u0003\u0002\u0002\u0002\u0145\u0143\u0003\u0002",
    "\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146\u0148\u0003\u0002",
    "\u0002\u0002\u0147\u0145\u0003\u0002\u0002\u0002\u0148\u014a\u0005\u001e",
    "\u0010\u0002\u0149\u0145\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002",
    "\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002",
    "\u0002\u0002\u014c\u014e\u0003\u0002\u0002\u0002\u014d\u014f\u0005\u0004",
    "\u0003\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002",
    "\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0151\u0007\u0019",
    "\u0002\u0002\u0151\u001d\u0003\u0002\u0002\u0002\u0152\u0154\u0007/",
    "\u0002\u0002\u0153\u0155\t\u0002\u0002\u0002\u0154\u0153\u0003\u0002",
    "\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002",
    "\u0002\u0002\u0156\u0158\u0007\'\u0002\u0002\u0157\u0159\t\u0002\u0002",
    "\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002",
    "\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015e\u0005\u001a\u000e",
    "\u0002\u015b\u015d\u0007)\u0002\u0002\u015c\u015b\u0003\u0002\u0002",
    "\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002",
    "\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u001f\u0003\u0002\u0002",
    "\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161\u0163\u0007\u0006\u0002",
    "\u0002\u0162\u0164\u0005\u0004\u0003\u0002\u0163\u0162\u0003\u0002\u0002",
    "\u0002\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002",
    "\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u018b\u0003\u0002\u0002",
    "\u0002\u0167\u016b\u0007/\u0002\u0002\u0168\u016a\u0005\u0004\u0003",
    "\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016d\u0003\u0002\u0002",
    "\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002",
    "\u0002\u016c\u016f\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002",
    "\u0002\u016e\u0167\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002",
    "\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0172\u0007\u001a\u0002",
    "\u0002\u0171\u0173\u0005v<\u0002\u0172\u0171\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002",
    "\u0174\u0178\u0007\u001b\u0002\u0002\u0175\u0177\u0005\u0004\u0003\u0002",
    "\u0176\u0175\u0003\u0002\u0002\u0002\u0177\u017a\u0003\u0002\u0002\u0002",
    "\u0178\u0176\u0003\u0002\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002",
    "\u0179\u0189\u0003\u0002\u0002\u0002\u017a\u0178\u0003\u0002\u0002\u0002",
    "\u017b\u017d\t\u0002\u0002\u0002\u017c\u017b\u0003\u0002\u0002\u0002",
    "\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002",
    "\u017e\u0180\u0007\'\u0002\u0002\u017f\u0181\t\u0002\u0002\u0002\u0180",
    "\u017f\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181",
    "\u0182\u0003\u0002\u0002\u0002\u0182\u0186\u0005t;\u0002\u0183\u0185",
    "\u0005\u0004\u0003\u0002\u0184\u0183\u0003\u0002\u0002\u0002\u0185\u0188",
    "\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002\u0002\u0002\u0186\u0187",
    "\u0003\u0002\u0002\u0002\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186",
    "\u0003\u0002\u0002\u0002\u0189\u017c\u0003\u0002\u0002\u0002\u0189\u018a",
    "\u0003\u0002\u0002\u0002\u018a\u018c\u0003\u0002\u0002\u0002\u018b\u016e",
    "\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c\u018d",
    "\u0003\u0002\u0002\u0002\u018d\u018e\u0005\"\u0012\u0002\u018e!\u0003",
    "\u0002\u0002\u0002\u018f\u0199\u0005$\u0013\u0002\u0190\u0194\u0007",
    "!\u0002\u0002\u0191\u0193\u0005\u0004\u0003\u0002\u0192\u0191\u0003",
    "\u0002\u0002\u0002\u0193\u0196\u0003\u0002\u0002\u0002\u0194\u0192\u0003",
    "\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0197\u0003",
    "\u0002\u0002\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0197\u0199\u0005",
    "0\u0019\u0002\u0198\u018f\u0003\u0002\u0002\u0002\u0198\u0190\u0003",
    "\u0002\u0002\u0002\u0199#\u0003\u0002\u0002\u0002\u019a\u019e\u0007",
    "\u0018\u0002\u0002\u019b\u019d\u0005\u0004\u0003\u0002\u019c\u019b\u0003",
    "\u0002\u0002\u0002\u019d\u01a0\u0003\u0002\u0002\u0002\u019e\u019c\u0003",
    "\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f\u01a2\u0003",
    "\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a1\u01a3\u0005",
    "&\u0014\u0002\u01a2\u01a1\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003",
    "\u0002\u0002\u0002\u01a4\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003",
    "\u0002\u0002\u0002\u01a5\u01a9\u0003\u0002\u0002\u0002\u01a6\u01a8\u0005",
    "\u0004\u0003\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a8\u01ab\u0003",
    "\u0002\u0002\u0002\u01a9\u01a7\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003",
    "\u0002\u0002\u0002\u01aa\u01ac\u0003\u0002\u0002\u0002\u01ab\u01a9\u0003",
    "\u0002\u0002\u0002\u01ac\u01ad\u0007\u0019\u0002\u0002\u01ad%\u0003",
    "\u0002\u0002\u0002\u01ae\u01b5\u0005(\u0015\u0002\u01af\u01b5\u0005",
    ".\u0018\u0002\u01b0\u01b5\u0005J&\u0002\u01b1\u01b5\u0005L\'\u0002\u01b2",
    "\u01b5\u0005N(\u0002\u01b3\u01b5\u0005P)\u0002\u01b4\u01ae\u0003\u0002",
    "\u0002\u0002\u01b4\u01af\u0003\u0002\u0002\u0002\u01b4\u01b0\u0003\u0002",
    "\u0002\u0002\u01b4\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b2\u0003\u0002",
    "\u0002\u0002\u01b4\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b7\u0003\u0002",
    "\u0002\u0002\u01b6\u01b8\u0005\u0004\u0003\u0002\u01b7\u01b6\u0003\u0002",
    "\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u01b7\u0003\u0002",
    "\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\'\u0003\u0002",
    "\u0002\u0002\u01bb\u01be\u0005*\u0016\u0002\u01bc\u01be\u0005,\u0017",
    "\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01bc\u0003\u0002\u0002",
    "\u0002\u01be)\u0003\u0002\u0002\u0002\u01bf\u01c3\u0007\n\u0002\u0002",
    "\u01c0\u01c2\u0005\u0004\u0003\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002",
    "\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01d1\u0003\u0002\u0002\u0002",
    "\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6\u01ca\u0007/\u0002\u0002",
    "\u01c7\u01c9\u0005\u0004\u0003\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002",
    "\u01c9\u01cc\u0003\u0002\u0002\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002",
    "\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01cd\u0003\u0002\u0002\u0002",
    "\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd\u01cf\u0007\'\u0002\u0002",
    "\u01ce\u01d0\t\u0002\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002",
    "\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d2\u0003\u0002\u0002\u0002",
    "\u01d1\u01c6\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002",
    "\u01d2\u01d6\u0003\u0002\u0002\u0002\u01d3\u01d5\u0005\u0004\u0003\u0002",
    "\u01d4\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d8\u0003\u0002\u0002\u0002",
    "\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002",
    "\u01d7\u01d9\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002",
    "\u01d9\u01da\u0005.\u0018\u0002\u01da+\u0003\u0002\u0002\u0002\u01db",
    "\u01df\u0007\u000b\u0002\u0002\u01dc\u01de\u0005\u0004\u0003\u0002\u01dd",
    "\u01dc\u0003\u0002\u0002\u0002\u01de\u01e1\u0003\u0002\u0002\u0002\u01df",
    "\u01dd\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0",
    "\u01ed\u0003\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e2",
    "\u01e6\u0007/\u0002\u0002\u01e3\u01e5\u0005\u0004\u0003\u0002\u01e4",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6",
    "\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7",
    "\u01e9\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9",
    "\u01eb\u0007\'\u0002\u0002\u01ea\u01ec\t\u0002\u0002\u0002\u01eb\u01ea",
    "\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ee",
    "\u0003\u0002\u0002\u0002\u01ed\u01e2\u0003\u0002\u0002\u0002\u01ed\u01ee",
    "\u0003\u0002\u0002\u0002\u01ee\u01f2\u0003\u0002\u0002\u0002\u01ef\u01f1",
    "\u0005\u0004\u0003\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f1\u01f4",
    "\u0003\u0002\u0002\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f3",
    "\u0003\u0002\u0002\u0002\u01f3\u01f5\u0003\u0002\u0002\u0002\u01f4\u01f2",
    "\u0003\u0002\u0002\u0002\u01f5\u01f6\u0005.\u0018\u0002\u01f6-\u0003",
    "\u0002\u0002\u0002\u01f7\u01fb\u0005\u0080A\u0002\u01f8\u01fa\u0005",
    "\u0004\u0003\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fd\u0003",
    "\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003",
    "\u0002\u0002\u0002\u01fc\u0212\u0003\u0002\u0002\u0002\u01fd\u01fb\u0003",
    "\u0002\u0002\u0002\u01fe\u0200\u0005\u0018\r\u0002\u01ff\u01fe\u0003",
    "\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0204\u0003",
    "\u0002\u0002\u0002\u0201\u0203\u0005\u0004\u0003\u0002\u0202\u0201\u0003",
    "\u0002\u0002\u0002\u0203\u0206\u0003\u0002\u0002\u0002\u0204\u0202\u0003",
    "\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u0207\u0003",
    "\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207\u020b\u0007",
    "!\u0002\u0002\u0208\u020a\u0005\u0004\u0003\u0002\u0209\u0208\u0003",
    "\u0002\u0002\u0002\u020a\u020d\u0003\u0002\u0002\u0002\u020b\u0209\u0003",
    "\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020e\u0003",
    "\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020e\u0213\u0005",
    "0\u0019\u0002\u020f\u0211\u0005\u0018\r\u0002\u0210\u020f\u0003\u0002",
    "\u0002\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u0213\u0003\u0002",
    "\u0002\u0002\u0212\u01ff\u0003\u0002\u0002\u0002\u0212\u0210\u0003\u0002",
    "\u0002\u0002\u0213/\u0003\u0002\u0002\u0002\u0214\u0217\u00052\u001a",
    "\u0002\u0215\u0217\u00056\u001c\u0002\u0216\u0214\u0003\u0002\u0002",
    "\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u02171\u0003\u0002\u0002",
    "\u0002\u0218\u0220\u0005 \u0011\u0002\u0219\u0220\u0005J&\u0002\u021a",
    "\u0220\u0005\u0080A\u0002\u021b\u0220\u0005T+\u0002\u021c\u0220\u0005",
    "8\u001d\u0002\u021d\u0220\u0005:\u001e\u0002\u021e\u0220\u0005<\u001f",
    "\u0002\u021f\u0218\u0003\u0002\u0002\u0002\u021f\u0219\u0003\u0002\u0002",
    "\u0002\u021f\u021a\u0003\u0002\u0002\u0002\u021f\u021b\u0003\u0002\u0002",
    "\u0002\u021f\u021c\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002",
    "\u0002\u021f\u021e\u0003\u0002\u0002\u0002\u02203\u0003\u0002\u0002",
    "\u0002\u0221\u0224\u0005V,\u0002\u0222\u0224\u00052\u001a\u0002\u0223",
    "\u0221\u0003\u0002\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0224",
    "5\u0003\u0002\u0002\u0002\u0225\u0229\u00054\u001b\u0002\u0226\u0228",
    "\u0007*\u0002\u0002\u0227\u0226\u0003\u0002\u0002\u0002\u0228\u022b",
    "\u0003\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002\u0002\u0002\u022b\u0229",
    "\u0003\u0002\u0002\u0002\u022c\u0225\u0003\u0002\u0002\u0002\u022d\u022e",
    "\u0003\u0002\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e\u022f",
    "\u0003\u0002\u0002\u0002\u022f7\u0003\u0002\u0002\u0002\u0230\u0234",
    "\u0007\u001a\u0002\u0002\u0231\u0233\u0007*\u0002\u0002\u0232\u0231",
    "\u0003\u0002\u0002\u0002\u0233\u0236\u0003\u0002\u0002\u0002\u0234\u0232",
    "\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0237",
    "\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0237\u023b",
    "\u00056\u001c\u0002\u0238\u023a\u0007*\u0002\u0002\u0239\u0238\u0003",
    "\u0002\u0002\u0002\u023a\u023d\u0003\u0002\u0002\u0002\u023b\u0239\u0003",
    "\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u023e\u0003",
    "\u0002\u0002\u0002\u023d\u023b\u0003\u0002\u0002\u0002\u023e\u023f\u0007",
    "\u001b\u0002\u0002\u023f9\u0003\u0002\u0002\u0002\u0240\u0244\u0007",
    "\u0005\u0002\u0002\u0241\u0243\u0007*\u0002\u0002\u0242\u0241\u0003",
    "\u0002\u0002\u0002\u0243\u0246\u0003\u0002\u0002\u0002\u0244\u0242\u0003",
    "\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0247\u0003",
    "\u0002\u0002\u0002\u0246\u0244\u0003\u0002\u0002\u0002\u0247\u0248\u0005",
    "2\u001a\u0002\u0248;\u0003\u0002\u0002\u0002\u0249\u024d\u0005> \u0002",
    "\u024a\u024d\u0005@!\u0002\u024b\u024d\u0005B\"\u0002\u024c\u0249\u0003",
    "\u0002\u0002\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024b\u0003",
    "\u0002\u0002\u0002\u024d=\u0003\u0002\u0002\u0002\u024e\u0252\u0007",
    "\u0015\u0002\u0002\u024f\u0251\u0007*\u0002\u0002\u0250\u024f\u0003",
    "\u0002\u0002\u0002\u0251\u0254\u0003\u0002\u0002\u0002\u0252\u0250\u0003",
    "\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255\u0003",
    "\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0255\u0259\u0005",
    "\u0014\u000b\u0002\u0256\u0258\u0007*\u0002\u0002\u0257\u0256\u0003",
    "\u0002\u0002\u0002\u0258\u025b\u0003\u0002\u0002\u0002\u0259\u0257\u0003",
    "\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025d\u0003",
    "\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025c\u024e\u0003",
    "\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025e\u0003",
    "\u0002\u0002\u0002\u025e\u0262\u0007\u001e\u0002\u0002\u025f\u0261\u0005",
    "\u0004\u0003\u0002\u0260\u025f\u0003\u0002\u0002\u0002\u0261\u0264\u0003",
    "\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0262\u0263\u0003",
    "\u0002\u0002\u0002\u0263\u0266\u0003\u0002\u0002\u0002\u0264\u0262\u0003",
    "\u0002\u0002\u0002\u0265\u0267\u0005F$\u0002\u0266\u0265\u0003\u0002",
    "\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u026b\u0003\u0002",
    "\u0002\u0002\u0268\u026a\u0005\u0004\u0003\u0002\u0269\u0268\u0003\u0002",
    "\u0002\u0002\u026a\u026d\u0003\u0002\u0002\u0002\u026b\u0269\u0003\u0002",
    "\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u026e\u0003\u0002",
    "\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e\u026f\u0007\u001f",
    "\u0002\u0002\u026f?\u0003\u0002\u0002\u0002\u0270\u0274\u0007\u0015",
    "\u0002\u0002\u0271\u0273\u0007*\u0002\u0002\u0272\u0271\u0003\u0002",
    "\u0002\u0002\u0273\u0276\u0003\u0002\u0002\u0002\u0274\u0272\u0003\u0002",
    "\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0277\u0003\u0002",
    "\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0277\u027b\u0005\u0014",
    "\u000b\u0002\u0278\u027a\u0007*\u0002\u0002\u0279\u0278\u0003\u0002",
    "\u0002\u0002\u027a\u027d\u0003\u0002\u0002\u0002\u027b\u0279\u0003\u0002",
    "\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027e\u0003\u0002",
    "\u0002\u0002\u027d\u027b\u0003\u0002\u0002\u0002\u027e\u0282\u0007\u0018",
    "\u0002\u0002\u027f\u0281\u0005\u0004\u0003\u0002\u0280\u027f\u0003\u0002",
    "\u0002\u0002\u0281\u0284\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002",
    "\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u028b\u0003\u0002",
    "\u0002\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0285\u0287\u0005.",
    "\u0018\u0002\u0286\u0288\u0005\u0004\u0003\u0002\u0287\u0286\u0003\u0002",
    "\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u0287\u0003\u0002",
    "\u0002\u0002\u0289\u028a\u0003\u0002\u0002\u0002\u028a\u028c\u0003\u0002",
    "\u0002\u0002\u028b\u0285\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002",
    "\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002",
    "\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0007\u0019",
    "\u0002\u0002\u0290A\u0003\u0002\u0002\u0002\u0291\u0295\u0007\u0015",
    "\u0002\u0002\u0292\u0294\u0007*\u0002\u0002\u0293\u0292\u0003\u0002",
    "\u0002\u0002\u0294\u0297\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002",
    "\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296\u0298\u0003\u0002",
    "\u0002\u0002\u0297\u0295\u0003\u0002\u0002\u0002\u0298\u029c\u0005\u0014",
    "\u000b\u0002\u0299\u029b\u0007*\u0002\u0002\u029a\u0299\u0003\u0002",
    "\u0002\u0002\u029b\u029e\u0003\u0002\u0002\u0002\u029c\u029a\u0003\u0002",
    "\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029f\u0003\u0002",
    "\u0002\u0002\u029e\u029c\u0003\u0002\u0002\u0002\u029f\u02a3\u0007\u0018",
    "\u0002\u0002\u02a0\u02a2\u0005\u0004\u0003\u0002\u02a1\u02a0\u0003\u0002",
    "\u0002\u0002\u02a2\u02a5\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02ae\u0003\u0002",
    "\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a6\u02a8\u0005D",
    "#\u0002\u02a7\u02a9\u0005\u0004\u0003\u0002\u02a8\u02a7\u0003\u0002",
    "\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002\u02aa\u02a8\u0003\u0002",
    "\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ad\u0003\u0002",
    "\u0002\u0002\u02ac\u02a6\u0003\u0002\u0002\u0002\u02ad\u02b0\u0003\u0002",
    "\u0002\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002",
    "\u0002\u0002\u02af\u02b1\u0003\u0002\u0002\u0002\u02b0\u02ae\u0003\u0002",
    "\u0002\u0002\u02b1\u02b2\u0007\u0019\u0002\u0002\u02b2C\u0003\u0002",
    "\u0002\u0002\u02b3\u02b7\u00050\u0019\u0002\u02b4\u02b6\u0007*\u0002",
    "\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b6\u02b9\u0003\u0002\u0002",
    "\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002",
    "\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9\u02b7\u0003\u0002\u0002",
    "\u0002\u02ba\u02be\u0007\'\u0002\u0002\u02bb\u02bd\u0007*\u0002\u0002",
    "\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bd\u02c0\u0003\u0002\u0002\u0002",
    "\u02be\u02bc\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002",
    "\u02bf\u02c1\u0003\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002",
    "\u02c1\u02c2\u00050\u0019\u0002\u02c2E\u0003\u0002\u0002\u0002\u02c3",
    "\u02c5\u0005\u0004\u0003\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002\u02c5",
    "\u02c8\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c6",
    "\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c9\u0003\u0002\u0002\u0002\u02c8",
    "\u02c6\u0003\u0002\u0002\u0002\u02c9\u02d4\u00050\u0019\u0002\u02ca",
    "\u02ce\u0007\u0017\u0002\u0002\u02cb\u02cd\u0005\u0004\u0003\u0002\u02cc",
    "\u02cb\u0003\u0002\u0002\u0002\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce",
    "\u02cc\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf",
    "\u02d1\u0003\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d1",
    "\u02d3\u00050\u0019\u0002\u02d2\u02ca\u0003\u0002\u0002\u0002\u02d3",
    "\u02d6\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d4",
    "\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d8\u0003\u0002\u0002\u0002\u02d6",
    "\u02d4\u0003\u0002\u0002\u0002\u02d7\u02d9\u0007\u0017\u0002\u0002\u02d8",
    "\u02d7\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9",
    "\u02dd\u0003\u0002\u0002\u0002\u02da\u02dc\u0005\u0004\u0003\u0002\u02db",
    "\u02da\u0003\u0002\u0002\u0002\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd",
    "\u02db\u0003\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de",
    "G\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002\u0002\u02e0",
    "\u02e2\u0007\u001a\u0002\u0002\u02e1\u02e3\u0005F$\u0002\u02e2\u02e1",
    "\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e4",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0007\u001b\u0002\u0002\u02e5I",
    "\u0003\u0002\u0002\u0002\u02e6\u02ea\u0005\u0080A\u0002\u02e7\u02e9",
    "\u0007*\u0002\u0002\u02e8\u02e7\u0003\u0002\u0002\u0002\u02e9\u02ec",
    "\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02ea\u02eb",
    "\u0003\u0002\u0002\u0002\u02eb\u02ed\u0003\u0002\u0002\u0002\u02ec\u02ea",
    "\u0003\u0002\u0002\u0002\u02ed\u02fa\u0005H%\u0002\u02ee\u02ef\u0007",
    " \u0002\u0002\u02ef\u02f3\u0005\u0080A\u0002\u02f0\u02f2\u0007*\u0002",
    "\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002\u02f2\u02f5\u0003\u0002\u0002",
    "\u0002\u02f3\u02f1\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002",
    "\u0002\u02f4\u02f6\u0003\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002\u0002",
    "\u0002\u02f6\u02f7\u0005H%\u0002\u02f7\u02f9\u0003\u0002\u0002\u0002",
    "\u02f8\u02ee\u0003\u0002\u0002\u0002\u02f9\u02fc\u0003\u0002\u0002\u0002",
    "\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002",
    "\u02fb\u0313\u0003\u0002\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002",
    "\u02fd\u0303\u0005T+\u0002\u02fe\u02ff\u0007\u001a\u0002\u0002\u02ff",
    "\u0300\u00050\u0019\u0002\u0300\u0301\u0007\u001b\u0002\u0002\u0301",
    "\u0303\u0003\u0002\u0002\u0002\u0302\u02fd\u0003\u0002\u0002\u0002\u0302",
    "\u02fe\u0003\u0002\u0002\u0002\u0303\u030e\u0003\u0002\u0002\u0002\u0304",
    "\u0305\u0007 \u0002\u0002\u0305\u0309\u0005\u0080A\u0002\u0306\u0308",
    "\u0007*\u0002\u0002\u0307\u0306\u0003\u0002\u0002\u0002\u0308\u030b",
    "\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0003\u0002\u0002\u0002\u030a\u030c\u0003\u0002\u0002\u0002\u030b\u0309",
    "\u0003\u0002\u0002\u0002\u030c\u030d\u0005H%\u0002\u030d\u030f\u0003",
    "\u0002\u0002\u0002\u030e\u0304\u0003\u0002\u0002\u0002\u030f\u0310\u0003",
    "\u0002\u0002\u0002\u0310\u030e\u0003\u0002\u0002\u0002\u0310\u0311\u0003",
    "\u0002\u0002\u0002\u0311\u0313\u0003\u0002\u0002\u0002\u0312\u02e6\u0003",
    "\u0002\u0002\u0002\u0312\u0302\u0003\u0002\u0002\u0002\u0313K\u0003",
    "\u0002\u0002\u0002\u0314\u031c\u0007\f\u0002\u0002\u0315\u0317\u0005",
    "\u0004\u0003\u0002\u0316\u0315\u0003\u0002\u0002\u0002\u0317\u031a\u0003",
    "\u0002\u0002\u0002\u0318\u0316\u0003\u0002\u0002\u0002\u0318\u0319\u0003",
    "\u0002\u0002\u0002\u0319\u031b\u0003\u0002\u0002\u0002\u031a\u0318\u0003",
    "\u0002\u0002\u0002\u031b\u031d\u00050\u0019\u0002\u031c\u0318\u0003",
    "\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031dM\u0003",
    "\u0002\u0002\u0002\u031e\u0322\u0007\r\u0002\u0002\u031f\u0321\u0005",
    "\u0004\u0003\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0321\u0324\u0003",
    "\u0002\u0002\u0002\u0322\u0320\u0003\u0002\u0002\u0002\u0322\u0323\u0003",
    "\u0002\u0002\u0002\u0323\u0325\u0003\u0002\u0002\u0002\u0324\u0322\u0003",
    "\u0002\u0002\u0002\u0325\u032d\u0005\u0080A\u0002\u0326\u0328\u0005",
    "\u0004\u0003\u0002\u0327\u0326\u0003\u0002\u0002\u0002\u0328\u032b\u0003",
    "\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002\u0329\u032a\u0003",
    "\u0002\u0002\u0002\u032a\u032c\u0003\u0002\u0002\u0002\u032b\u0329\u0003",
    "\u0002\u0002\u0002\u032c\u032e\u00050\u0019\u0002\u032d\u0329\u0003",
    "\u0002\u0002\u0002\u032d\u032e\u0003\u0002\u0002\u0002\u032eO\u0003",
    "\u0002\u0002\u0002\u032f\u0333\u0007\u0013\u0002\u0002\u0330\u0332\u0005",
    "\u0004\u0003\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0332\u0335\u0003",
    "\u0002\u0002\u0002\u0333\u0331\u0003\u0002\u0002\u0002\u0333\u0334\u0003",
    "\u0002\u0002\u0002\u0334\u0336\u0003\u0002\u0002\u0002\u0335\u0333\u0003",
    "\u0002\u0002\u0002\u0336\u033a\u00056\u001c\u0002\u0337\u0339\u0005",
    "\u0004\u0003\u0002\u0338\u0337\u0003\u0002\u0002\u0002\u0339\u033c\u0003",
    "\u0002\u0002\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033a\u033b\u0003",
    "\u0002\u0002\u0002\u033b\u033d\u0003\u0002\u0002\u0002\u033c\u033a\u0003",
    "\u0002\u0002\u0002\u033d\u034f\u0005R*\u0002\u033e\u0340\u0005\u0004",
    "\u0003\u0002\u033f\u033e\u0003\u0002\u0002\u0002\u0340\u0343\u0003\u0002",
    "\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0341\u0342\u0003\u0002",
    "\u0002\u0002\u0342\u0344\u0003\u0002\u0002\u0002\u0343\u0341\u0003\u0002",
    "\u0002\u0002\u0344\u0348\u0007\u0014\u0002\u0002\u0345\u0347\u0005\u0004",
    "\u0003\u0002\u0346\u0345\u0003\u0002\u0002\u0002\u0347\u034a\u0003\u0002",
    "\u0002\u0002\u0348\u0346\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002",
    "\u0002\u0002\u0349\u034d\u0003\u0002\u0002\u0002\u034a\u0348\u0003\u0002",
    "\u0002\u0002\u034b\u034e\u0005P)\u0002\u034c\u034e\u0005R*\u0002\u034d",
    "\u034b\u0003\u0002\u0002\u0002\u034d\u034c\u0003\u0002\u0002\u0002\u034e",
    "\u0350\u0003\u0002\u0002\u0002\u034f\u0341\u0003\u0002\u0002\u0002\u034f",
    "\u0350\u0003\u0002\u0002\u0002\u0350Q\u0003\u0002\u0002\u0002\u0351",
    "\u0355\u0005 \u0011\u0002\u0352\u0355\u0005$\u0013\u0002\u0353\u0355",
    "\u0005\u0080A\u0002\u0354\u0351\u0003\u0002\u0002\u0002\u0354\u0352",
    "\u0003\u0002\u0002\u0002\u0354\u0353\u0003\u0002\u0002\u0002\u0355S",
    "\u0003\u0002\u0002\u0002\u0356\u0357\t\u0004\u0002\u0002\u0357U\u0003",
    "\u0002\u0002\u0002\u0358\u0376\u0007(\u0002\u0002\u0359\u0376\u0007",
    "\'\u0002\u0002\u035a\u0376\u0007\u001c\u0002\u0002\u035b\u0376\u0007",
    "&\u0002\u0002\u035c\u035e\u0007\u001d\u0002\u0002\u035d\u035c\u0003",
    "\u0002\u0002\u0002\u035e\u035f\u0003\u0002\u0002\u0002\u035f\u035d\u0003",
    "\u0002\u0002\u0002\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u0371\u0003",
    "\u0002\u0002\u0002\u0361\u0363\u0007!\u0002\u0002\u0362\u0361\u0003",
    "\u0002\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0362\u0003",
    "\u0002\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0369\u0003",
    "\u0002\u0002\u0002\u0366\u0368\u0007(\u0002\u0002\u0367\u0366\u0003",
    "\u0002\u0002\u0002\u0368\u036b\u0003\u0002\u0002\u0002\u0369\u0367\u0003",
    "\u0002\u0002\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u0372\u0003",
    "\u0002\u0002\u0002\u036b\u0369\u0003\u0002\u0002\u0002\u036c\u036e\u0007",
    "(\u0002\u0002\u036d\u036c\u0003\u0002\u0002\u0002\u036e\u036f\u0003",
    "\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002\u0002\u036f\u0370\u0003",
    "\u0002\u0002\u0002\u0370\u0372\u0003\u0002\u0002\u0002\u0371\u0362\u0003",
    "\u0002\u0002\u0002\u0371\u036d\u0003\u0002\u0002\u0002\u0371\u0372\u0003",
    "\u0002\u0002\u0002\u0372\u0376\u0003\u0002\u0002\u0002\u0373\u0376\u0007",
    "\"\u0002\u0002\u0374\u0376\u0007%\u0002\u0002\u0375\u0358\u0003\u0002",
    "\u0002\u0002\u0375\u0359\u0003\u0002\u0002\u0002\u0375\u035a\u0003\u0002",
    "\u0002\u0002\u0375\u035b\u0003\u0002\u0002\u0002\u0375\u035d\u0003\u0002",
    "\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0375\u0374\u0003\u0002",
    "\u0002\u0002\u0376W\u0003\u0002\u0002\u0002\u0377\u0378\t\u0005\u0002",
    "\u0002\u0378\u0381\u0007*\u0002\u0002\u0379\u037a\u0005Z.\u0002\u037a",
    "\u037b\u0007*\u0002\u0002\u037b\u037c\u0005\\/\u0002\u037c\u0382\u0003",
    "\u0002\u0002\u0002\u037d\u037e\u0005\\/\u0002\u037e\u037f\u0007*\u0002",
    "\u0002\u037f\u0380\u0005Z.\u0002\u0380\u0382\u0003\u0002\u0002\u0002",
    "\u0381\u0379\u0003\u0002\u0002\u0002\u0381\u037d\u0003\u0002\u0002\u0002",
    "\u0382Y\u0003\u0002\u0002\u0002\u0383\u0384\u0005\u0080A\u0002\u0384",
    "\u0385\u0007*\u0002\u0002\u0385\u0386\u0007\u000e\u0002\u0002\u0386",
    "\u0387\u0007*\u0002\u0002\u0387\u0388\u0005V,\u0002\u0388[\u0003\u0002",
    "\u0002\u0002\u0389\u038a\u0007\u0012\u0002\u0002\u038a\u038b\u0007*",
    "\u0002\u0002\u038b\u038c\u0007.\u0002\u0002\u038c]\u0003\u0002\u0002",
    "\u0002\u038d\u038e\u0007\u0007\u0002\u0002\u038e\u038f\u0005\u0004\u0003",
    "\u0002\u038f\u0393\u0007/\u0002\u0002\u0390\u0392\u0005\u0004\u0003",
    "\u0002\u0391\u0390\u0003\u0002\u0002\u0002\u0392\u0395\u0003\u0002\u0002",
    "\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002",
    "\u0002\u0394\u0396\u0003\u0002\u0002\u0002\u0395\u0393\u0003\u0002\u0002",
    "\u0002\u0396\u0398\u0007\'\u0002\u0002\u0397\u0399\t\u0002\u0002\u0002",
    "\u0398\u0397\u0003\u0002\u0002\u0002\u0398\u0399\u0003\u0002\u0002\u0002",
    "\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0005\u0080A\u0002",
    "\u039b_\u0003\u0002\u0002\u0002\u039c\u039e\u0007\b\u0002\u0002\u039d",
    "\u039f\u0005\u0004\u0003\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039f",
    "\u03a0\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a0",
    "\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2",
    "\u03a4\u0005b2\u0002\u03a3\u03a5\u0005\u0004\u0003\u0002\u03a4\u03a3",
    "\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03a4",
    "\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03ab",
    "\u0003\u0002\u0002\u0002\u03a8\u03ac\u0005 \u0011\u0002\u03a9\u03ac",
    "\u0005\u0080A\u0002\u03aa\u03ac\u0005$\u0013\u0002\u03ab\u03a8\u0003",
    "\u0002\u0002\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ab\u03aa\u0003",
    "\u0002\u0002\u0002\u03aca\u0003\u0002\u0002\u0002\u03ad\u03b0\u0005",
    "\u0080A\u0002\u03ae\u03b0\u0005J&\u0002\u03af\u03ad\u0003\u0002\u0002",
    "\u0002\u03af\u03ae\u0003\u0002\u0002\u0002\u03b0c\u0003\u0002\u0002",
    "\u0002\u03b1\u03b5\u0007\u0016\u0002\u0002\u03b2\u03b4\u0007*\u0002",
    "\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003\u0002\u0002",
    "\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002",
    "\u0002\u03b6\u03b8\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002",
    "\u0002\u03b8\u03bc\u0007/\u0002\u0002\u03b9\u03bb\u0007*\u0002\u0002",
    "\u03ba\u03b9\u0003\u0002\u0002\u0002\u03bb\u03be\u0003\u0002\u0002\u0002",
    "\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002\u0002",
    "\u03bd\u03da\u0003\u0002\u0002\u0002\u03be\u03bc\u0003\u0002\u0002\u0002",
    "\u03bf\u03c3\u0007\u0018\u0002\u0002\u03c0\u03c2\u0005\u0004\u0003\u0002",
    "\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c5\u0003\u0002\u0002\u0002",
    "\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002",
    "\u03c4\u03ce\u0003\u0002\u0002\u0002\u03c5\u03c3\u0003\u0002\u0002\u0002",
    "\u03c6\u03c8\u0005f4\u0002\u03c7\u03c9\u0005\u0004\u0003\u0002\u03c8",
    "\u03c7\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca",
    "\u03c8\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb",
    "\u03cd\u0003\u0002\u0002\u0002\u03cc\u03c6\u0003\u0002\u0002\u0002\u03cd",
    "\u03d0\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce",
    "\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d1\u0003\u0002\u0002\u0002\u03d0",
    "\u03ce\u0003\u0002\u0002\u0002\u03d1\u03db\u0007\u0019\u0002\u0002\u03d2",
    "\u03d6\u0007!\u0002\u0002\u03d3\u03d5\u0005\u0004\u0003\u0002\u03d4",
    "\u03d3\u0003\u0002\u0002\u0002\u03d5\u03d8\u0003\u0002\u0002\u0002\u03d6",
    "\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7",
    "\u03d9\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d9",
    "\u03db\u0005\u0080A\u0002\u03da\u03bf\u0003\u0002\u0002\u0002\u03da",
    "\u03d2\u0003\u0002\u0002\u0002\u03dbe\u0003\u0002\u0002\u0002\u03dc",
    "\u03e0\u0005h5\u0002\u03dd\u03e0\u0005l7\u0002\u03de\u03e0\u0005r:\u0002",
    "\u03df\u03dc\u0003\u0002\u0002\u0002\u03df\u03dd\u0003\u0002\u0002\u0002",
    "\u03df\u03de\u0003\u0002\u0002\u0002\u03e0g\u0003\u0002\u0002\u0002",
    "\u03e1\u03e5\t\u0006\u0002\u0002\u03e2\u03e4\u0007*\u0002\u0002\u03e3",
    "\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e7\u0003\u0002\u0002\u0002\u03e5",
    "\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6",
    "\u03e8\u0003\u0002\u0002\u0002\u03e7\u03e5\u0003\u0002\u0002\u0002\u03e8",
    "\u03e9\u0005j6\u0002\u03e9i\u0003\u0002\u0002\u0002\u03ea\u03ee\u0007",
    "\u001a\u0002\u0002\u03eb\u03ed\u0005\u0004\u0003\u0002\u03ec\u03eb\u0003",
    "\u0002\u0002\u0002\u03ed\u03f0\u0003\u0002\u0002\u0002\u03ee\u03ec\u0003",
    "\u0002\u0002\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef\u03f1\u0003",
    "\u0002\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f1\u03f5\u0005",
    "\u0080A\u0002\u03f2\u03f4\u0005\u0004\u0003\u0002\u03f3\u03f2\u0003",
    "\u0002\u0002\u0002\u03f4\u03f7\u0003\u0002\u0002\u0002\u03f5\u03f3\u0003",
    "\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u0408\u0003",
    "\u0002\u0002\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8\u03fc\u0007",
    "\u0017\u0002\u0002\u03f9\u03fb\u0005\u0004\u0003\u0002\u03fa\u03f9\u0003",
    "\u0002\u0002\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003",
    "\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03ff\u0003",
    "\u0002\u0002\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0403\u0005",
    "\u0080A\u0002\u0400\u0402\u0005\u0004\u0003\u0002\u0401\u0400\u0003",
    "\u0002\u0002\u0002\u0402\u0405\u0003\u0002\u0002\u0002\u0403\u0401\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0407\u0003",
    "\u0002\u0002\u0002\u0405\u0403\u0003\u0002\u0002\u0002\u0406\u03f8\u0003",
    "\u0002\u0002\u0002\u0407\u040a\u0003\u0002\u0002\u0002\u0408\u0406\u0003",
    "\u0002\u0002\u0002\u0408\u0409\u0003\u0002\u0002\u0002\u0409\u040b\u0003",
    "\u0002\u0002\u0002\u040a\u0408\u0003\u0002\u0002\u0002\u040b\u040d\u0007",
    "\u001b\u0002\u0002\u040c\u040e\t\u0002\u0002\u0002\u040d\u040c\u0003",
    "\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002\u0002\u040e\u040f\u0003",
    "\u0002\u0002\u0002\u040f\u0413\u0007\'\u0002\u0002\u0410\u0412\u0005",
    "\u0004\u0003\u0002\u0411\u0410\u0003\u0002\u0002\u0002\u0412\u0415\u0003",
    "\u0002\u0002\u0002\u0413\u0411\u0003\u0002\u0002\u0002\u0413\u0414\u0003",
    "\u0002\u0002\u0002\u0414\u0416\u0003\u0002\u0002\u0002\u0415\u0413\u0003",
    "\u0002\u0002\u0002\u0416\u0417\u0005\u0080A\u0002\u0417k\u0003\u0002",
    "\u0002\u0002\u0418\u041c\u0005n8\u0002\u0419\u041b\u0005\u0004\u0003",
    "\u0002\u041a\u0419\u0003\u0002\u0002\u0002\u041b\u041e\u0003\u0002\u0002",
    "\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002\u0002",
    "\u0002\u041d\u0420\u0003\u0002\u0002\u0002\u041e\u041c\u0003\u0002\u0002",
    "\u0002\u041f\u0418\u0003\u0002\u0002\u0002\u041f\u0420\u0003\u0002\u0002",
    "\u0002\u0420\u0421\u0003\u0002\u0002\u0002\u0421\u0425\u0005V,\u0002",
    "\u0422\u0424\u0005\u0004\u0003\u0002\u0423\u0422\u0003\u0002\u0002\u0002",
    "\u0424\u0427\u0003\u0002\u0002\u0002\u0425\u0423\u0003\u0002\u0002\u0002",
    "\u0425\u0426\u0003\u0002\u0002\u0002\u0426\u0428\u0003\u0002\u0002\u0002",
    "\u0427\u0425\u0003\u0002\u0002\u0002\u0428\u042c\u0005p9\u0002\u0429",
    "\u042b\u0005\u0004\u0003\u0002\u042a\u0429\u0003\u0002\u0002\u0002\u042b",
    "\u042e\u0003\u0002\u0002\u0002\u042c\u042a\u0003\u0002\u0002\u0002\u042c",
    "\u042d\u0003\u0002\u0002\u0002\u042d\u042f\u0003\u0002\u0002\u0002\u042e",
    "\u042c\u0003\u0002\u0002\u0002\u042f\u0433\u0007\'\u0002\u0002\u0430",
    "\u0432\u0005\u0004\u0003\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0432",
    "\u0435\u0003\u0002\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0433",
    "\u0434\u0003\u0002\u0002\u0002\u0434\u0436\u0003\u0002\u0002\u0002\u0435",
    "\u0433\u0003\u0002\u0002\u0002\u0436\u0437\u0005\u0080A\u0002\u0437",
    "m\u0003\u0002\u0002\u0002\u0438\u0439\u0005\u0080A\u0002\u0439o\u0003",
    "\u0002\u0002\u0002\u043a\u043b\u0005\u0080A\u0002\u043bq\u0003\u0002",
    "\u0002\u0002\u043c\u0440\u0007/\u0002\u0002\u043d\u043f\u0007*\u0002",
    "\u0002\u043e\u043d\u0003\u0002\u0002\u0002\u043f\u0442\u0003\u0002\u0002",
    "\u0002\u0440\u043e\u0003\u0002\u0002\u0002\u0440\u0441\u0003\u0002\u0002",
    "\u0002\u0441\u0443\u0003\u0002\u0002\u0002\u0442\u0440\u0003\u0002\u0002",
    "\u0002\u0443\u0447\u0007\'\u0002\u0002\u0444\u0446\u0007*\u0002\u0002",
    "\u0445\u0444\u0003\u0002\u0002\u0002\u0446\u0449\u0003\u0002\u0002\u0002",
    "\u0447\u0445\u0003\u0002\u0002\u0002\u0447\u0448\u0003\u0002\u0002\u0002",
    "\u0448\u044a\u0003\u0002\u0002\u0002\u0449\u0447\u0003\u0002\u0002\u0002",
    "\u044a\u044b\u0005\u0080A\u0002\u044bs\u0003\u0002\u0002\u0002\u044c",
    "\u045d\u0005\u0014\u000b\u0002\u044d\u044f\u0005\u0004\u0003\u0002\u044e",
    "\u044d\u0003\u0002\u0002\u0002\u044f\u0452\u0003\u0002\u0002\u0002\u0450",
    "\u044e\u0003\u0002\u0002\u0002\u0450\u0451\u0003\u0002\u0002\u0002\u0451",
    "\u0453\u0003\u0002\u0002\u0002\u0452\u0450\u0003\u0002\u0002\u0002\u0453",
    "\u0457\u0007&\u0002\u0002\u0454\u0456\u0005\u0004\u0003\u0002\u0455",
    "\u0454\u0003\u0002\u0002\u0002\u0456\u0459\u0003\u0002\u0002\u0002\u0457",
    "\u0455\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002\u0002\u0002\u0458",
    "\u045a\u0003\u0002\u0002\u0002\u0459\u0457\u0003\u0002\u0002\u0002\u045a",
    "\u045c\u0005\u0014\u000b\u0002\u045b\u0450\u0003\u0002\u0002\u0002\u045c",
    "\u045f\u0003\u0002\u0002\u0002\u045d\u045b\u0003\u0002\u0002\u0002\u045d",
    "\u045e\u0003\u0002\u0002\u0002\u045eu\u0003\u0002\u0002\u0002\u045f",
    "\u045d\u0003\u0002\u0002\u0002\u0460\u0462\u0007/\u0002\u0002\u0461",
    "\u0463\t\u0002\u0002\u0002\u0462\u0461\u0003\u0002\u0002\u0002\u0462",
    "\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002\u0464",
    "\u0466\u0007\'\u0002\u0002\u0465\u0467\t\u0002\u0002\u0002\u0466\u0465",
    "\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u0468",
    "\u0003\u0002\u0002\u0002\u0468\u0475\u0005t;\u0002\u0469\u046a\u0007",
    "\u0017\u0002\u0002\u046a\u046c\u0007/\u0002\u0002\u046b\u046d\t\u0002",
    "\u0002\u0002\u046c\u046b\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002",
    "\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u0470\u0007\'",
    "\u0002\u0002\u046f\u0471\t\u0002\u0002\u0002\u0470\u046f\u0003\u0002",
    "\u0002\u0002\u0470\u0471\u0003\u0002\u0002\u0002\u0471\u0472\u0003\u0002",
    "\u0002\u0002\u0472\u0474\u0005t;\u0002\u0473\u0469\u0003\u0002\u0002",
    "\u0002\u0474\u0477\u0003\u0002\u0002\u0002\u0475\u0473\u0003\u0002\u0002",
    "\u0002\u0475\u0476\u0003\u0002\u0002\u0002\u0476w\u0003\u0002\u0002",
    "\u0002\u0477\u0475\u0003\u0002\u0002\u0002\u0478\u047a\u0007\t\u0002",
    "\u0002\u0479\u047b\t\u0002\u0002\u0002\u047a\u0479\u0003\u0002\u0002",
    "\u0002\u047b\u047c\u0003\u0002\u0002\u0002\u047c\u047a\u0003\u0002\u0002",
    "\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u0485\u0003\u0002\u0002",
    "\u0002\u047e\u0486\u0005\u0080A\u0002\u047f\u0486\u0005\u0012\n\u0002",
    "\u0480\u0486\u0005*\u0016\u0002\u0481\u0486\u0005 \u0011\u0002\u0482",
    "\u0486\u0005X-\u0002\u0483\u0486\u0005^0\u0002\u0484\u0486\u0005d3\u0002",
    "\u0485\u047e\u0003\u0002\u0002\u0002\u0485\u047f\u0003\u0002\u0002\u0002",
    "\u0485\u0480\u0003\u0002\u0002\u0002\u0485\u0481\u0003\u0002\u0002\u0002",
    "\u0485\u0482\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002\u0002\u0002",
    "\u0485\u0484\u0003\u0002\u0002\u0002\u0486y\u0003\u0002\u0002\u0002",
    "\u0487\u048c\u0005|?\u0002\u0488\u0489\u0007\u0017\u0002\u0002\u0489",
    "\u048b\u0005|?\u0002\u048a\u0488\u0003\u0002\u0002\u0002\u048b\u048e",
    "\u0003\u0002\u0002\u0002\u048c\u048a\u0003\u0002\u0002\u0002\u048c\u048d",
    "\u0003\u0002\u0002\u0002\u048d{\u0003\u0002\u0002\u0002\u048e\u048c",
    "\u0003\u0002\u0002\u0002\u048f\u0494\u0005~@\u0002\u0490\u0491\u0007",
    "*\u0002\u0002\u0491\u0492\u0007\u000e\u0002\u0002\u0492\u0493\u0007",
    "*\u0002\u0002\u0493\u0495\u0005~@\u0002\u0494\u0490\u0003\u0002\u0002",
    "\u0002\u0494\u0495\u0003\u0002\u0002\u0002\u0495}\u0003\u0002\u0002",
    "\u0002\u0496\u0499\u0007/\u0002\u0002\u0497\u0499\u0005V,\u0002\u0498",
    "\u0496\u0003\u0002\u0002\u0002\u0498\u0497\u0003\u0002\u0002\u0002\u0499",
    "\u007f\u0003\u0002\u0002\u0002\u049a\u049c\u0005\u0082B\u0002\u049b",
    "\u049a\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d",
    "\u049b\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e",
    "\u0081\u0003\u0002\u0002\u0002\u049f\u04a3\u0007/\u0002\u0002\u04a0",
    "\u04a3\u0007 \u0002\u0002\u04a1\u04a3\u0005\u0084C\u0002\u04a2\u049f",
    "\u0003\u0002\u0002\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002\u04a2\u04a1",
    "\u0003\u0002\u0002\u0002\u04a3\u0083\u0003\u0002\u0002\u0002\u04a4\u04a8",
    "\u0007\u001e\u0002\u0002\u04a5\u04a7\u0007*\u0002\u0002\u04a6\u04a5",
    "\u0003\u0002\u0002\u0002\u04a7\u04aa\u0003\u0002\u0002\u0002\u04a8\u04a6",
    "\u0003\u0002\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04ab",
    "\u0003\u0002\u0002\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04ab\u04af",
    "\u00050\u0019\u0002\u04ac\u04ae\u0007*\u0002\u0002\u04ad\u04ac\u0003",
    "\u0002\u0002\u0002\u04ae\u04b1\u0003\u0002\u0002\u0002\u04af\u04ad\u0003",
    "\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04b2\u0003",
    "\u0002\u0002\u0002\u04b1\u04af\u0003\u0002\u0002\u0002\u04b2\u04b3\u0007",
    "\u001f\u0002\u0002\u04b3\u0085\u0003\u0002\u0002\u0002\u00b2\u0089\u008f",
    "\u009d\u009f\u00a1\u00a4\u00aa\u00b3\u00b9\u00c7\u00cc\u00d2\u00d8\u00da",
    "\u00e0\u00e6\u00ec\u00f0\u00f5\u00fc\u0100\u0106\u010a\u0112\u0119\u0120",
    "\u0127\u012c\u0135\u0139\u013f\u0145\u014b\u014e\u0154\u0158\u015e\u0165",
    "\u016b\u016e\u0172\u0178\u017c\u0180\u0186\u0189\u018b\u0194\u0198\u019e",
    "\u01a4\u01a9\u01b4\u01b9\u01bd\u01c3\u01ca\u01cf\u01d1\u01d6\u01df\u01e6",
    "\u01eb\u01ed\u01f2\u01fb\u01ff\u0204\u020b\u0210\u0212\u0216\u021f\u0223",
    "\u0229\u022e\u0234\u023b\u0244\u024c\u0252\u0259\u025c\u0262\u0266\u026b",
    "\u0274\u027b\u0282\u0289\u028d\u0295\u029c\u02a3\u02aa\u02ae\u02b7\u02be",
    "\u02c6\u02ce\u02d4\u02d8\u02dd\u02e2\u02ea\u02f3\u02fa\u0302\u0309\u0310",
    "\u0312\u0318\u031c\u0322\u0329\u032d\u0333\u033a\u0341\u0348\u034d\u034f",
    "\u0354\u035f\u0364\u0369\u036f\u0371\u0375\u0381\u0393\u0398\u03a0\u03a6",
    "\u03ab\u03af\u03b5\u03bc\u03c3\u03ca\u03ce\u03d6\u03da\u03df\u03e5\u03ee",
    "\u03f5\u03fc\u0403\u0408\u040d\u0413\u041c\u041f\u0425\u042c\u0433\u0440",
    "\u0447\u0450\u0457\u045d\u0462\u0466\u046c\u0470\u0475\u047c\u0485\u048c",
    "\u0494\u0498\u049d\u04a2\u04a8\u04af"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'import'", "'from'", "'type'", "'fn'", "'event'", 
                     "'on'", "'export'", "'const'", "'let'", "'return'", 
                     "'emit'", "'as'", null, "'prefix'", "'infix'", "'precedence'", 
                     "'if'", "'else'", "'new'", "'interface'", null, "'{'", 
                     "'}'", "'('", "')'", "'<'", "'>'", "'['", "']'", "'.'", 
                     "'='", "'@'", "'./'", "'../'", "'/'", "'|'", "':'" ];

var symbolicNames = [ null, "IMPORT", "FROM", "TYPE", "FN", "EVENT", "ON", 
                      "EXPORT", "CONST", "LET", "RETURN", "EMIT", "AS", 
                      "BOOLCONSTANT", "PREFIX", "INFIX", "PRECEDENCE", "IF", 
                      "ELSE", "NEW", "INTERFACE", "SEP", "OPENBODY", "CLOSEBODY", 
                      "OPENARGS", "CLOSEARGS", "OPENGENERIC", "CLOSEGENERIC", 
                      "OPENARRAY", "CLOSEARRAY", "METHODSEP", "EQUALS", 
                      "GLOBAL", "CURDIR", "PARDIR", "DIRSEP", "OR", "TYPESEP", 
                      "GENERALOPERATORS", "NEWLINE", "WS", "SINGLELINECOMMENT", 
                      "MULTILINECOMMENT", "STRINGCONSTANT", "NUMBERCONSTANT", 
                      "VARNAME" ];

var ruleNames =  [ "module", "blank", "imports", "standardImport", "fromImport", 
                   "dependency", "localdependency", "globaldependency", 
                   "types", "othertype", "typename", "typegenerics", "fulltypename", 
                   "typebody", "typeline", "functions", "fullfunctionbody", 
                   "functionbody", "statements", "declarations", "constdeclaration", 
                   "letdeclaration", "assignments", "assignables", "basicassignables", 
                   "operatororassignable", "withoperators", "groups", "typeofn", 
                   "objectliterals", "arrayliteral", "typeliteral", "mapliteral", 
                   "mapline", "assignablelist", "fncall", "calls", "exits", 
                   "emits", "conditionals", "blocklikes", "constants", "operators", 
                   "operatormapping", "fntoop", "opprecedence", "events", 
                   "handlers", "eventref", "interfaces", "interfaceline", 
                   "functiontypeline", "functiontype", "operatortypeline", 
                   "leftarg", "rightarg", "propertytypeline", "argtype", 
                   "arglist", "exports", "varlist", "renameablevar", "varop", 
                   "varn", "varsegment", "arrayaccess" ];

function LnParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

LnParser.prototype = Object.create(antlr4.Parser.prototype);
LnParser.prototype.constructor = LnParser;

Object.defineProperty(LnParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

LnParser.EOF = antlr4.Token.EOF;
LnParser.IMPORT = 1;
LnParser.FROM = 2;
LnParser.TYPE = 3;
LnParser.FN = 4;
LnParser.EVENT = 5;
LnParser.ON = 6;
LnParser.EXPORT = 7;
LnParser.CONST = 8;
LnParser.LET = 9;
LnParser.RETURN = 10;
LnParser.EMIT = 11;
LnParser.AS = 12;
LnParser.BOOLCONSTANT = 13;
LnParser.PREFIX = 14;
LnParser.INFIX = 15;
LnParser.PRECEDENCE = 16;
LnParser.IF = 17;
LnParser.ELSE = 18;
LnParser.NEW = 19;
LnParser.INTERFACE = 20;
LnParser.SEP = 21;
LnParser.OPENBODY = 22;
LnParser.CLOSEBODY = 23;
LnParser.OPENARGS = 24;
LnParser.CLOSEARGS = 25;
LnParser.OPENGENERIC = 26;
LnParser.CLOSEGENERIC = 27;
LnParser.OPENARRAY = 28;
LnParser.CLOSEARRAY = 29;
LnParser.METHODSEP = 30;
LnParser.EQUALS = 31;
LnParser.GLOBAL = 32;
LnParser.CURDIR = 33;
LnParser.PARDIR = 34;
LnParser.DIRSEP = 35;
LnParser.OR = 36;
LnParser.TYPESEP = 37;
LnParser.GENERALOPERATORS = 38;
LnParser.NEWLINE = 39;
LnParser.WS = 40;
LnParser.SINGLELINECOMMENT = 41;
LnParser.MULTILINECOMMENT = 42;
LnParser.STRINGCONSTANT = 43;
LnParser.NUMBERCONSTANT = 44;
LnParser.VARNAME = 45;

LnParser.RULE_module = 0;
LnParser.RULE_blank = 1;
LnParser.RULE_imports = 2;
LnParser.RULE_standardImport = 3;
LnParser.RULE_fromImport = 4;
LnParser.RULE_dependency = 5;
LnParser.RULE_localdependency = 6;
LnParser.RULE_globaldependency = 7;
LnParser.RULE_types = 8;
LnParser.RULE_othertype = 9;
LnParser.RULE_typename = 10;
LnParser.RULE_typegenerics = 11;
LnParser.RULE_fulltypename = 12;
LnParser.RULE_typebody = 13;
LnParser.RULE_typeline = 14;
LnParser.RULE_functions = 15;
LnParser.RULE_fullfunctionbody = 16;
LnParser.RULE_functionbody = 17;
LnParser.RULE_statements = 18;
LnParser.RULE_declarations = 19;
LnParser.RULE_constdeclaration = 20;
LnParser.RULE_letdeclaration = 21;
LnParser.RULE_assignments = 22;
LnParser.RULE_assignables = 23;
LnParser.RULE_basicassignables = 24;
LnParser.RULE_operatororassignable = 25;
LnParser.RULE_withoperators = 26;
LnParser.RULE_groups = 27;
LnParser.RULE_typeofn = 28;
LnParser.RULE_objectliterals = 29;
LnParser.RULE_arrayliteral = 30;
LnParser.RULE_typeliteral = 31;
LnParser.RULE_mapliteral = 32;
LnParser.RULE_mapline = 33;
LnParser.RULE_assignablelist = 34;
LnParser.RULE_fncall = 35;
LnParser.RULE_calls = 36;
LnParser.RULE_exits = 37;
LnParser.RULE_emits = 38;
LnParser.RULE_conditionals = 39;
LnParser.RULE_blocklikes = 40;
LnParser.RULE_constants = 41;
LnParser.RULE_operators = 42;
LnParser.RULE_operatormapping = 43;
LnParser.RULE_fntoop = 44;
LnParser.RULE_opprecedence = 45;
LnParser.RULE_events = 46;
LnParser.RULE_handlers = 47;
LnParser.RULE_eventref = 48;
LnParser.RULE_interfaces = 49;
LnParser.RULE_interfaceline = 50;
LnParser.RULE_functiontypeline = 51;
LnParser.RULE_functiontype = 52;
LnParser.RULE_operatortypeline = 53;
LnParser.RULE_leftarg = 54;
LnParser.RULE_rightarg = 55;
LnParser.RULE_propertytypeline = 56;
LnParser.RULE_argtype = 57;
LnParser.RULE_arglist = 58;
LnParser.RULE_exports = 59;
LnParser.RULE_varlist = 60;
LnParser.RULE_renameablevar = 61;
LnParser.RULE_varop = 62;
LnParser.RULE_varn = 63;
LnParser.RULE_varsegment = 64;
LnParser.RULE_arrayaccess = 65;

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ModuleContext.prototype.imports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportsContext);
    } else {
        return this.getTypedRuleContext(ImportsContext,i);
    }
};

ModuleContext.prototype.types = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypesContext);
    } else {
        return this.getTypedRuleContext(TypesContext,i);
    }
};

ModuleContext.prototype.constdeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstdeclarationContext);
    } else {
        return this.getTypedRuleContext(ConstdeclarationContext,i);
    }
};

ModuleContext.prototype.functions = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionsContext);
    } else {
        return this.getTypedRuleContext(FunctionsContext,i);
    }
};

ModuleContext.prototype.operatormapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatormappingContext);
    } else {
        return this.getTypedRuleContext(OperatormappingContext,i);
    }
};

ModuleContext.prototype.events = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventsContext);
    } else {
        return this.getTypedRuleContext(EventsContext,i);
    }
};

ModuleContext.prototype.handlers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlersContext);
    } else {
        return this.getTypedRuleContext(HandlersContext,i);
    }
};

ModuleContext.prototype.interfaces = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfacesContext);
    } else {
        return this.getTypedRuleContext(InterfacesContext,i);
    }
};

ModuleContext.prototype.exports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExportsContext);
    } else {
        return this.getTypedRuleContext(ExportsContext,i);
    }
};

ModuleContext.prototype.EOF = function() {
    return this.getToken(LnParser.EOF, 0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitModule(this);
	}
};




LnParser.ModuleContext = ModuleContext;

LnParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, LnParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 162;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.IMPORT:
        case LnParser.FROM:
        case LnParser.TYPE:
        case LnParser.FN:
        case LnParser.EVENT:
        case LnParser.ON:
        case LnParser.EXPORT:
        case LnParser.CONST:
        case LnParser.PREFIX:
        case LnParser.INFIX:
        case LnParser.INTERFACE:
        case LnParser.NEWLINE:
        case LnParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 135;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 132;
                    this.blank(); 
                }
                this.state = 137;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            this.state = 141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.IMPORT || _la===LnParser.FROM) {
                this.state = 138;
                this.imports();
                this.state = 143;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 157; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 157;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case LnParser.TYPE:
                    this.state = 144;
                    this.types();
                    break;
                case LnParser.CONST:
                    this.state = 145;
                    this.constdeclaration();
                    break;
                case LnParser.FN:
                    this.state = 146;
                    this.functions();
                    break;
                case LnParser.PREFIX:
                case LnParser.INFIX:
                    this.state = 147;
                    this.operatormapping();
                    break;
                case LnParser.EVENT:
                    this.state = 148;
                    this.events();
                    break;
                case LnParser.ON:
                    this.state = 149;
                    this.handlers();
                    break;
                case LnParser.INTERFACE:
                    this.state = 150;
                    this.interfaces();
                    break;
                case LnParser.EXPORT:
                    this.state = 151;
                    this.exports();
                    break;
                case LnParser.NEWLINE:
                case LnParser.WS:
                    this.state = 153; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 152;
                    		this.blank();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 155; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,2, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 159; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.EVENT) | (1 << LnParser.ON) | (1 << LnParser.EXPORT) | (1 << LnParser.CONST) | (1 << LnParser.PREFIX) | (1 << LnParser.INFIX) | (1 << LnParser.INTERFACE))) !== 0) || _la===LnParser.NEWLINE || _la===LnParser.WS);
            break;
        case LnParser.EOF:
            this.enterOuterAlt(localctx, 2);
            this.state = 161;
            this.match(LnParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_blank;
    return this;
}

BlankContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankContext.prototype.constructor = BlankContext;

BlankContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

BlankContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

BlankContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBlank(this);
	}
};

BlankContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBlank(this);
	}
};




LnParser.BlankContext = BlankContext;

LnParser.prototype.blank = function() {

    var localctx = new BlankContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, LnParser.RULE_blank);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 164;
        _la = this._input.LA(1);
        if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_imports;
    return this;
}

ImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsContext.prototype.constructor = ImportsContext;

ImportsContext.prototype.standardImport = function() {
    return this.getTypedRuleContext(StandardImportContext,0);
};

ImportsContext.prototype.fromImport = function() {
    return this.getTypedRuleContext(FromImportContext,0);
};

ImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterImports(this);
	}
};

ImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitImports(this);
	}
};




LnParser.ImportsContext = ImportsContext;

LnParser.prototype.imports = function() {

    var localctx = new ImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, LnParser.RULE_imports);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.IMPORT:
            this.state = 166;
            this.standardImport();
            break;
        case LnParser.FROM:
            this.state = 167;
            this.fromImport();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StandardImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_standardImport;
    return this;
}

StandardImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandardImportContext.prototype.constructor = StandardImportContext;

StandardImportContext.prototype.IMPORT = function() {
    return this.getToken(LnParser.IMPORT, 0);
};

StandardImportContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


StandardImportContext.prototype.dependency = function() {
    return this.getTypedRuleContext(DependencyContext,0);
};

StandardImportContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

StandardImportContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

StandardImportContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

StandardImportContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

StandardImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterStandardImport(this);
	}
};

StandardImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitStandardImport(this);
	}
};




LnParser.StandardImportContext = StandardImportContext;

LnParser.prototype.standardImport = function() {

    var localctx = new StandardImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, LnParser.RULE_standardImport);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 170;
        this.match(LnParser.IMPORT);
        this.state = 171;
        this.match(LnParser.WS);
        this.state = 172;
        this.dependency();
        this.state = 177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.WS) {
            this.state = 173;
            this.match(LnParser.WS);
            this.state = 174;
            this.match(LnParser.AS);
            this.state = 175;
            this.match(LnParser.WS);
            this.state = 176;
            this.match(LnParser.VARNAME);
        }

        this.state = 179;
        this.match(LnParser.NEWLINE);
        this.state = 183;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 180;
                this.blank(); 
            }
            this.state = 185;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromImportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fromImport;
    return this;
}

FromImportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromImportContext.prototype.constructor = FromImportContext;

FromImportContext.prototype.FROM = function() {
    return this.getToken(LnParser.FROM, 0);
};

FromImportContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FromImportContext.prototype.dependency = function() {
    return this.getTypedRuleContext(DependencyContext,0);
};

FromImportContext.prototype.IMPORT = function() {
    return this.getToken(LnParser.IMPORT, 0);
};

FromImportContext.prototype.varlist = function() {
    return this.getTypedRuleContext(VarlistContext,0);
};

FromImportContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

FromImportContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FromImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFromImport(this);
	}
};

FromImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFromImport(this);
	}
};




LnParser.FromImportContext = FromImportContext;

LnParser.prototype.fromImport = function() {

    var localctx = new FromImportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, LnParser.RULE_fromImport);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 186;
        this.match(LnParser.FROM);
        this.state = 187;
        this.match(LnParser.WS);
        this.state = 188;
        this.dependency();
        this.state = 189;
        this.match(LnParser.WS);
        this.state = 190;
        this.match(LnParser.IMPORT);
        this.state = 191;
        this.match(LnParser.WS);
        this.state = 192;
        this.varlist();
        this.state = 193;
        this.match(LnParser.NEWLINE);
        this.state = 197;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 194;
                this.blank(); 
            }
            this.state = 199;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_dependency;
    return this;
}

DependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DependencyContext.prototype.constructor = DependencyContext;

DependencyContext.prototype.localdependency = function() {
    return this.getTypedRuleContext(LocaldependencyContext,0);
};

DependencyContext.prototype.globaldependency = function() {
    return this.getTypedRuleContext(GlobaldependencyContext,0);
};

DependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterDependency(this);
	}
};

DependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitDependency(this);
	}
};




LnParser.DependencyContext = DependencyContext;

LnParser.prototype.dependency = function() {

    var localctx = new DependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, LnParser.RULE_dependency);
    try {
        this.state = 202;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CURDIR:
        case LnParser.PARDIR:
            this.enterOuterAlt(localctx, 1);
            this.state = 200;
            this.localdependency();
            break;
        case LnParser.GLOBAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 201;
            this.globaldependency();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocaldependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_localdependency;
    return this;
}

LocaldependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocaldependencyContext.prototype.constructor = LocaldependencyContext;

LocaldependencyContext.prototype.CURDIR = function() {
    return this.getToken(LnParser.CURDIR, 0);
};

LocaldependencyContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


LocaldependencyContext.prototype.DIRSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.DIRSEP);
    } else {
        return this.getToken(LnParser.DIRSEP, i);
    }
};


LocaldependencyContext.prototype.PARDIR = function() {
    return this.getToken(LnParser.PARDIR, 0);
};

LocaldependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLocaldependency(this);
	}
};

LocaldependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLocaldependency(this);
	}
};




LnParser.LocaldependencyContext = LocaldependencyContext;

LnParser.prototype.localdependency = function() {

    var localctx = new LocaldependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, LnParser.RULE_localdependency);
    var _la = 0; // Token type
    try {
        this.state = 216;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CURDIR:
            this.enterOuterAlt(localctx, 1);
            this.state = 204;
            this.match(LnParser.CURDIR);
            this.state = 206; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 205;
                _la = this._input.LA(1);
                if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 208; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
            break;
        case LnParser.PARDIR:
            this.enterOuterAlt(localctx, 2);
            this.state = 210;
            this.match(LnParser.PARDIR);
            this.state = 212; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 211;
                _la = this._input.LA(1);
                if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 214; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobaldependencyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_globaldependency;
    return this;
}

GlobaldependencyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobaldependencyContext.prototype.constructor = GlobaldependencyContext;

GlobaldependencyContext.prototype.GLOBAL = function() {
    return this.getToken(LnParser.GLOBAL, 0);
};

GlobaldependencyContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


GlobaldependencyContext.prototype.DIRSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.DIRSEP);
    } else {
        return this.getToken(LnParser.DIRSEP, i);
    }
};


GlobaldependencyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterGlobaldependency(this);
	}
};

GlobaldependencyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitGlobaldependency(this);
	}
};




LnParser.GlobaldependencyContext = GlobaldependencyContext;

LnParser.prototype.globaldependency = function() {

    var localctx = new GlobaldependencyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, LnParser.RULE_globaldependency);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.match(LnParser.GLOBAL);
        this.state = 220; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 219;
            _la = this._input.LA(1);
            if(!(_la===LnParser.DIRSEP || _la===LnParser.VARNAME)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 222; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.DIRSEP || _la===LnParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPE = function() {
    return this.getToken(LnParser.TYPE, 0);
};

TypesContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypesContext.prototype.typebody = function() {
    return this.getTypedRuleContext(TypebodyContext,0);
};

TypesContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

TypesContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

TypesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypesContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypes(this);
	}
};




LnParser.TypesContext = TypesContext;

LnParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, LnParser.RULE_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        this.match(LnParser.TYPE);
        this.state = 226; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 225;
            this.blank();
            this.state = 228; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 230;
        this.typename();
        this.state = 234;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 231;
                this.blank(); 
            }
            this.state = 236;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

        this.state = 238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 237;
            this.typegenerics();
        }

        this.state = 241; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 240;
            this.blank();
            this.state = 243; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 254;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.state = 245;
            this.typebody();
            break;
        case LnParser.EQUALS:
            this.state = 246;
            this.match(LnParser.EQUALS);
            this.state = 250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 247;
                this.blank();
                this.state = 252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 253;
            this.othertype();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OthertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_othertype;
    return this;
}

OthertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OthertypeContext.prototype.constructor = OthertypeContext;

OthertypeContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

OthertypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OthertypeContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

OthertypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOthertype(this);
	}
};

OthertypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOthertype(this);
	}
};




LnParser.OthertypeContext = OthertypeContext;

LnParser.prototype.othertype = function() {

    var localctx = new OthertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, LnParser.RULE_othertype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        this.typename();
        this.state = 260;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 257;
                this.blank(); 
            }
            this.state = 262;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 263;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

TypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypename(this);
	}
};

TypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypename(this);
	}
};




LnParser.TypenameContext = TypenameContext;

LnParser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, LnParser.RULE_typename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypegenericsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typegenerics;
    return this;
}

TypegenericsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypegenericsContext.prototype.constructor = TypegenericsContext;

TypegenericsContext.prototype.OPENGENERIC = function() {
    return this.getToken(LnParser.OPENGENERIC, 0);
};

TypegenericsContext.prototype.fulltypename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltypenameContext);
    } else {
        return this.getTypedRuleContext(FulltypenameContext,i);
    }
};

TypegenericsContext.prototype.CLOSEGENERIC = function() {
    return this.getToken(LnParser.CLOSEGENERIC, 0);
};

TypegenericsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypegenericsContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


TypegenericsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypegenerics(this);
	}
};

TypegenericsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypegenerics(this);
	}
};




LnParser.TypegenericsContext = TypegenericsContext;

LnParser.prototype.typegenerics = function() {

    var localctx = new TypegenericsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, LnParser.RULE_typegenerics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(LnParser.OPENGENERIC);
        this.state = 272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 269;
            this.blank();
            this.state = 274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 275;
        this.fulltypename();
        this.state = 279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 276;
            this.blank();
            this.state = 281;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 282;
            this.match(LnParser.SEP);
            this.state = 286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 283;
                this.blank();
                this.state = 288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 289;
            this.fulltypename();
            this.state = 293;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 290;
                this.blank();
                this.state = 295;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 301;
        this.match(LnParser.CLOSEGENERIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FulltypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fulltypename;
    return this;
}

FulltypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltypenameContext.prototype.constructor = FulltypenameContext;

FulltypenameContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

FulltypenameContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FulltypenameContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

FulltypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFulltypename(this);
	}
};

FulltypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFulltypename(this);
	}
};




LnParser.FulltypenameContext = FulltypenameContext;

LnParser.prototype.fulltypename = function() {

    var localctx = new FulltypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, LnParser.RULE_fulltypename);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.varn();
        this.state = 307;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 304;
                this.blank(); 
            }
            this.state = 309;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENGENERIC) {
            this.state = 310;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typebody;
    return this;
}

TypebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypebodyContext.prototype.constructor = TypebodyContext;

TypebodyContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

TypebodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

TypebodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypebodyContext.prototype.typeline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypelineContext);
    } else {
        return this.getTypedRuleContext(TypelineContext,i);
    }
};

TypebodyContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypebodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypebody(this);
	}
};

TypebodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypebody(this);
	}
};




LnParser.TypebodyContext = TypebodyContext;

LnParser.prototype.typebody = function() {

    var localctx = new TypebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, LnParser.RULE_typebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 313;
        this.match(LnParser.OPENBODY);
        this.state = 317;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 314;
                this.blank(); 
            }
            this.state = 319;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

        this.state = 327; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 323;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===LnParser.WS) {
        		    this.state = 320;
        		    this.match(LnParser.WS);
        		    this.state = 325;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 326;
        		this.typeline();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 329; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,32, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 332;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 331;
            this.blank();
        }

        this.state = 334;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeline;
    return this;
}

TypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypelineContext.prototype.constructor = TypelineContext;

TypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

TypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

TypelineContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

TypelineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


TypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeline(this);
	}
};

TypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeline(this);
	}
};




LnParser.TypelineContext = TypelineContext;

LnParser.prototype.typeline = function() {

    var localctx = new TypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, LnParser.RULE_typeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(LnParser.VARNAME);
        this.state = 338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 337;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 340;
        this.match(LnParser.TYPESEP);
        this.state = 342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 341;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 344;
        this.fulltypename();
        this.state = 348;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 345;
                this.match(LnParser.NEWLINE); 
            }
            this.state = 350;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FN = function() {
    return this.getToken(LnParser.FN, 0);
};

FunctionsContext.prototype.fullfunctionbody = function() {
    return this.getTypedRuleContext(FullfunctionbodyContext,0);
};

FunctionsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FunctionsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FunctionsContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

FunctionsContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

FunctionsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

FunctionsContext.prototype.argtype = function() {
    return this.getTypedRuleContext(ArgtypeContext,0);
};

FunctionsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FunctionsContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctions(this);
	}
};




LnParser.FunctionsContext = FunctionsContext;

LnParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, LnParser.RULE_functions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.match(LnParser.FN);
        this.state = 353; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 352;
            this.blank();
            this.state = 355; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 393;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.OPENARGS || _la===LnParser.VARNAME) {
            this.state = 364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.VARNAME) {
                this.state = 357;
                this.match(LnParser.VARNAME);
                this.state = 361;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 358;
                    this.blank();
                    this.state = 363;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 366;
            this.match(LnParser.OPENARGS);
            this.state = 368;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.VARNAME) {
                this.state = 367;
                this.arglist();
            }

            this.state = 370;
            this.match(LnParser.CLOSEARGS);
            this.state = 374;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 371;
                    this.blank(); 
                }
                this.state = 376;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
            }

            this.state = 391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (LnParser.TYPESEP - 37)) | (1 << (LnParser.NEWLINE - 37)) | (1 << (LnParser.WS - 37)))) !== 0)) {
                this.state = 378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 377;
                    _la = this._input.LA(1);
                    if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 380;
                this.match(LnParser.TYPESEP);
                this.state = 382;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 381;
                    _la = this._input.LA(1);
                    if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 384;
                this.argtype();
                this.state = 388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 385;
                    this.blank();
                    this.state = 390;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

        }

        this.state = 395;
        this.fullfunctionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FullfunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fullfunctionbody;
    return this;
}

FullfunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullfunctionbodyContext.prototype.constructor = FullfunctionbodyContext;

FullfunctionbodyContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FullfunctionbodyContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

FullfunctionbodyContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

FullfunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FullfunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFullfunctionbody(this);
	}
};

FullfunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFullfunctionbody(this);
	}
};




LnParser.FullfunctionbodyContext = FullfunctionbodyContext;

LnParser.prototype.fullfunctionbody = function() {

    var localctx = new FullfunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, LnParser.RULE_fullfunctionbody);
    var _la = 0; // Token type
    try {
        this.state = 406;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.enterOuterAlt(localctx, 1);
            this.state = 397;
            this.functionbody();
            break;
        case LnParser.EQUALS:
            this.enterOuterAlt(localctx, 2);
            this.state = 398;
            this.match(LnParser.EQUALS);
            this.state = 402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 399;
                this.blank();
                this.state = 404;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 405;
            this.assignables();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

FunctionbodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

FunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionbodyContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

FunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctionbody(this);
	}
};

FunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctionbody(this);
	}
};




LnParser.FunctionbodyContext = FunctionbodyContext;

LnParser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, LnParser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 408;
        this.match(LnParser.OPENBODY);
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 409;
            this.blank();
            this.state = 414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 416; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 415;
            this.statements();
            this.state = 418; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.CONST) | (1 << LnParser.LET) | (1 << LnParser.RETURN) | (1 << LnParser.EMIT) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.IF) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (LnParser.STRINGCONSTANT - 43)) | (1 << (LnParser.NUMBERCONSTANT - 43)) | (1 << (LnParser.VARNAME - 43)))) !== 0));
        this.state = 423;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 420;
            this.blank();
            this.state = 425;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 426;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

StatementsContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

StatementsContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

StatementsContext.prototype.exits = function() {
    return this.getTypedRuleContext(ExitsContext,0);
};

StatementsContext.prototype.emits = function() {
    return this.getTypedRuleContext(EmitsContext,0);
};

StatementsContext.prototype.conditionals = function() {
    return this.getTypedRuleContext(ConditionalsContext,0);
};

StatementsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitStatements(this);
	}
};




LnParser.StatementsContext = StatementsContext;

LnParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, LnParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.state = 428;
            this.declarations();
            break;

        case 2:
            this.state = 429;
            this.assignments();
            break;

        case 3:
            this.state = 430;
            this.calls();
            break;

        case 4:
            this.state = 431;
            this.exits();
            break;

        case 5:
            this.state = 432;
            this.emits();
            break;

        case 6:
            this.state = 433;
            this.conditionals();
            break;

        }
        this.state = 437; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 436;
        		this.blank();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 439; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,53, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

DeclarationsContext.prototype.letdeclaration = function() {
    return this.getTypedRuleContext(LetdeclarationContext,0);
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitDeclarations(this);
	}
};




LnParser.DeclarationsContext = DeclarationsContext;

LnParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, LnParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 443;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.CONST:
            this.state = 441;
            this.constdeclaration();
            break;
        case LnParser.LET:
            this.state = 442;
            this.letdeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_constdeclaration;
    return this;
}

ConstdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstdeclarationContext.prototype.constructor = ConstdeclarationContext;

ConstdeclarationContext.prototype.CONST = function() {
    return this.getToken(LnParser.CONST, 0);
};

ConstdeclarationContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

ConstdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConstdeclarationContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

ConstdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

ConstdeclarationContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

ConstdeclarationContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

ConstdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConstdeclaration(this);
	}
};

ConstdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConstdeclaration(this);
	}
};




LnParser.ConstdeclarationContext = ConstdeclarationContext;

LnParser.prototype.constdeclaration = function() {

    var localctx = new ConstdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, LnParser.RULE_constdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.match(LnParser.CONST);
        this.state = 449;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 446;
                this.blank(); 
            }
            this.state = 451;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
        }

        this.state = 463;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        if(la_===1) {
            this.state = 452;
            this.match(LnParser.VARNAME);
            this.state = 456;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 453;
                this.blank();
                this.state = 458;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 459;
            this.match(LnParser.TYPESEP);
            this.state = 461;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 460;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }

        }
        this.state = 468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 465;
            this.blank();
            this.state = 470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 471;
        this.assignments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_letdeclaration;
    return this;
}

LetdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetdeclarationContext.prototype.constructor = LetdeclarationContext;

LetdeclarationContext.prototype.LET = function() {
    return this.getToken(LnParser.LET, 0);
};

LetdeclarationContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

LetdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

LetdeclarationContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

LetdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

LetdeclarationContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

LetdeclarationContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

LetdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLetdeclaration(this);
	}
};

LetdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLetdeclaration(this);
	}
};




LnParser.LetdeclarationContext = LetdeclarationContext;

LnParser.prototype.letdeclaration = function() {

    var localctx = new LetdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, LnParser.RULE_letdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.match(LnParser.LET);
        this.state = 477;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 474;
                this.blank(); 
            }
            this.state = 479;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

        this.state = 491;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        if(la_===1) {
            this.state = 480;
            this.match(LnParser.VARNAME);
            this.state = 484;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 481;
                this.blank();
                this.state = 486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 487;
            this.match(LnParser.TYPESEP);
            this.state = 489;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            if(la_===1) {
                this.state = 488;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }

        }
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 493;
            this.blank();
            this.state = 498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 499;
        this.assignments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignments;
    return this;
}

AssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentsContext.prototype.constructor = AssignmentsContext;

AssignmentsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

AssignmentsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignmentsContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

AssignmentsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

AssignmentsContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

AssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignments(this);
	}
};

AssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignments(this);
	}
};




LnParser.AssignmentsContext = AssignmentsContext;

LnParser.prototype.assignments = function() {

    var localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, LnParser.RULE_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this.varn();
        this.state = 505;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 502;
                this.blank(); 
            }
            this.state = 507;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.OPENGENERIC) {
                this.state = 508;
                this.typegenerics();
            }

            this.state = 514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 511;
                this.blank();
                this.state = 516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 517;
            this.match(LnParser.EQUALS);
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 518;
                this.blank();
                this.state = 523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 524;
            this.assignables();
            break;

        case 2:
            this.state = 526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.OPENGENERIC) {
                this.state = 525;
                this.typegenerics();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignables;
    return this;
}

AssignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablesContext.prototype.constructor = AssignablesContext;

AssignablesContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

AssignablesContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

AssignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignables(this);
	}
};

AssignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignables(this);
	}
};




LnParser.AssignablesContext = AssignablesContext;

LnParser.prototype.assignables = function() {

    var localctx = new AssignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, LnParser.RULE_assignables);
    try {
        this.state = 532;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.basicassignables();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 531;
            this.withoperators();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BasicassignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_basicassignables;
    return this;
}

BasicassignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BasicassignablesContext.prototype.constructor = BasicassignablesContext;

BasicassignablesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

BasicassignablesContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

BasicassignablesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

BasicassignablesContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

BasicassignablesContext.prototype.groups = function() {
    return this.getTypedRuleContext(GroupsContext,0);
};

BasicassignablesContext.prototype.typeofn = function() {
    return this.getTypedRuleContext(TypeofnContext,0);
};

BasicassignablesContext.prototype.objectliterals = function() {
    return this.getTypedRuleContext(ObjectliteralsContext,0);
};

BasicassignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBasicassignables(this);
	}
};

BasicassignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBasicassignables(this);
	}
};




LnParser.BasicassignablesContext = BasicassignablesContext;

LnParser.prototype.basicassignables = function() {

    var localctx = new BasicassignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, LnParser.RULE_basicassignables);
    try {
        this.state = 541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 534;
            this.functions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 535;
            this.calls();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 536;
            this.varn();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 537;
            this.constants();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 538;
            this.groups();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 539;
            this.typeofn();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 540;
            this.objectliterals();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatororassignableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatororassignable;
    return this;
}

OperatororassignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatororassignableContext.prototype.constructor = OperatororassignableContext;

OperatororassignableContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatororassignableContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

OperatororassignableContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatororassignable(this);
	}
};

OperatororassignableContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatororassignable(this);
	}
};




LnParser.OperatororassignableContext = OperatororassignableContext;

LnParser.prototype.operatororassignable = function() {

    var localctx = new OperatororassignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, LnParser.RULE_operatororassignable);
    try {
        this.state = 545;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENGENERIC:
        case LnParser.CLOSEGENERIC:
        case LnParser.GLOBAL:
        case LnParser.DIRSEP:
        case LnParser.OR:
        case LnParser.TYPESEP:
        case LnParser.GENERALOPERATORS:
            this.enterOuterAlt(localctx, 1);
            this.state = 543;
            this.operators();
            break;
        case LnParser.TYPE:
        case LnParser.FN:
        case LnParser.BOOLCONSTANT:
        case LnParser.NEW:
        case LnParser.OPENARGS:
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.STRINGCONSTANT:
        case LnParser.NUMBERCONSTANT:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 2);
            this.state = 544;
            this.basicassignables();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithoperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_withoperators;
    return this;
}

WithoperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithoperatorsContext.prototype.constructor = WithoperatorsContext;

WithoperatorsContext.prototype.operatororassignable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatororassignableContext);
    } else {
        return this.getTypedRuleContext(OperatororassignableContext,i);
    }
};

WithoperatorsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


WithoperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterWithoperators(this);
	}
};

WithoperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitWithoperators(this);
	}
};




LnParser.WithoperatorsContext = WithoperatorsContext;

LnParser.prototype.withoperators = function() {

    var localctx = new WithoperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, LnParser.RULE_withoperators);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 547;
        		this.operatororassignable();
        		this.state = 551;
        		this._errHandler.sync(this);
        		var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
        		    if(_alt===1) {
        		        this.state = 548;
        		        this.match(LnParser.WS); 
        		    }
        		    this.state = 553;
        		    this._errHandler.sync(this);
        		    _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 556; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,75, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_groups;
    return this;
}

GroupsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupsContext.prototype.constructor = GroupsContext;

GroupsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

GroupsContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

GroupsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

GroupsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


GroupsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterGroups(this);
	}
};

GroupsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitGroups(this);
	}
};




LnParser.GroupsContext = GroupsContext;

LnParser.prototype.groups = function() {

    var localctx = new GroupsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, LnParser.RULE_groups);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 558;
        this.match(LnParser.OPENARGS);
        this.state = 562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 559;
            this.match(LnParser.WS);
            this.state = 564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 565;
        this.withoperators();
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 566;
            this.match(LnParser.WS);
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 572;
        this.match(LnParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeofnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeofn;
    return this;
}

TypeofnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeofnContext.prototype.constructor = TypeofnContext;

TypeofnContext.prototype.TYPE = function() {
    return this.getToken(LnParser.TYPE, 0);
};

TypeofnContext.prototype.basicassignables = function() {
    return this.getTypedRuleContext(BasicassignablesContext,0);
};

TypeofnContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypeofnContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeofn(this);
	}
};

TypeofnContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeofn(this);
	}
};




LnParser.TypeofnContext = TypeofnContext;

LnParser.prototype.typeofn = function() {

    var localctx = new TypeofnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, LnParser.RULE_typeofn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(LnParser.TYPE);
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 575;
            this.match(LnParser.WS);
            this.state = 580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 581;
        this.basicassignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectliteralsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_objectliterals;
    return this;
}

ObjectliteralsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectliteralsContext.prototype.constructor = ObjectliteralsContext;

ObjectliteralsContext.prototype.arrayliteral = function() {
    return this.getTypedRuleContext(ArrayliteralContext,0);
};

ObjectliteralsContext.prototype.typeliteral = function() {
    return this.getTypedRuleContext(TypeliteralContext,0);
};

ObjectliteralsContext.prototype.mapliteral = function() {
    return this.getTypedRuleContext(MapliteralContext,0);
};

ObjectliteralsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterObjectliterals(this);
	}
};

ObjectliteralsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitObjectliterals(this);
	}
};




LnParser.ObjectliteralsContext = ObjectliteralsContext;

LnParser.prototype.objectliterals = function() {

    var localctx = new ObjectliteralsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, LnParser.RULE_objectliterals);
    try {
        this.state = 586;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 583;
            this.arrayliteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 584;
            this.typeliteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 585;
            this.mapliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arrayliteral;
    return this;
}

ArrayliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayliteralContext.prototype.constructor = ArrayliteralContext;

ArrayliteralContext.prototype.OPENARRAY = function() {
    return this.getToken(LnParser.OPENARRAY, 0);
};

ArrayliteralContext.prototype.CLOSEARRAY = function() {
    return this.getToken(LnParser.CLOSEARRAY, 0);
};

ArrayliteralContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

ArrayliteralContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

ArrayliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArrayliteralContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

ArrayliteralContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArrayliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArrayliteral(this);
	}
};

ArrayliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArrayliteral(this);
	}
};




LnParser.ArrayliteralContext = ArrayliteralContext;

LnParser.prototype.arrayliteral = function() {

    var localctx = new ArrayliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, LnParser.RULE_arrayliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEW) {
            this.state = 588;
            this.match(LnParser.NEW);
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 589;
                this.match(LnParser.WS);
                this.state = 594;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 595;
            this.othertype();
            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 596;
                this.match(LnParser.WS);
                this.state = 601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 604;
        this.match(LnParser.OPENARRAY);
        this.state = 608;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 605;
                this.blank(); 
            }
            this.state = 610;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

        this.state = 612;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 611;
            this.assignablelist();

        }
        this.state = 617;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 614;
            this.blank();
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 620;
        this.match(LnParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_typeliteral;
    return this;
}

TypeliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeliteralContext.prototype.constructor = TypeliteralContext;

TypeliteralContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

TypeliteralContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

TypeliteralContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

TypeliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

TypeliteralContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


TypeliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypeliteralContext.prototype.assignments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentsContext);
    } else {
        return this.getTypedRuleContext(AssignmentsContext,i);
    }
};

TypeliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterTypeliteral(this);
	}
};

TypeliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitTypeliteral(this);
	}
};




LnParser.TypeliteralContext = TypeliteralContext;

LnParser.prototype.typeliteral = function() {

    var localctx = new TypeliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, LnParser.RULE_typeliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.match(LnParser.NEW);
        this.state = 626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 623;
            this.match(LnParser.WS);
            this.state = 628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 629;
        this.othertype();
        this.state = 633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 630;
            this.match(LnParser.WS);
            this.state = 635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 636;
        this.match(LnParser.OPENBODY);
        this.state = 640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 637;
            this.blank();
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 649; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 643;
            this.assignments();
            this.state = 645; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 644;
                this.blank();
                this.state = 647; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            this.state = 651; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 28)) & ~0x1f) == 0 && ((1 << (_la - 28)) & ((1 << (LnParser.OPENARRAY - 28)) | (1 << (LnParser.METHODSEP - 28)) | (1 << (LnParser.VARNAME - 28)))) !== 0));
        this.state = 653;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_mapliteral;
    return this;
}

MapliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapliteralContext.prototype.constructor = MapliteralContext;

MapliteralContext.prototype.NEW = function() {
    return this.getToken(LnParser.NEW, 0);
};

MapliteralContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

MapliteralContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

MapliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

MapliteralContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


MapliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

MapliteralContext.prototype.mapline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MaplineContext);
    } else {
        return this.getTypedRuleContext(MaplineContext,i);
    }
};

MapliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterMapliteral(this);
	}
};

MapliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitMapliteral(this);
	}
};




LnParser.MapliteralContext = MapliteralContext;

LnParser.prototype.mapliteral = function() {

    var localctx = new MapliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, LnParser.RULE_mapliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.match(LnParser.NEW);
        this.state = 659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 656;
            this.match(LnParser.WS);
            this.state = 661;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 662;
        this.othertype();
        this.state = 666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 663;
            this.match(LnParser.WS);
            this.state = 668;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 669;
        this.match(LnParser.OPENBODY);
        this.state = 673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 670;
            this.blank();
            this.state = 675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.NEW) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LnParser.GLOBAL - 32)) | (1 << (LnParser.DIRSEP - 32)) | (1 << (LnParser.OR - 32)) | (1 << (LnParser.TYPESEP - 32)) | (1 << (LnParser.GENERALOPERATORS - 32)) | (1 << (LnParser.STRINGCONSTANT - 32)) | (1 << (LnParser.NUMBERCONSTANT - 32)) | (1 << (LnParser.VARNAME - 32)))) !== 0)) {
            this.state = 676;
            this.mapline();
            this.state = 678; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 677;
                this.blank();
                this.state = 680; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
            this.state = 686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 687;
        this.match(LnParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaplineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_mapline;
    return this;
}

MaplineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaplineContext.prototype.constructor = MaplineContext;

MaplineContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

MaplineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

MaplineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


MaplineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterMapline(this);
	}
};

MaplineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitMapline(this);
	}
};




LnParser.MaplineContext = MaplineContext;

LnParser.prototype.mapline = function() {

    var localctx = new MaplineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, LnParser.RULE_mapline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this.assignables();
        this.state = 693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 690;
            this.match(LnParser.WS);
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 696;
        this.match(LnParser.TYPESEP);
        this.state = 700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 697;
            this.match(LnParser.WS);
            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 703;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_assignablelist;
    return this;
}

AssignablelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablelistContext.prototype.constructor = AssignablelistContext;

AssignablelistContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

AssignablelistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignablelistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


AssignablelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterAssignablelist(this);
	}
};

AssignablelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitAssignablelist(this);
	}
};




LnParser.AssignablelistContext = AssignablelistContext;

LnParser.prototype.assignablelist = function() {

    var localctx = new AssignablelistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, LnParser.RULE_assignablelist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 705;
            this.blank();
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 711;
        this.assignables();
        this.state = 722;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,100,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 712;
                this.match(LnParser.SEP);
                this.state = 716;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 713;
                    this.blank();
                    this.state = 718;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 719;
                this.assignables(); 
            }
            this.state = 724;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,100,this._ctx);
        }

        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.SEP) {
            this.state = 725;
            this.match(LnParser.SEP);
        }

        this.state = 731;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 728;
                this.blank(); 
            }
            this.state = 733;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FncallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fncall;
    return this;
}

FncallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FncallContext.prototype.constructor = FncallContext;

FncallContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FncallContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FncallContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

FncallContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFncall(this);
	}
};

FncallContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFncall(this);
	}
};




LnParser.FncallContext = FncallContext;

LnParser.prototype.fncall = function() {

    var localctx = new FncallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, LnParser.RULE_fncall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 734;
        this.match(LnParser.OPENARGS);
        this.state = 736;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.TYPE) | (1 << LnParser.FN) | (1 << LnParser.BOOLCONSTANT) | (1 << LnParser.NEW) | (1 << LnParser.OPENARGS) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LnParser.GLOBAL - 32)) | (1 << (LnParser.DIRSEP - 32)) | (1 << (LnParser.OR - 32)) | (1 << (LnParser.TYPESEP - 32)) | (1 << (LnParser.GENERALOPERATORS - 32)) | (1 << (LnParser.NEWLINE - 32)) | (1 << (LnParser.WS - 32)) | (1 << (LnParser.STRINGCONSTANT - 32)) | (1 << (LnParser.NUMBERCONSTANT - 32)) | (1 << (LnParser.VARNAME - 32)))) !== 0)) {
            this.state = 735;
            this.assignablelist();
        }

        this.state = 738;
        this.match(LnParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.varn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarnContext);
    } else {
        return this.getTypedRuleContext(VarnContext,i);
    }
};

CallsContext.prototype.fncall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FncallContext);
    } else {
        return this.getTypedRuleContext(FncallContext,i);
    }
};

CallsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


CallsContext.prototype.METHODSEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.METHODSEP);
    } else {
        return this.getToken(LnParser.METHODSEP, i);
    }
};


CallsContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

CallsContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

CallsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

CallsContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitCalls(this);
	}
};




LnParser.CallsContext = CallsContext;

LnParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, LnParser.RULE_calls);
    var _la = 0; // Token type
    try {
        this.state = 784;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 740;
            this.varn();
            this.state = 744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.WS) {
                this.state = 741;
                this.match(LnParser.WS);
                this.state = 746;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 747;
            this.fncall();
            this.state = 760;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 748;
                    this.match(LnParser.METHODSEP);
                    this.state = 749;
                    this.varn();
                    this.state = 753;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===LnParser.WS) {
                        this.state = 750;
                        this.match(LnParser.WS);
                        this.state = 755;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 756;
                    this.fncall(); 
                }
                this.state = 762;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
            }

            break;
        case LnParser.BOOLCONSTANT:
        case LnParser.OPENARGS:
        case LnParser.STRINGCONSTANT:
        case LnParser.NUMBERCONSTANT:
            this.enterOuterAlt(localctx, 2);
            this.state = 768;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LnParser.BOOLCONSTANT:
            case LnParser.STRINGCONSTANT:
            case LnParser.NUMBERCONSTANT:
                this.state = 763;
                this.constants();
                break;
            case LnParser.OPENARGS:
                this.state = 764;
                this.match(LnParser.OPENARGS);
                this.state = 765;
                this.assignables();
                this.state = 766;
                this.match(LnParser.CLOSEARGS);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 780; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 770;
            		this.match(LnParser.METHODSEP);
            		this.state = 771;
            		this.varn();
            		this.state = 775;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		while(_la===LnParser.WS) {
            		    this.state = 772;
            		    this.match(LnParser.WS);
            		    this.state = 777;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		}
            		this.state = 778;
            		this.fncall();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 782; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,109, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_exits;
    return this;
}

ExitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitsContext.prototype.constructor = ExitsContext;

ExitsContext.prototype.RETURN = function() {
    return this.getToken(LnParser.RETURN, 0);
};

ExitsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ExitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ExitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterExits(this);
	}
};

ExitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitExits(this);
	}
};




LnParser.ExitsContext = ExitsContext;

LnParser.prototype.exits = function() {

    var localctx = new ExitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, LnParser.RULE_exits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this.match(LnParser.RETURN);
        this.state = 794;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        if(la_===1) {
            this.state = 790;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 787;
                this.blank();
                this.state = 792;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 793;
            this.assignables();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_emits;
    return this;
}

EmitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitsContext.prototype.constructor = EmitsContext;

EmitsContext.prototype.EMIT = function() {
    return this.getToken(LnParser.EMIT, 0);
};

EmitsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EmitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EmitsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

EmitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEmits(this);
	}
};

EmitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEmits(this);
	}
};




LnParser.EmitsContext = EmitsContext;

LnParser.prototype.emits = function() {

    var localctx = new EmitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, LnParser.RULE_emits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 796;
        this.match(LnParser.EMIT);
        this.state = 800;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 797;
            this.blank();
            this.state = 802;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 803;
        this.varn();
        this.state = 811;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 804;
                this.blank();
                this.state = 809;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 810;
            this.assignables();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_conditionals;
    return this;
}

ConditionalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalsContext.prototype.constructor = ConditionalsContext;

ConditionalsContext.prototype.IF = function() {
    return this.getToken(LnParser.IF, 0);
};

ConditionalsContext.prototype.withoperators = function() {
    return this.getTypedRuleContext(WithoperatorsContext,0);
};

ConditionalsContext.prototype.blocklikes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlocklikesContext);
    } else {
        return this.getTypedRuleContext(BlocklikesContext,i);
    }
};

ConditionalsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConditionalsContext.prototype.ELSE = function() {
    return this.getToken(LnParser.ELSE, 0);
};

ConditionalsContext.prototype.conditionals = function() {
    return this.getTypedRuleContext(ConditionalsContext,0);
};

ConditionalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConditionals(this);
	}
};

ConditionalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConditionals(this);
	}
};




LnParser.ConditionalsContext = ConditionalsContext;

LnParser.prototype.conditionals = function() {

    var localctx = new ConditionalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, LnParser.RULE_conditionals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 813;
        this.match(LnParser.IF);
        this.state = 817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 814;
            this.blank();
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 820;
        this.withoperators();
        this.state = 824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 821;
            this.blank();
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 827;
        this.blocklikes();
        this.state = 845;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        if(la_===1) {
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 828;
                this.blank();
                this.state = 833;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 834;
            this.match(LnParser.ELSE);
            this.state = 838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 835;
                this.blank();
                this.state = 840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 843;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case LnParser.IF:
                this.state = 841;
                this.conditionals();
                break;
            case LnParser.FN:
            case LnParser.OPENBODY:
            case LnParser.OPENARRAY:
            case LnParser.METHODSEP:
            case LnParser.VARNAME:
                this.state = 842;
                this.blocklikes();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlocklikesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_blocklikes;
    return this;
}

BlocklikesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlocklikesContext.prototype.constructor = BlocklikesContext;

BlocklikesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

BlocklikesContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

BlocklikesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

BlocklikesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterBlocklikes(this);
	}
};

BlocklikesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitBlocklikes(this);
	}
};




LnParser.BlocklikesContext = BlocklikesContext;

LnParser.prototype.blocklikes = function() {

    var localctx = new BlocklikesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, LnParser.RULE_blocklikes);
    try {
        this.state = 850;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.FN:
            this.enterOuterAlt(localctx, 1);
            this.state = 847;
            this.functions();
            break;
        case LnParser.OPENBODY:
            this.enterOuterAlt(localctx, 2);
            this.state = 848;
            this.functionbody();
            break;
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 3);
            this.state = 849;
            this.varn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_constants;
    return this;
}

ConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantsContext.prototype.constructor = ConstantsContext;

ConstantsContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(LnParser.NUMBERCONSTANT, 0);
};

ConstantsContext.prototype.STRINGCONSTANT = function() {
    return this.getToken(LnParser.STRINGCONSTANT, 0);
};

ConstantsContext.prototype.BOOLCONSTANT = function() {
    return this.getToken(LnParser.BOOLCONSTANT, 0);
};

ConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterConstants(this);
	}
};

ConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitConstants(this);
	}
};




LnParser.ConstantsContext = ConstantsContext;

LnParser.prototype.constants = function() {

    var localctx = new ConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, LnParser.RULE_constants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 852;
        _la = this._input.LA(1);
        if(!(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (LnParser.BOOLCONSTANT - 13)) | (1 << (LnParser.STRINGCONSTANT - 13)) | (1 << (LnParser.NUMBERCONSTANT - 13)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operators;
    return this;
}

OperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorsContext.prototype.constructor = OperatorsContext;

OperatorsContext.prototype.GENERALOPERATORS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.GENERALOPERATORS);
    } else {
        return this.getToken(LnParser.GENERALOPERATORS, i);
    }
};


OperatorsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

OperatorsContext.prototype.OPENGENERIC = function() {
    return this.getToken(LnParser.OPENGENERIC, 0);
};

OperatorsContext.prototype.OR = function() {
    return this.getToken(LnParser.OR, 0);
};

OperatorsContext.prototype.GLOBAL = function() {
    return this.getToken(LnParser.GLOBAL, 0);
};

OperatorsContext.prototype.DIRSEP = function() {
    return this.getToken(LnParser.DIRSEP, 0);
};

OperatorsContext.prototype.CLOSEGENERIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.CLOSEGENERIC);
    } else {
        return this.getToken(LnParser.CLOSEGENERIC, i);
    }
};


OperatorsContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.EQUALS);
    } else {
        return this.getToken(LnParser.EQUALS, i);
    }
};


OperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperators(this);
	}
};

OperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperators(this);
	}
};




LnParser.OperatorsContext = OperatorsContext;

LnParser.prototype.operators = function() {

    var localctx = new OperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, LnParser.RULE_operators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 883;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.GENERALOPERATORS:
            this.state = 854;
            this.match(LnParser.GENERALOPERATORS);
            break;
        case LnParser.TYPESEP:
            this.state = 855;
            this.match(LnParser.TYPESEP);
            break;
        case LnParser.OPENGENERIC:
            this.state = 856;
            this.match(LnParser.OPENGENERIC);
            break;
        case LnParser.OR:
            this.state = 857;
            this.match(LnParser.OR);
            break;
        case LnParser.CLOSEGENERIC:
            this.state = 859; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 858;
            		this.match(LnParser.CLOSEGENERIC);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 861; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,123, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 879;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
            if(la_===1) {
                this.state = 864; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 863;
                    this.match(LnParser.EQUALS);
                    this.state = 866; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.EQUALS);
                this.state = 871;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 868;
                        this.match(LnParser.GENERALOPERATORS); 
                    }
                    this.state = 873;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
                }


            } else if(la_===2) {
                this.state = 875; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 874;
                		this.match(LnParser.GENERALOPERATORS);
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 877; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,126, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );

            }
            break;
        case LnParser.GLOBAL:
            this.state = 881;
            this.match(LnParser.GLOBAL);
            break;
        case LnParser.DIRSEP:
            this.state = 882;
            this.match(LnParser.DIRSEP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatormappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatormapping;
    return this;
}

OperatormappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatormappingContext.prototype.constructor = OperatormappingContext;

OperatormappingContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


OperatormappingContext.prototype.PREFIX = function() {
    return this.getToken(LnParser.PREFIX, 0);
};

OperatormappingContext.prototype.INFIX = function() {
    return this.getToken(LnParser.INFIX, 0);
};

OperatormappingContext.prototype.fntoop = function() {
    return this.getTypedRuleContext(FntoopContext,0);
};

OperatormappingContext.prototype.opprecedence = function() {
    return this.getTypedRuleContext(OpprecedenceContext,0);
};

OperatormappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatormapping(this);
	}
};

OperatormappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatormapping(this);
	}
};




LnParser.OperatormappingContext = OperatormappingContext;

LnParser.prototype.operatormapping = function() {

    var localctx = new OperatormappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, LnParser.RULE_operatormapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        _la = this._input.LA(1);
        if(!(_la===LnParser.PREFIX || _la===LnParser.INFIX)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 886;
        this.match(LnParser.WS);
        this.state = 895;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 887;
            this.fntoop();
            this.state = 888;
            this.match(LnParser.WS);
            this.state = 889;
            this.opprecedence();
            break;
        case LnParser.PRECEDENCE:
            this.state = 891;
            this.opprecedence();
            this.state = 892;
            this.match(LnParser.WS);
            this.state = 893;
            this.fntoop();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FntoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_fntoop;
    return this;
}

FntoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FntoopContext.prototype.constructor = FntoopContext;

FntoopContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

FntoopContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FntoopContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

FntoopContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

FntoopContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFntoop(this);
	}
};

FntoopContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFntoop(this);
	}
};




LnParser.FntoopContext = FntoopContext;

LnParser.prototype.fntoop = function() {

    var localctx = new FntoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, LnParser.RULE_fntoop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.varn();
        this.state = 898;
        this.match(LnParser.WS);
        this.state = 899;
        this.match(LnParser.AS);
        this.state = 900;
        this.match(LnParser.WS);
        this.state = 901;
        this.operators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpprecedenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_opprecedence;
    return this;
}

OpprecedenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpprecedenceContext.prototype.constructor = OpprecedenceContext;

OpprecedenceContext.prototype.PRECEDENCE = function() {
    return this.getToken(LnParser.PRECEDENCE, 0);
};

OpprecedenceContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

OpprecedenceContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(LnParser.NUMBERCONSTANT, 0);
};

OpprecedenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOpprecedence(this);
	}
};

OpprecedenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOpprecedence(this);
	}
};




LnParser.OpprecedenceContext = OpprecedenceContext;

LnParser.prototype.opprecedence = function() {

    var localctx = new OpprecedenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, LnParser.RULE_opprecedence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this.match(LnParser.PRECEDENCE);
        this.state = 904;
        this.match(LnParser.WS);
        this.state = 905;
        this.match(LnParser.NUMBERCONSTANT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_events;
    return this;
}

EventsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventsContext.prototype.constructor = EventsContext;

EventsContext.prototype.EVENT = function() {
    return this.getToken(LnParser.EVENT, 0);
};

EventsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EventsContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

EventsContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

EventsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EventsContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

EventsContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

EventsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEvents(this);
	}
};

EventsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEvents(this);
	}
};




LnParser.EventsContext = EventsContext;

LnParser.prototype.events = function() {

    var localctx = new EventsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, LnParser.RULE_events);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(LnParser.EVENT);
        this.state = 908;
        this.blank();
        this.state = 909;
        this.match(LnParser.VARNAME);
        this.state = 913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 910;
            this.blank();
            this.state = 915;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 916;
        this.match(LnParser.TYPESEP);
        this.state = 918;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 917;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 920;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_handlers;
    return this;
}

HandlersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlersContext.prototype.constructor = HandlersContext;

HandlersContext.prototype.ON = function() {
    return this.getToken(LnParser.ON, 0);
};

HandlersContext.prototype.eventref = function() {
    return this.getTypedRuleContext(EventrefContext,0);
};

HandlersContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

HandlersContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

HandlersContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

HandlersContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

HandlersContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterHandlers(this);
	}
};

HandlersContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitHandlers(this);
	}
};




LnParser.HandlersContext = HandlersContext;

LnParser.prototype.handlers = function() {

    var localctx = new HandlersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, LnParser.RULE_handlers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 922;
        this.match(LnParser.ON);
        this.state = 924; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 923;
            this.blank();
            this.state = 926; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 928;
        this.eventref();
        this.state = 930; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 929;
            this.blank();
            this.state = 932; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 937;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.FN:
            this.state = 934;
            this.functions();
            break;
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 935;
            this.varn();
            break;
        case LnParser.OPENBODY:
            this.state = 936;
            this.functionbody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventrefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_eventref;
    return this;
}

EventrefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventrefContext.prototype.constructor = EventrefContext;

EventrefContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

EventrefContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

EventrefContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterEventref(this);
	}
};

EventrefContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitEventref(this);
	}
};




LnParser.EventrefContext = EventrefContext;

LnParser.prototype.eventref = function() {

    var localctx = new EventrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, LnParser.RULE_eventref);
    try {
        this.state = 941;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 939;
            this.varn();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 940;
            this.calls();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_interfaces;
    return this;
}

InterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacesContext.prototype.constructor = InterfacesContext;

InterfacesContext.prototype.INTERFACE = function() {
    return this.getToken(LnParser.INTERFACE, 0);
};

InterfacesContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

InterfacesContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


InterfacesContext.prototype.OPENBODY = function() {
    return this.getToken(LnParser.OPENBODY, 0);
};

InterfacesContext.prototype.CLOSEBODY = function() {
    return this.getToken(LnParser.CLOSEBODY, 0);
};

InterfacesContext.prototype.EQUALS = function() {
    return this.getToken(LnParser.EQUALS, 0);
};

InterfacesContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

InterfacesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

InterfacesContext.prototype.interfaceline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfacelineContext);
    } else {
        return this.getTypedRuleContext(InterfacelineContext,i);
    }
};

InterfacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInterfaces(this);
	}
};

InterfacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInterfaces(this);
	}
};




LnParser.InterfacesContext = InterfacesContext;

LnParser.prototype.interfaces = function() {

    var localctx = new InterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, LnParser.RULE_interfaces);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 943;
        this.match(LnParser.INTERFACE);
        this.state = 947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 944;
            this.match(LnParser.WS);
            this.state = 949;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 950;
        this.match(LnParser.VARNAME);
        this.state = 954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 951;
            this.match(LnParser.WS);
            this.state = 956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 984;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENBODY:
            this.state = 957;
            this.match(LnParser.OPENBODY);
            this.state = 961;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 958;
                this.blank();
                this.state = 963;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LnParser.FN) | (1 << LnParser.OPENGENERIC) | (1 << LnParser.CLOSEGENERIC) | (1 << LnParser.OPENARRAY) | (1 << LnParser.METHODSEP))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (LnParser.GLOBAL - 32)) | (1 << (LnParser.DIRSEP - 32)) | (1 << (LnParser.OR - 32)) | (1 << (LnParser.TYPESEP - 32)) | (1 << (LnParser.GENERALOPERATORS - 32)) | (1 << (LnParser.VARNAME - 32)))) !== 0)) {
                this.state = 964;
                this.interfaceline();
                this.state = 966; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 965;
                    this.blank();
                    this.state = 968; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
                this.state = 974;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 975;
            this.match(LnParser.CLOSEBODY);
            break;
        case LnParser.EQUALS:
            this.state = 976;
            this.match(LnParser.EQUALS);
            this.state = 980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 977;
                this.blank();
                this.state = 982;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 983;
            this.varn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfacelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_interfaceline;
    return this;
}

InterfacelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfacelineContext.prototype.constructor = InterfacelineContext;

InterfacelineContext.prototype.functiontypeline = function() {
    return this.getTypedRuleContext(FunctiontypelineContext,0);
};

InterfacelineContext.prototype.operatortypeline = function() {
    return this.getTypedRuleContext(OperatortypelineContext,0);
};

InterfacelineContext.prototype.propertytypeline = function() {
    return this.getTypedRuleContext(PropertytypelineContext,0);
};

InterfacelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterInterfaceline(this);
	}
};

InterfacelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitInterfaceline(this);
	}
};




LnParser.InterfacelineContext = InterfacelineContext;

LnParser.prototype.interfaceline = function() {

    var localctx = new InterfacelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, LnParser.RULE_interfaceline);
    try {
        this.state = 989;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 986;
            this.functiontypeline();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 987;
            this.operatortypeline();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 988;
            this.propertytypeline();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functiontypeline;
    return this;
}

FunctiontypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontypelineContext.prototype.constructor = FunctiontypelineContext;

FunctiontypelineContext.prototype.functiontype = function() {
    return this.getTypedRuleContext(FunctiontypeContext,0);
};

FunctiontypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

FunctiontypelineContext.prototype.FN = function() {
    return this.getToken(LnParser.FN, 0);
};

FunctiontypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


FunctiontypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctiontypeline(this);
	}
};

FunctiontypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctiontypeline(this);
	}
};




LnParser.FunctiontypelineContext = FunctiontypelineContext;

LnParser.prototype.functiontypeline = function() {

    var localctx = new FunctiontypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, LnParser.RULE_functiontypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        _la = this._input.LA(1);
        if(!(_la===LnParser.FN || _la===LnParser.VARNAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 995;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 992;
            this.match(LnParser.WS);
            this.state = 997;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 998;
        this.functiontype();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctiontypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_functiontype;
    return this;
}

FunctiontypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctiontypeContext.prototype.constructor = FunctiontypeContext;

FunctiontypeContext.prototype.OPENARGS = function() {
    return this.getToken(LnParser.OPENARGS, 0);
};

FunctiontypeContext.prototype.varn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarnContext);
    } else {
        return this.getTypedRuleContext(VarnContext,i);
    }
};

FunctiontypeContext.prototype.CLOSEARGS = function() {
    return this.getToken(LnParser.CLOSEARGS, 0);
};

FunctiontypeContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

FunctiontypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctiontypeContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


FunctiontypeContext.prototype.WS = function() {
    return this.getToken(LnParser.WS, 0);
};

FunctiontypeContext.prototype.NEWLINE = function() {
    return this.getToken(LnParser.NEWLINE, 0);
};

FunctiontypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterFunctiontype(this);
	}
};

FunctiontypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitFunctiontype(this);
	}
};




LnParser.FunctiontypeContext = FunctiontypeContext;

LnParser.prototype.functiontype = function() {

    var localctx = new FunctiontypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, LnParser.RULE_functiontype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1000;
        this.match(LnParser.OPENARGS);
        this.state = 1004;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1001;
            this.blank();
            this.state = 1006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1007;
        this.varn();
        this.state = 1011;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1008;
            this.blank();
            this.state = 1013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1030;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1014;
            this.match(LnParser.SEP);
            this.state = 1018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1015;
                this.blank();
                this.state = 1020;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1021;
            this.varn();
            this.state = 1025;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1022;
                this.blank();
                this.state = 1027;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1033;
        this.match(LnParser.CLOSEARGS);
        this.state = 1035;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1034;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1037;
        this.match(LnParser.TYPESEP);
        this.state = 1041;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1038;
            this.blank();
            this.state = 1043;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1044;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatortypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_operatortypeline;
    return this;
}

OperatortypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatortypelineContext.prototype.constructor = OperatortypelineContext;

OperatortypelineContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

OperatortypelineContext.prototype.rightarg = function() {
    return this.getTypedRuleContext(RightargContext,0);
};

OperatortypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

OperatortypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

OperatortypelineContext.prototype.leftarg = function() {
    return this.getTypedRuleContext(LeftargContext,0);
};

OperatortypelineContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OperatortypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterOperatortypeline(this);
	}
};

OperatortypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitOperatortypeline(this);
	}
};




LnParser.OperatortypelineContext = OperatortypelineContext;

LnParser.prototype.operatortypeline = function() {

    var localctx = new OperatortypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, LnParser.RULE_operatortypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1053;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 28)) & ~0x1f) == 0 && ((1 << (_la - 28)) & ((1 << (LnParser.OPENARRAY - 28)) | (1 << (LnParser.METHODSEP - 28)) | (1 << (LnParser.VARNAME - 28)))) !== 0)) {
            this.state = 1046;
            this.leftarg();
            this.state = 1050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1047;
                this.blank();
                this.state = 1052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1055;
        this.operators();
        this.state = 1059;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1056;
            this.blank();
            this.state = 1061;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1062;
        this.rightarg();
        this.state = 1066;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1063;
            this.blank();
            this.state = 1068;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1069;
        this.match(LnParser.TYPESEP);
        this.state = 1073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1070;
            this.blank();
            this.state = 1075;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1076;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LeftargContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_leftarg;
    return this;
}

LeftargContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeftargContext.prototype.constructor = LeftargContext;

LeftargContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

LeftargContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterLeftarg(this);
	}
};

LeftargContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitLeftarg(this);
	}
};




LnParser.LeftargContext = LeftargContext;

LnParser.prototype.leftarg = function() {

    var localctx = new LeftargContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, LnParser.RULE_leftarg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1078;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RightargContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_rightarg;
    return this;
}

RightargContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RightargContext.prototype.constructor = RightargContext;

RightargContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

RightargContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterRightarg(this);
	}
};

RightargContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitRightarg(this);
	}
};




LnParser.RightargContext = RightargContext;

LnParser.prototype.rightarg = function() {

    var localctx = new RightargContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, LnParser.RULE_rightarg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertytypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_propertytypeline;
    return this;
}

PropertytypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertytypelineContext.prototype.constructor = PropertytypelineContext;

PropertytypelineContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

PropertytypelineContext.prototype.TYPESEP = function() {
    return this.getToken(LnParser.TYPESEP, 0);
};

PropertytypelineContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

PropertytypelineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


PropertytypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterPropertytypeline(this);
	}
};

PropertytypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitPropertytypeline(this);
	}
};




LnParser.PropertytypelineContext = PropertytypelineContext;

LnParser.prototype.propertytypeline = function() {

    var localctx = new PropertytypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, LnParser.RULE_propertytypeline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1082;
        this.match(LnParser.VARNAME);
        this.state = 1086;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1083;
            this.match(LnParser.WS);
            this.state = 1088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1089;
        this.match(LnParser.TYPESEP);
        this.state = 1093;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1090;
            this.match(LnParser.WS);
            this.state = 1095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1096;
        this.varn();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_argtype;
    return this;
}

ArgtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgtypeContext.prototype.constructor = ArgtypeContext;

ArgtypeContext.prototype.othertype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OthertypeContext);
    } else {
        return this.getTypedRuleContext(OthertypeContext,i);
    }
};

ArgtypeContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.OR);
    } else {
        return this.getToken(LnParser.OR, i);
    }
};


ArgtypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArgtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArgtype(this);
	}
};

ArgtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArgtype(this);
	}
};




LnParser.ArgtypeContext = ArgtypeContext;

LnParser.prototype.argtype = function() {

    var localctx = new ArgtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, LnParser.RULE_argtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1098;
        this.othertype();
        this.state = 1115;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1102;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 1099;
                    this.blank();
                    this.state = 1104;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1105;
                this.match(LnParser.OR);
                this.state = 1109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                    this.state = 1106;
                    this.blank();
                    this.state = 1111;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1112;
                this.othertype(); 
            }
            this.state = 1117;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.VARNAME);
    } else {
        return this.getToken(LnParser.VARNAME, i);
    }
};


ArglistContext.prototype.TYPESEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.TYPESEP);
    } else {
        return this.getToken(LnParser.TYPESEP, i);
    }
};


ArglistContext.prototype.argtype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgtypeContext);
    } else {
        return this.getTypedRuleContext(ArgtypeContext,i);
    }
};

ArglistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


ArglistContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArglistContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArglist(this);
	}
};




LnParser.ArglistContext = ArglistContext;

LnParser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, LnParser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1118;
        this.match(LnParser.VARNAME);
        this.state = 1120;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1119;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1122;
        this.match(LnParser.TYPESEP);
        this.state = 1124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
            this.state = 1123;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1126;
        this.argtype();
        this.state = 1139;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1127;
            this.match(LnParser.SEP);
            this.state = 1128;
            this.match(LnParser.VARNAME);
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1129;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1132;
            this.match(LnParser.TYPESEP);
            this.state = 1134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===LnParser.NEWLINE || _la===LnParser.WS) {
                this.state = 1133;
                _la = this._input.LA(1);
                if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1136;
            this.argtype();
            this.state = 1141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_exports;
    return this;
}

ExportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsContext.prototype.constructor = ExportsContext;

ExportsContext.prototype.EXPORT = function() {
    return this.getToken(LnParser.EXPORT, 0);
};

ExportsContext.prototype.varn = function() {
    return this.getTypedRuleContext(VarnContext,0);
};

ExportsContext.prototype.types = function() {
    return this.getTypedRuleContext(TypesContext,0);
};

ExportsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

ExportsContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

ExportsContext.prototype.operatormapping = function() {
    return this.getTypedRuleContext(OperatormappingContext,0);
};

ExportsContext.prototype.events = function() {
    return this.getTypedRuleContext(EventsContext,0);
};

ExportsContext.prototype.interfaces = function() {
    return this.getTypedRuleContext(InterfacesContext,0);
};

ExportsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ExportsContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.NEWLINE);
    } else {
        return this.getToken(LnParser.NEWLINE, i);
    }
};


ExportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterExports(this);
	}
};

ExportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitExports(this);
	}
};




LnParser.ExportsContext = ExportsContext;

LnParser.prototype.exports = function() {

    var localctx = new ExportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, LnParser.RULE_exports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1142;
        this.match(LnParser.EXPORT);
        this.state = 1144; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1143;
            _la = this._input.LA(1);
            if(!(_la===LnParser.NEWLINE || _la===LnParser.WS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1146; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===LnParser.NEWLINE || _la===LnParser.WS);
        this.state = 1155;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.OPENARRAY:
        case LnParser.METHODSEP:
        case LnParser.VARNAME:
            this.state = 1148;
            this.varn();
            break;
        case LnParser.TYPE:
            this.state = 1149;
            this.types();
            break;
        case LnParser.CONST:
            this.state = 1150;
            this.constdeclaration();
            break;
        case LnParser.FN:
            this.state = 1151;
            this.functions();
            break;
        case LnParser.PREFIX:
        case LnParser.INFIX:
            this.state = 1152;
            this.operatormapping();
            break;
        case LnParser.EVENT:
            this.state = 1153;
            this.events();
            break;
        case LnParser.INTERFACE:
            this.state = 1154;
            this.interfaces();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varlist;
    return this;
}

VarlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarlistContext.prototype.constructor = VarlistContext;

VarlistContext.prototype.renameablevar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenameablevarContext);
    } else {
        return this.getTypedRuleContext(RenameablevarContext,i);
    }
};

VarlistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.SEP);
    } else {
        return this.getToken(LnParser.SEP, i);
    }
};


VarlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarlist(this);
	}
};

VarlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarlist(this);
	}
};




LnParser.VarlistContext = VarlistContext;

LnParser.prototype.varlist = function() {

    var localctx = new VarlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, LnParser.RULE_varlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1157;
        this.renameablevar();
        this.state = 1162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.SEP) {
            this.state = 1158;
            this.match(LnParser.SEP);
            this.state = 1159;
            this.renameablevar();
            this.state = 1164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RenameablevarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_renameablevar;
    return this;
}

RenameablevarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameablevarContext.prototype.constructor = RenameablevarContext;

RenameablevarContext.prototype.varop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VaropContext);
    } else {
        return this.getTypedRuleContext(VaropContext,i);
    }
};

RenameablevarContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


RenameablevarContext.prototype.AS = function() {
    return this.getToken(LnParser.AS, 0);
};

RenameablevarContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterRenameablevar(this);
	}
};

RenameablevarContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitRenameablevar(this);
	}
};




LnParser.RenameablevarContext = RenameablevarContext;

LnParser.prototype.renameablevar = function() {

    var localctx = new RenameablevarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, LnParser.RULE_renameablevar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1165;
        this.varop();
        this.state = 1170;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===LnParser.WS) {
            this.state = 1166;
            this.match(LnParser.WS);
            this.state = 1167;
            this.match(LnParser.AS);
            this.state = 1168;
            this.match(LnParser.WS);
            this.state = 1169;
            this.varop();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VaropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varop;
    return this;
}

VaropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VaropContext.prototype.constructor = VaropContext;

VaropContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

VaropContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

VaropContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarop(this);
	}
};

VaropContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarop(this);
	}
};




LnParser.VaropContext = VaropContext;

LnParser.prototype.varop = function() {

    var localctx = new VaropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, LnParser.RULE_varop);
    try {
        this.state = 1174;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1172;
            this.match(LnParser.VARNAME);
            break;
        case LnParser.OPENGENERIC:
        case LnParser.CLOSEGENERIC:
        case LnParser.GLOBAL:
        case LnParser.DIRSEP:
        case LnParser.OR:
        case LnParser.TYPESEP:
        case LnParser.GENERALOPERATORS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1173;
            this.operators();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varn;
    return this;
}

VarnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarnContext.prototype.constructor = VarnContext;

VarnContext.prototype.varsegment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarsegmentContext);
    } else {
        return this.getTypedRuleContext(VarsegmentContext,i);
    }
};

VarnContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarn(this);
	}
};

VarnContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarn(this);
	}
};




LnParser.VarnContext = VarnContext;

LnParser.prototype.varn = function() {

    var localctx = new VarnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, LnParser.RULE_varn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1176;
        		this.varsegment();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1179; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,172, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarsegmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_varsegment;
    return this;
}

VarsegmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarsegmentContext.prototype.constructor = VarsegmentContext;

VarsegmentContext.prototype.VARNAME = function() {
    return this.getToken(LnParser.VARNAME, 0);
};

VarsegmentContext.prototype.METHODSEP = function() {
    return this.getToken(LnParser.METHODSEP, 0);
};

VarsegmentContext.prototype.arrayaccess = function() {
    return this.getTypedRuleContext(ArrayaccessContext,0);
};

VarsegmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterVarsegment(this);
	}
};

VarsegmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitVarsegment(this);
	}
};




LnParser.VarsegmentContext = VarsegmentContext;

LnParser.prototype.varsegment = function() {

    var localctx = new VarsegmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, LnParser.RULE_varsegment);
    try {
        this.state = 1184;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case LnParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 1181;
            this.match(LnParser.VARNAME);
            break;
        case LnParser.METHODSEP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1182;
            this.match(LnParser.METHODSEP);
            break;
        case LnParser.OPENARRAY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1183;
            this.arrayaccess();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayaccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = LnParser.RULE_arrayaccess;
    return this;
}

ArrayaccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayaccessContext.prototype.constructor = ArrayaccessContext;

ArrayaccessContext.prototype.OPENARRAY = function() {
    return this.getToken(LnParser.OPENARRAY, 0);
};

ArrayaccessContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ArrayaccessContext.prototype.CLOSEARRAY = function() {
    return this.getToken(LnParser.CLOSEARRAY, 0);
};

ArrayaccessContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(LnParser.WS);
    } else {
        return this.getToken(LnParser.WS, i);
    }
};


ArrayaccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.enterArrayaccess(this);
	}
};

ArrayaccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof LnListener ) {
        listener.exitArrayaccess(this);
	}
};




LnParser.ArrayaccessContext = ArrayaccessContext;

LnParser.prototype.arrayaccess = function() {

    var localctx = new ArrayaccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, LnParser.RULE_arrayaccess);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1186;
        this.match(LnParser.OPENARRAY);
        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1187;
            this.match(LnParser.WS);
            this.state = 1192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1193;
        this.assignables();
        this.state = 1197;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===LnParser.WS) {
            this.state = 1194;
            this.match(LnParser.WS);
            this.state = 1199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1200;
        this.match(LnParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.LnParser = LnParser;
