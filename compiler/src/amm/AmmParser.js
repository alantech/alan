// Generated from Amm.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var AmmListener = require('./AmmListener').AmmListener;
var grammarFileName = "Amm.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u001e\u0275\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0003\u0002\u0007\u0002@\n\u0002\f\u0002\u000e",
    "\u0002C\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002G\n\u0002\r\u0002",
    "\u000e\u0002H\u0007\u0002K\n\u0002\f\u0002\u000e\u0002N\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0006\u0002R\n\u0002\r\u0002\u000e\u0002S\u0007",
    "\u0002V\n\u0002\f\u0002\u000e\u0002Y\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0006\u0002]\n\u0002\r\u0002\u000e\u0002^\u0007\u0002a\n\u0002\f\u0002",
    "\u000e\u0002d\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002h\n\u0002",
    "\r\u0002\u000e\u0002i\u0006\u0002l\n\u0002\r\u0002\u000e\u0002m\u0003",
    "\u0002\u0005\u0002q\n\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0006\u0004w\n\u0004\r\u0004\u000e\u0004x\u0003\u0004\u0003\u0004",
    "\u0007\u0004}\n\u0004\f\u0004\u000e\u0004\u0080\u000b\u0004\u0003\u0004",
    "\u0005\u0004\u0083\n\u0004\u0003\u0004\u0006\u0004\u0086\n\u0004\r\u0004",
    "\u000e\u0004\u0087\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u008d",
    "\n\u0004\f\u0004\u000e\u0004\u0090\u000b\u0004\u0003\u0004\u0003\u0004",
    "\u0007\u0004\u0094\n\u0004\f\u0004\u000e\u0004\u0097\u000b\u0004\u0003",
    "\u0004\u0003\u0004\u0007\u0004\u009b\n\u0004\f\u0004\u000e\u0004\u009e",
    "\u000b\u0004\u0003\u0004\u0007\u0004\u00a1\n\u0004\f\u0004\u000e\u0004",
    "\u00a4\u000b\u0004\u0005\u0004\u00a6\n\u0004\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u00aa\n\u0005\f\u0005\u000e\u0005\u00ad\u000b\u0005\u0003",
    "\u0005\u0005\u0005\u00b0\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0007\u0007\u00b6\n\u0007\f\u0007\u000e\u0007\u00b9\u000b",
    "\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00bd\n\u0007\f\u0007\u000e",
    "\u0007\u00c0\u000b\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00c4\n",
    "\u0007\f\u0007\u000e\u0007\u00c7\u000b\u0007\u0003\u0007\u0003\u0007",
    "\u0007\u0007\u00cb\n\u0007\f\u0007\u000e\u0007\u00ce\u000b\u0007\u0007",
    "\u0007\u00d0\n\u0007\f\u0007\u000e\u0007\u00d3\u000b\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0007\b\u00d9\n\b\f\b\u000e\b\u00dc\u000b",
    "\b\u0003\b\u0005\b\u00df\n\b\u0003\b\u0005\b\u00e2\n\b\u0003\t\u0003",
    "\t\u0007\t\u00e6\n\t\f\t\u000e\t\u00e9\u000b\t\u0003\t\u0007\t\u00ec",
    "\n\t\f\t\u000e\t\u00ef\u000b\t\u0003\t\u0006\t\u00f2\n\t\r\t\u000e\t",
    "\u00f3\u0003\t\u0005\t\u00f7\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0007\n\u00ff\n\n\f\n\u000e\n\u0102\u000b\n\u0003\u000b\u0003",
    "\u000b\u0006\u000b\u0106\n\u000b\r\u000b\u000e\u000b\u0107\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u010e\n\u000b\u0003",
    "\u000b\u0003\u000b\u0007\u000b\u0112\n\u000b\f\u000b\u000e\u000b\u0115",
    "\u000b\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0119\n\u000b\f\u000b",
    "\u000e\u000b\u011c\u000b\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0120",
    "\n\u000b\f\u000b\u000e\u000b\u0123\u000b\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0007\f\u0129\n\f\f\f\u000e\f\u012c\u000b\f\u0003\f",
    "\u0006\f\u012f\n\f\r\f\u000e\f\u0130\u0003\f\u0007\f\u0134\n\f\f\f\u000e",
    "\f\u0137\u000b\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u013f\n\r\u0003\r\u0006\r\u0142\n\r\r\r\u000e\r\u0143\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0148\n\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0007\u0010\u014e\n\u0010\f\u0010\u000e\u0010\u0151",
    "\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0155\n\u0010\f\u0010",
    "\u000e\u0010\u0158\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u015c",
    "\n\u0010\f\u0010\u000e\u0010\u015f\u000b\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u0163\n\u0010\f\u0010\u000e\u0010\u0166\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0007\u0010\u016a\n\u0010\f\u0010\u000e\u0010\u016d",
    "\u000b\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u0173\n\u0011\f\u0011\u000e\u0011\u0176\u000b\u0011\u0003\u0011\u0003",
    "\u0011\u0007\u0011\u017a\n\u0011\f\u0011\u000e\u0011\u017d\u000b\u0011",
    "\u0003\u0011\u0003\u0011\u0007\u0011\u0181\n\u0011\f\u0011\u000e\u0011",
    "\u0184\u000b\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0188\n\u0011",
    "\f\u0011\u000e\u0011\u018b\u000b\u0011\u0003\u0011\u0003\u0011\u0007",
    "\u0011\u018f\n\u0011\f\u0011\u000e\u0011\u0192\u000b\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0007\u0012\u0198\n\u0012\f\u0012",
    "\u000e\u0012\u019b\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u019f",
    "\n\u0012\f\u0012\u000e\u0012\u01a2\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u01ab\n\u0013\u0003\u0014\u0003\u0014\u0007\u0014\u01af\n\u0014\f\u0014",
    "\u000e\u0014\u01b2\u000b\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u01b6",
    "\n\u0014\f\u0014\u000e\u0014\u01b9\u000b\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u01be\n\u0014\u0003\u0015\u0003\u0015\u0007",
    "\u0015\u01c2\n\u0015\f\u0015\u000e\u0015\u01c5\u000b\u0015\u0003\u0015",
    "\u0003\u0015\u0007\u0015\u01c9\n\u0015\f\u0015\u000e\u0015\u01cc\u000b",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0007\u0016\u01d2",
    "\n\u0016\f\u0016\u000e\u0016\u01d5\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0006\u0016\u01d9\n\u0016\r\u0016\u000e\u0016\u01da\u0006\u0016\u01dd",
    "\n\u0016\r\u0016\u000e\u0016\u01de\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u01e5\n\u0017\f\u0017\u000e\u0017\u01e8\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0006\u0017\u01ec\n\u0017\r\u0017\u000e",
    "\u0017\u01ed\u0007\u0017\u01f0\n\u0017\f\u0017\u000e\u0017\u01f3\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0007\u0018\u01f9",
    "\n\u0018\f\u0018\u000e\u0018\u01fc\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u0200\n\u0018\f\u0018\u000e\u0018\u0203\u000b\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0019\u0007\u0019\u0208\n\u0019\f\u0019\u000e",
    "\u0019\u020b\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019",
    "\u0210\n\u0019\f\u0019\u000e\u0019\u0213\u000b\u0019\u0003\u0019\u0007",
    "\u0019\u0216\n\u0019\f\u0019\u000e\u0019\u0219\u000b\u0019\u0003\u0019",
    "\u0007\u0019\u021c\n\u0019\f\u0019\u000e\u0019\u021f\u000b\u0019\u0003",
    "\u001a\u0007\u001a\u0222\n\u001a\f\u001a\u000e\u001a\u0225\u000b\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u022a\n\u001a\f\u001a",
    "\u000e\u001a\u022d\u000b\u001a\u0003\u001a\u0007\u001a\u0230\n\u001a",
    "\f\u001a\u000e\u001a\u0233\u000b\u001a\u0003\u001a\u0007\u001a\u0236",
    "\n\u001a\f\u001a\u000e\u001a\u0239\u000b\u001a\u0003\u001b\u0003\u001b",
    "\u0007\u001b\u023d\n\u001b\f\u001b\u000e\u001b\u0240\u000b\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0244\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u024a\n\u001c\f\u001c\u000e\u001c",
    "\u024d\u000b\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0251\n\u001c",
    "\f\u001c\u000e\u001c\u0254\u000b\u001c\u0003\u001c\u0005\u001c\u0257",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0007\u001e\u025f\n\u001e\f\u001e\u000e\u001e\u0262\u000b",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0006",
    "\u001f\u0269\n\u001f\r\u001f\u000e\u001f\u026a\u0003\u001f\u0003\u001f",
    "\u0006\u001f\u026f\n\u001f\r\u001f\u000e\u001f\u0270\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0002\u0002 \u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<\u0002\u0004",
    "\u0003\u0002\u001a\u001b\u0004\u0002\n\n\u001c\u001d\u0002\u02b7\u0002",
    "p\u0003\u0002\u0002\u0002\u0004r\u0003\u0002\u0002\u0002\u0006t\u0003",
    "\u0002\u0002\u0002\b\u00a7\u0003\u0002\u0002\u0002\n\u00b1\u0003\u0002",
    "\u0002\u0002\f\u00b3\u0003\u0002\u0002\u0002\u000e\u00e1\u0003\u0002",
    "\u0002\u0002\u0010\u00e3\u0003\u0002\u0002\u0002\u0012\u00fa\u0003\u0002",
    "\u0002\u0002\u0014\u0103\u0003\u0002\u0002\u0002\u0016\u0126\u0003\u0002",
    "\u0002\u0002\u0018\u013e\u0003\u0002\u0002\u0002\u001a\u0147\u0003\u0002",
    "\u0002\u0002\u001c\u0149\u0003\u0002\u0002\u0002\u001e\u014b\u0003\u0002",
    "\u0002\u0002 \u0170\u0003\u0002\u0002\u0002\"\u0195\u0003\u0002\u0002",
    "\u0002$\u01aa\u0003\u0002\u0002\u0002&\u01ac\u0003\u0002\u0002\u0002",
    "(\u01bf\u0003\u0002\u0002\u0002*\u01cf\u0003\u0002\u0002\u0002,\u01e2",
    "\u0003\u0002\u0002\u0002.\u01f6\u0003\u0002\u0002\u00020\u0209\u0003",
    "\u0002\u0002\u00022\u0223\u0003\u0002\u0002\u00024\u023a\u0003\u0002",
    "\u0002\u00026\u0247\u0003\u0002\u0002\u00028\u0258\u0003\u0002\u0002",
    "\u0002:\u025a\u0003\u0002\u0002\u0002<\u0266\u0003\u0002\u0002\u0002",
    ">@\u0005\u0004\u0003\u0002?>\u0003\u0002\u0002\u0002@C\u0003\u0002\u0002",
    "\u0002A?\u0003\u0002\u0002\u0002AB\u0003\u0002\u0002\u0002BL\u0003\u0002",
    "\u0002\u0002CA\u0003\u0002\u0002\u0002DK\u0005\u0006\u0004\u0002EG\u0005",
    "\u0004\u0003\u0002FE\u0003\u0002\u0002\u0002GH\u0003\u0002\u0002\u0002",
    "HF\u0003\u0002\u0002\u0002HI\u0003\u0002\u0002\u0002IK\u0003\u0002\u0002",
    "\u0002JD\u0003\u0002\u0002\u0002JF\u0003\u0002\u0002\u0002KN\u0003\u0002",
    "\u0002\u0002LJ\u0003\u0002\u0002\u0002LM\u0003\u0002\u0002\u0002MW\u0003",
    "\u0002\u0002\u0002NL\u0003\u0002\u0002\u0002OV\u0005\u001e\u0010\u0002",
    "PR\u0005\u0004\u0003\u0002QP\u0003\u0002\u0002\u0002RS\u0003\u0002\u0002",
    "\u0002SQ\u0003\u0002\u0002\u0002ST\u0003\u0002\u0002\u0002TV\u0003\u0002",
    "\u0002\u0002UO\u0003\u0002\u0002\u0002UQ\u0003\u0002\u0002\u0002VY\u0003",
    "\u0002\u0002\u0002WU\u0003\u0002\u0002\u0002WX\u0003\u0002\u0002\u0002",
    "Xb\u0003\u0002\u0002\u0002YW\u0003\u0002\u0002\u0002Za\u0005:\u001e",
    "\u0002[]\u0005\u0004\u0003\u0002\\[\u0003\u0002\u0002\u0002]^\u0003",
    "\u0002\u0002\u0002^\\\u0003\u0002\u0002\u0002^_\u0003\u0002\u0002\u0002",
    "_a\u0003\u0002\u0002\u0002`Z\u0003\u0002\u0002\u0002`\\\u0003\u0002",
    "\u0002\u0002ad\u0003\u0002\u0002\u0002b`\u0003\u0002\u0002\u0002bc\u0003",
    "\u0002\u0002\u0002ck\u0003\u0002\u0002\u0002db\u0003\u0002\u0002\u0002",
    "el\u0005<\u001f\u0002fh\u0005\u0004\u0003\u0002gf\u0003\u0002\u0002",
    "\u0002hi\u0003\u0002\u0002\u0002ig\u0003\u0002\u0002\u0002ij\u0003\u0002",
    "\u0002\u0002jl\u0003\u0002\u0002\u0002ke\u0003\u0002\u0002\u0002kg\u0003",
    "\u0002\u0002\u0002lm\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002",
    "mn\u0003\u0002\u0002\u0002nq\u0003\u0002\u0002\u0002oq\u0007\u0002\u0002",
    "\u0003pA\u0003\u0002\u0002\u0002po\u0003\u0002\u0002\u0002q\u0003\u0003",
    "\u0002\u0002\u0002rs\t\u0002\u0002\u0002s\u0005\u0003\u0002\u0002\u0002",
    "tv\u0007\u0003\u0002\u0002uw\u0005\u0004\u0003\u0002vu\u0003\u0002\u0002",
    "\u0002wx\u0003\u0002\u0002\u0002xv\u0003\u0002\u0002\u0002xy\u0003\u0002",
    "\u0002\u0002yz\u0003\u0002\u0002\u0002z~\u0005\n\u0006\u0002{}\u0005",
    "\u0004\u0003\u0002|{\u0003\u0002\u0002\u0002}\u0080\u0003\u0002\u0002",
    "\u0002~|\u0003\u0002\u0002\u0002~\u007f\u0003\u0002\u0002\u0002\u007f",
    "\u0082\u0003\u0002\u0002\u0002\u0080~\u0003\u0002\u0002\u0002\u0081",
    "\u0083\u0005\f\u0007\u0002\u0082\u0081\u0003\u0002\u0002\u0002\u0082",
    "\u0083\u0003\u0002\u0002\u0002\u0083\u0085\u0003\u0002\u0002\u0002\u0084",
    "\u0086\u0005\u0004\u0003\u0002\u0085\u0084\u0003\u0002\u0002\u0002\u0086",
    "\u0087\u0003\u0002\u0002\u0002\u0087\u0085\u0003\u0002\u0002\u0002\u0087",
    "\u0088\u0003\u0002\u0002\u0002\u0088\u00a5\u0003\u0002\u0002\u0002\u0089",
    "\u00a6\u0005\u0010\t\u0002\u008a\u008e\u0007\u0016\u0002\u0002\u008b",
    "\u008d\u0005\u0004\u0003\u0002\u008c\u008b\u0003\u0002\u0002\u0002\u008d",
    "\u0090\u0003\u0002\u0002\u0002\u008e\u008c\u0003\u0002\u0002\u0002\u008e",
    "\u008f\u0003\u0002\u0002\u0002\u008f\u0091\u0003\u0002\u0002\u0002\u0090",
    "\u008e\u0003\u0002\u0002\u0002\u0091\u00a2\u0005\b\u0005\u0002\u0092",
    "\u0094\u0005\u0004\u0003\u0002\u0093\u0092\u0003\u0002\u0002\u0002\u0094",
    "\u0097\u0003\u0002\u0002\u0002\u0095\u0093\u0003\u0002\u0002\u0002\u0095",
    "\u0096\u0003\u0002\u0002\u0002\u0096\u0098\u0003\u0002\u0002\u0002\u0097",
    "\u0095\u0003\u0002\u0002\u0002\u0098\u009c\u0007\u0017\u0002\u0002\u0099",
    "\u009b\u0005\u0004\u0003\u0002\u009a\u0099\u0003\u0002\u0002\u0002\u009b",
    "\u009e\u0003\u0002\u0002\u0002\u009c\u009a\u0003\u0002\u0002\u0002\u009c",
    "\u009d\u0003\u0002\u0002\u0002\u009d\u009f\u0003\u0002\u0002\u0002\u009e",
    "\u009c\u0003\u0002\u0002\u0002\u009f\u00a1\u0005\b\u0005\u0002\u00a0",
    "\u0095\u0003\u0002\u0002\u0002\u00a1\u00a4\u0003\u0002\u0002\u0002\u00a2",
    "\u00a0\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3",
    "\u00a6\u0003\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a5",
    "\u0089\u0003\u0002\u0002\u0002\u00a5\u008a\u0003\u0002\u0002\u0002\u00a6",
    "\u0007\u0003\u0002\u0002\u0002\u00a7\u00ab\u0005\n\u0006\u0002\u00a8",
    "\u00aa\u0005\u0004\u0003\u0002\u00a9\u00a8\u0003\u0002\u0002\u0002\u00aa",
    "\u00ad\u0003\u0002\u0002\u0002\u00ab\u00a9\u0003\u0002\u0002\u0002\u00ab",
    "\u00ac\u0003\u0002\u0002\u0002\u00ac\u00af\u0003\u0002\u0002\u0002\u00ad",
    "\u00ab\u0003\u0002\u0002\u0002\u00ae\u00b0\u0005\f\u0007\u0002\u00af",
    "\u00ae\u0003\u0002\u0002\u0002\u00af\u00b0\u0003\u0002\u0002\u0002\u00b0",
    "\t\u0003\u0002\u0002\u0002\u00b1\u00b2\u0007\u001e\u0002\u0002\u00b2",
    "\u000b\u0003\u0002\u0002\u0002\u00b3\u00b7\u0007\u0011\u0002\u0002\u00b4",
    "\u00b6\u0005\u0004\u0003\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002\u00b6",
    "\u00b9\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002\u00b7",
    "\u00b8\u0003\u0002\u0002\u0002\u00b8\u00ba\u0003\u0002\u0002\u0002\u00b9",
    "\u00b7\u0003\u0002\u0002\u0002\u00ba\u00be\u0005\u000e\b\u0002\u00bb",
    "\u00bd\u0005\u0004\u0003\u0002\u00bc\u00bb\u0003\u0002\u0002\u0002\u00bd",
    "\u00c0\u0003\u0002\u0002\u0002\u00be\u00bc\u0003\u0002\u0002\u0002\u00be",
    "\u00bf\u0003\u0002\u0002\u0002\u00bf\u00d1\u0003\u0002\u0002\u0002\u00c0",
    "\u00be\u0003\u0002\u0002\u0002\u00c1\u00c5\u0007\f\u0002\u0002\u00c2",
    "\u00c4\u0005\u0004\u0003\u0002\u00c3\u00c2\u0003\u0002\u0002\u0002\u00c4",
    "\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5",
    "\u00c6\u0003\u0002\u0002\u0002\u00c6\u00c8\u0003\u0002\u0002\u0002\u00c7",
    "\u00c5\u0003\u0002\u0002\u0002\u00c8\u00cc\u0005\u000e\b\u0002\u00c9",
    "\u00cb\u0005\u0004\u0003\u0002\u00ca\u00c9\u0003\u0002\u0002\u0002\u00cb",
    "\u00ce\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0003\u0002\u0002\u0002\u00cd\u00d0\u0003\u0002\u0002\u0002\u00ce",
    "\u00cc\u0003\u0002\u0002\u0002\u00cf\u00c1\u0003\u0002\u0002\u0002\u00d0",
    "\u00d3\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1",
    "\u00d2\u0003\u0002\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002\u0002\u00d3",
    "\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d5\u0007\u0012\u0002\u0002\u00d5",
    "\r\u0003\u0002\u0002\u0002\u00d6\u00da\u0005\n\u0006\u0002\u00d7\u00d9",
    "\u0005\u0004\u0003\u0002\u00d8\u00d7\u0003\u0002\u0002\u0002\u00d9\u00dc",
    "\u0003\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00db",
    "\u0003\u0002\u0002\u0002\u00db\u00de\u0003\u0002\u0002\u0002\u00dc\u00da",
    "\u0003\u0002\u0002\u0002\u00dd\u00df\u0005\f\u0007\u0002\u00de\u00dd",
    "\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e2",
    "\u0003\u0002\u0002\u0002\u00e0\u00e2\u0007\u0018\u0002\u0002\u00e1\u00d6",
    "\u0003\u0002\u0002\u0002\u00e1\u00e0\u0003\u0002\u0002\u0002\u00e2\u000f",
    "\u0003\u0002\u0002\u0002\u00e3\u00e7\u0007\r\u0002\u0002\u00e4\u00e6",
    "\u0005\u0004\u0003\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002\u00e6\u00e9",
    "\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8",
    "\u0003\u0002\u0002\u0002\u00e8\u00f1\u0003\u0002\u0002\u0002\u00e9\u00e7",
    "\u0003\u0002\u0002\u0002\u00ea\u00ec\u0007\u001b\u0002\u0002\u00eb\u00ea",
    "\u0003\u0002\u0002\u0002\u00ec\u00ef\u0003\u0002\u0002\u0002\u00ed\u00eb",
    "\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003\u0002\u0002\u0002\u00ee\u00f0",
    "\u0003\u0002\u0002\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00f0\u00f2",
    "\u0005\u0012\n\u0002\u00f1\u00ed\u0003\u0002\u0002\u0002\u00f2\u00f3",
    "\u0003\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4",
    "\u0003\u0002\u0002\u0002\u00f4\u00f6\u0003\u0002\u0002\u0002\u00f5\u00f7",
    "\u0005\u0004\u0003\u0002\u00f6\u00f5\u0003\u0002\u0002\u0002\u00f6\u00f7",
    "\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00f9",
    "\u0007\u000e\u0002\u0002\u00f9\u0011\u0003\u0002\u0002\u0002\u00fa\u00fb",
    "\u0007\u001e\u0002\u0002\u00fb\u00fc\u0007\u0019\u0002\u0002\u00fc\u0100",
    "\u0005\n\u0006\u0002\u00fd\u00ff\u0007\u001a\u0002\u0002\u00fe\u00fd",
    "\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002\u0002\u0002\u0100\u00fe",
    "\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0101\u0013",
    "\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0103\u0105",
    "\u0007\u0004\u0002\u0002\u0104\u0106\u0005\u0004\u0003\u0002\u0105\u0104",
    "\u0003\u0002\u0002\u0002\u0106\u0107\u0003\u0002\u0002\u0002\u0107\u0105",
    "\u0003\u0002\u0002\u0002\u0107\u0108\u0003\u0002\u0002\u0002\u0108\u0109",
    "\u0003\u0002\u0002\u0002\u0109\u010d\u0007\u000f\u0002\u0002\u010a\u010b",
    "\u0007\u001e\u0002\u0002\u010b\u010c\u0007\u0019\u0002\u0002\u010c\u010e",
    "\u0005\u000e\b\u0002\u010d\u010a\u0003\u0002\u0002\u0002\u010d\u010e",
    "\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0113",
    "\u0007\u0010\u0002\u0002\u0110\u0112\u0005\u0004\u0003\u0002\u0111\u0110",
    "\u0003\u0002\u0002\u0002\u0112\u0115\u0003\u0002\u0002\u0002\u0113\u0111",
    "\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0116",
    "\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002\u0002\u0002\u0116\u011a",
    "\u0007\u0019\u0002\u0002\u0117\u0119\u0005\u0004\u0003\u0002\u0118\u0117",
    "\u0003\u0002\u0002\u0002\u0119\u011c\u0003\u0002\u0002\u0002\u011a\u0118",
    "\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b\u011d",
    "\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011d\u0121",
    "\u0007\u0018\u0002\u0002\u011e\u0120\u0005\u0004\u0003\u0002\u011f\u011e",
    "\u0003\u0002\u0002\u0002\u0120\u0123\u0003\u0002\u0002\u0002\u0121\u011f",
    "\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0124",
    "\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0124\u0125",
    "\u0005\u0016\f\u0002\u0125\u0015\u0003\u0002\u0002\u0002\u0126\u012a",
    "\u0007\r\u0002\u0002\u0127\u0129\u0005\u0004\u0003\u0002\u0128\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012c\u0003\u0002\u0002\u0002\u012a\u0128",
    "\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012e",
    "\u0003\u0002\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012d\u012f",
    "\u0005\u0018\r\u0002\u012e\u012d\u0003\u0002\u0002\u0002\u012f\u0130",
    "\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0130\u0131",
    "\u0003\u0002\u0002\u0002\u0131\u0135\u0003\u0002\u0002\u0002\u0132\u0134",
    "\u0005\u0004\u0003\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0134\u0137",
    "\u0003\u0002\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136",
    "\u0003\u0002\u0002\u0002\u0136\u0138\u0003\u0002\u0002\u0002\u0137\u0135",
    "\u0003\u0002\u0002\u0002\u0138\u0139\u0007\u000e\u0002\u0002\u0139\u0017",
    "\u0003\u0002\u0002\u0002\u013a\u013f\u0005\u001a\u000e\u0002\u013b\u013f",
    "\u0005\"\u0012\u0002\u013c\u013f\u00054\u001b\u0002\u013d\u013f\u0005",
    "6\u001c\u0002\u013e\u013a\u0003\u0002\u0002\u0002\u013e\u013b\u0003",
    "\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013d\u0003",
    "\u0002\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002\u0140\u0142\u0005",
    "\u0004\u0003\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003",
    "\u0002\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0143\u0144\u0003",
    "\u0002\u0002\u0002\u0144\u0019\u0003\u0002\u0002\u0002\u0145\u0148\u0005",
    "\u001e\u0010\u0002\u0146\u0148\u0005 \u0011\u0002\u0147\u0145\u0003",
    "\u0002\u0002\u0002\u0147\u0146\u0003\u0002\u0002\u0002\u0148\u001b\u0003",
    "\u0002\u0002\u0002\u0149\u014a\u0007\u001e\u0002\u0002\u014a\u001d\u0003",
    "\u0002\u0002\u0002\u014b\u014f\u0007\u0007\u0002\u0002\u014c\u014e\u0005",
    "\u0004\u0003\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014e\u0151\u0003",
    "\u0002\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003",
    "\u0002\u0002\u0002\u0150\u0152\u0003\u0002\u0002\u0002\u0151\u014f\u0003",
    "\u0002\u0002\u0002\u0152\u0156\u0005\u001c\u000f\u0002\u0153\u0155\u0005",
    "\u0004\u0003\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0155\u0158\u0003",
    "\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002\u0002\u0156\u0157\u0003",
    "\u0002\u0002\u0002\u0157\u0159\u0003\u0002\u0002\u0002\u0158\u0156\u0003",
    "\u0002\u0002\u0002\u0159\u015d\u0007\u0019\u0002\u0002\u015a\u015c\u0005",
    "\u0004\u0003\u0002\u015b\u015a\u0003\u0002\u0002\u0002\u015c\u015f\u0003",
    "\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003",
    "\u0002\u0002\u0002\u015e\u0160\u0003\u0002\u0002\u0002\u015f\u015d\u0003",
    "\u0002\u0002\u0002\u0160\u0164\u0005\u000e\b\u0002\u0161\u0163\u0005",
    "\u0004\u0003\u0002\u0162\u0161\u0003\u0002\u0002\u0002\u0163\u0166\u0003",
    "\u0002\u0002\u0002\u0164\u0162\u0003\u0002\u0002\u0002\u0164\u0165\u0003",
    "\u0002\u0002\u0002\u0165\u0167\u0003\u0002\u0002\u0002\u0166\u0164\u0003",
    "\u0002\u0002\u0002\u0167\u016b\u0007\u0016\u0002\u0002\u0168\u016a\u0005",
    "\u0004\u0003\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016d\u0003",
    "\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003",
    "\u0002\u0002\u0002\u016c\u016e\u0003\u0002\u0002\u0002\u016d\u016b\u0003",
    "\u0002\u0002\u0002\u016e\u016f\u0005$\u0013\u0002\u016f\u001f\u0003",
    "\u0002\u0002\u0002\u0170\u0174\u0007\b\u0002\u0002\u0171\u0173\u0005",
    "\u0004\u0003\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0173\u0176\u0003",
    "\u0002\u0002\u0002\u0174\u0172\u0003\u0002\u0002\u0002\u0174\u0175\u0003",
    "\u0002\u0002\u0002\u0175\u0177\u0003\u0002\u0002\u0002\u0176\u0174\u0003",
    "\u0002\u0002\u0002\u0177\u017b\u0005\u001c\u000f\u0002\u0178\u017a\u0005",
    "\u0004\u0003\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u017a\u017d\u0003",
    "\u0002\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017b\u017c\u0003",
    "\u0002\u0002\u0002\u017c\u017e\u0003\u0002\u0002\u0002\u017d\u017b\u0003",
    "\u0002\u0002\u0002\u017e\u0182\u0007\u0019\u0002\u0002\u017f\u0181\u0005",
    "\u0004\u0003\u0002\u0180\u017f\u0003\u0002\u0002\u0002\u0181\u0184\u0003",
    "\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0182\u0183\u0003",
    "\u0002\u0002\u0002\u0183\u0185\u0003\u0002\u0002\u0002\u0184\u0182\u0003",
    "\u0002\u0002\u0002\u0185\u0189\u0005\u000e\b\u0002\u0186\u0188\u0005",
    "\u0004\u0003\u0002\u0187\u0186\u0003\u0002\u0002\u0002\u0188\u018b\u0003",
    "\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003",
    "\u0002\u0002\u0002\u018a\u018c\u0003\u0002\u0002\u0002\u018b\u0189\u0003",
    "\u0002\u0002\u0002\u018c\u0190\u0007\u0016\u0002\u0002\u018d\u018f\u0005",
    "\u0004\u0003\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018f\u0192\u0003",
    "\u0002\u0002\u0002\u0190\u018e\u0003\u0002\u0002\u0002\u0190\u0191\u0003",
    "\u0002\u0002\u0002\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u0190\u0003",
    "\u0002\u0002\u0002\u0193\u0194\u0005$\u0013\u0002\u0194!\u0003\u0002",
    "\u0002\u0002\u0195\u0199\u0005\u001c\u000f\u0002\u0196\u0198\u0005\u0004",
    "\u0003\u0002\u0197\u0196\u0003\u0002\u0002\u0002\u0198\u019b\u0003\u0002",
    "\u0002\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002",
    "\u0002\u0002\u019a\u019c\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002",
    "\u0002\u0002\u019c\u01a0\u0007\u0016\u0002\u0002\u019d\u019f\u0005\u0004",
    "\u0003\u0002\u019e\u019d\u0003\u0002\u0002\u0002\u019f\u01a2\u0003\u0002",
    "\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002",
    "\u0002\u0002\u01a1\u01a3\u0003\u0002\u0002\u0002\u01a2\u01a0\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\u0005$\u0013\u0002\u01a4#\u0003\u0002\u0002",
    "\u0002\u01a5\u01ab\u0005\u0014\u000b\u0002\u01a6\u01ab\u00054\u001b",
    "\u0002\u01a7\u01ab\u00058\u001d\u0002\u01a8\u01ab\u0005&\u0014\u0002",
    "\u01a9\u01ab\u0007\u001e\u0002\u0002\u01aa\u01a5\u0003\u0002\u0002\u0002",
    "\u01aa\u01a6\u0003\u0002\u0002\u0002\u01aa\u01a7\u0003\u0002\u0002\u0002",
    "\u01aa\u01a8\u0003\u0002\u0002\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002",
    "\u01ab%\u0003\u0002\u0002\u0002\u01ac\u01b0\u0007\u000b\u0002\u0002",
    "\u01ad\u01af\u0007\u001b\u0002\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002",
    "\u01af\u01b2\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002",
    "\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b3\u0003\u0002\u0002\u0002",
    "\u01b2\u01b0\u0003\u0002\u0002\u0002\u01b3\u01b7\u0005\b\u0005\u0002",
    "\u01b4\u01b6\u0007\u001b\u0002\u0002\u01b5\u01b4\u0003\u0002\u0002\u0002",
    "\u01b6\u01b9\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01bd\u0003\u0002\u0002\u0002",
    "\u01b9\u01b7\u0003\u0002\u0002\u0002\u01ba\u01be\u0005(\u0015\u0002",
    "\u01bb\u01be\u0005*\u0016\u0002\u01bc\u01be\u0005,\u0017\u0002\u01bd",
    "\u01ba\u0003\u0002\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd",
    "\u01bc\u0003\u0002\u0002\u0002\u01be\'\u0003\u0002\u0002\u0002\u01bf",
    "\u01c3\u0007\u0013\u0002\u0002\u01c0\u01c2\u0005\u0004\u0003\u0002\u01c1",
    "\u01c0\u0003\u0002\u0002\u0002\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3",
    "\u01c1\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4",
    "\u01c6\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6",
    "\u01ca\u00050\u0019\u0002\u01c7\u01c9\u0005\u0004\u0003\u0002\u01c8",
    "\u01c7\u0003\u0002\u0002\u0002\u01c9\u01cc\u0003\u0002\u0002\u0002\u01ca",
    "\u01c8\u0003\u0002\u0002\u0002\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb",
    "\u01cd\u0003\u0002\u0002\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd",
    "\u01ce\u0007\u0014\u0002\u0002\u01ce)\u0003\u0002\u0002\u0002\u01cf",
    "\u01d3\u0007\r\u0002\u0002\u01d0\u01d2\u0005\u0004\u0003\u0002\u01d1",
    "\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d5\u0003\u0002\u0002\u0002\u01d3",
    "\u01d1\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4",
    "\u01dc\u0003\u0002\u0002\u0002\u01d5\u01d3\u0003\u0002\u0002\u0002\u01d6",
    "\u01d8\u0005\"\u0012\u0002\u01d7\u01d9\u0005\u0004\u0003\u0002\u01d8",
    "\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01da",
    "\u01d8\u0003\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db",
    "\u01dd\u0003\u0002\u0002\u0002\u01dc\u01d6\u0003\u0002\u0002\u0002\u01dd",
    "\u01de\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01de",
    "\u01df\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0",
    "\u01e1\u0007\u000e\u0002\u0002\u01e1+\u0003\u0002\u0002\u0002\u01e2",
    "\u01e6\u0007\r\u0002\u0002\u01e3\u01e5\u0005\u0004\u0003\u0002\u01e4",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6",
    "\u01e4\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7",
    "\u01f1\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9",
    "\u01eb\u0005.\u0018\u0002\u01ea\u01ec\u0005\u0004\u0003\u0002\u01eb",
    "\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed",
    "\u01eb\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee",
    "\u01f0\u0003\u0002\u0002\u0002\u01ef\u01e9\u0003\u0002\u0002\u0002\u01f0",
    "\u01f3\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002\u01f1",
    "\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f4\u0003\u0002\u0002\u0002\u01f3",
    "\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f5\u0007\u000e\u0002\u0002\u01f5",
    "-\u0003\u0002\u0002\u0002\u01f6\u01fa\u0005$\u0013\u0002\u01f7\u01f9",
    "\u0007\u001b\u0002\u0002\u01f8\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fc",
    "\u0003\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fb",
    "\u0003\u0002\u0002\u0002\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc\u01fa",
    "\u0003\u0002\u0002\u0002\u01fd\u0201\u0007\u0019\u0002\u0002\u01fe\u0200",
    "\u0007\u001b\u0002\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002\u0200\u0203",
    "\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202",
    "\u0003\u0002\u0002\u0002\u0202\u0204\u0003\u0002\u0002\u0002\u0203\u0201",
    "\u0003\u0002\u0002\u0002\u0204\u0205\u0005$\u0013\u0002\u0205/\u0003",
    "\u0002\u0002\u0002\u0206\u0208\u0005\u0004\u0003\u0002\u0207\u0206\u0003",
    "\u0002\u0002\u0002\u0208\u020b\u0003\u0002\u0002\u0002\u0209\u0207\u0003",
    "\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a\u020c\u0003",
    "\u0002\u0002\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020c\u0217\u0005",
    "$\u0013\u0002\u020d\u0211\u0007\f\u0002\u0002\u020e\u0210\u0005\u0004",
    "\u0003\u0002\u020f\u020e\u0003\u0002\u0002\u0002\u0210\u0213\u0003\u0002",
    "\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002",
    "\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002",
    "\u0002\u0002\u0214\u0216\u0005$\u0013\u0002\u0215\u020d\u0003\u0002",
    "\u0002\u0002\u0216\u0219\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002",
    "\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u021d\u0003\u0002",
    "\u0002\u0002\u0219\u0217\u0003\u0002\u0002\u0002\u021a\u021c\u0005\u0004",
    "\u0003\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002",
    "\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002",
    "\u0002\u0002\u021e1\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002",
    "\u0002\u0002\u0220\u0222\u0005\u0004\u0003\u0002\u0221\u0220\u0003\u0002",
    "\u0002\u0002\u0222\u0225\u0003\u0002\u0002\u0002\u0223\u0221\u0003\u0002",
    "\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0226\u0003\u0002",
    "\u0002\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0226\u0231\u0007\u001e",
    "\u0002\u0002\u0227\u022b\u0007\f\u0002\u0002\u0228\u022a\u0005\u0004",
    "\u0003\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u022a\u022d\u0003\u0002",
    "\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002",
    "\u0002\u0002\u022c\u022e\u0003\u0002\u0002\u0002\u022d\u022b\u0003\u0002",
    "\u0002\u0002\u022e\u0230\u0007\u001e\u0002\u0002\u022f\u0227\u0003\u0002",
    "\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0237\u0003\u0002",
    "\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u0236\u0005\u0004",
    "\u0003\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0236\u0239\u0003\u0002",
    "\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002",
    "\u0002\u0002\u02383\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002",
    "\u0002\u0002\u023a\u023e\u0007\u001e\u0002\u0002\u023b\u023d\u0007\u001b",
    "\u0002\u0002\u023c\u023b\u0003\u0002\u0002\u0002\u023d\u0240\u0003\u0002",
    "\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002",
    "\u0002\u0002\u023f\u0241\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002",
    "\u0002\u0002\u0241\u0243\u0007\u000f\u0002\u0002\u0242\u0244\u00052",
    "\u001a\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002",
    "\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0007\u0010",
    "\u0002\u0002\u02465\u0003\u0002\u0002\u0002\u0247\u024b\u0007\t\u0002",
    "\u0002\u0248\u024a\u0005\u0004\u0003\u0002\u0249\u0248\u0003\u0002\u0002",
    "\u0002\u024a\u024d\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002",
    "\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024e\u0003\u0002\u0002",
    "\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024e\u0256\u0007\u001e\u0002",
    "\u0002\u024f\u0251\u0005\u0004\u0003\u0002\u0250\u024f\u0003\u0002\u0002",
    "\u0002\u0251\u0254\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002",
    "\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0255\u0003\u0002\u0002",
    "\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0255\u0257\u0007\u001e\u0002",
    "\u0002\u0256\u0252\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002",
    "\u0002\u02577\u0003\u0002\u0002\u0002\u0258\u0259\t\u0003\u0002\u0002",
    "\u02599\u0003\u0002\u0002\u0002\u025a\u025b\u0007\u0005\u0002\u0002",
    "\u025b\u025c\u0005\u0004\u0003\u0002\u025c\u0260\u0007\u001e\u0002\u0002",
    "\u025d\u025f\u0005\u0004\u0003\u0002\u025e\u025d\u0003\u0002\u0002\u0002",
    "\u025f\u0262\u0003\u0002\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002",
    "\u0260\u0261\u0003\u0002\u0002\u0002\u0261\u0263\u0003\u0002\u0002\u0002",
    "\u0262\u0260\u0003\u0002\u0002\u0002\u0263\u0264\u0007\u0019\u0002\u0002",
    "\u0264\u0265\u0005\n\u0006\u0002\u0265;\u0003\u0002\u0002\u0002\u0266",
    "\u0268\u0007\u0006\u0002\u0002\u0267\u0269\u0005\u0004\u0003\u0002\u0268",
    "\u0267\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a",
    "\u0268\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0003\u0002\u0002\u0002\u026c\u026e\u0007\u001e\u0002\u0002\u026d",
    "\u026f\u0005\u0004\u0003\u0002\u026e\u026d\u0003\u0002\u0002\u0002\u026f",
    "\u0270\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272",
    "\u0273\u0005\u0014\u000b\u0002\u0273=\u0003\u0002\u0002\u0002]AHJLS",
    "UW^`bikmpx~\u0082\u0087\u008e\u0095\u009c\u00a2\u00a5\u00ab\u00af\u00b7",
    "\u00be\u00c5\u00cc\u00d1\u00da\u00de\u00e1\u00e7\u00ed\u00f3\u00f6\u0100",
    "\u0107\u010d\u0113\u011a\u0121\u012a\u0130\u0135\u013e\u0143\u0147\u014f",
    "\u0156\u015d\u0164\u016b\u0174\u017b\u0182\u0189\u0190\u0199\u01a0\u01aa",
    "\u01b0\u01b7\u01bd\u01c3\u01ca\u01d3\u01da\u01de\u01e6\u01ed\u01f1\u01fa",
    "\u0201\u0209\u0211\u0217\u021d\u0223\u022b\u0231\u0237\u023e\u0243\u024b",
    "\u0252\u0256\u0260\u026a\u0270"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'type'", "'fn'", "'event'", "'on'", "'const'", 
                     "'let'", "'emit'", null, "'new'", null, "'{'", "'}'", 
                     "'('", "')'", "'<'", "'>'", "'['", "']'", "'.'", "'='", 
                     "'|'", "'void'" ];

var symbolicNames = [ null, "TYPE", "FN", "EVENT", "ON", "CONST", "LET", 
                      "EMIT", "BOOLCONSTANT", "NEW", "SEP", "OPENBODY", 
                      "CLOSEBODY", "OPENARGS", "CLOSEARGS", "OPENGENERIC", 
                      "CLOSEGENERIC", "OPENARRAY", "CLOSEARRAY", "METHODSEP", 
                      "EQUALS", "OR", "VOID", "TYPESEP", "NEWLINE", "WS", 
                      "STRINGCONSTANT", "NUMBERCONSTANT", "VARNAME" ];

var ruleNames =  [ "module", "blank", "types", "othertype", "typename", 
                   "typegenerics", "fulltypename", "typebody", "typeline", 
                   "functions", "functionbody", "statements", "declarations", 
                   "decname", "constdeclaration", "letdeclaration", "assignments", 
                   "assignables", "objectliterals", "arrayliteral", "typeliteral", 
                   "mapliteral", "mapline", "assignablelist", "calllist", 
                   "calls", "emits", "constants", "events", "handlers" ];

function AmmParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

AmmParser.prototype = Object.create(antlr4.Parser.prototype);
AmmParser.prototype.constructor = AmmParser;

Object.defineProperty(AmmParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

AmmParser.EOF = antlr4.Token.EOF;
AmmParser.TYPE = 1;
AmmParser.FN = 2;
AmmParser.EVENT = 3;
AmmParser.ON = 4;
AmmParser.CONST = 5;
AmmParser.LET = 6;
AmmParser.EMIT = 7;
AmmParser.BOOLCONSTANT = 8;
AmmParser.NEW = 9;
AmmParser.SEP = 10;
AmmParser.OPENBODY = 11;
AmmParser.CLOSEBODY = 12;
AmmParser.OPENARGS = 13;
AmmParser.CLOSEARGS = 14;
AmmParser.OPENGENERIC = 15;
AmmParser.CLOSEGENERIC = 16;
AmmParser.OPENARRAY = 17;
AmmParser.CLOSEARRAY = 18;
AmmParser.METHODSEP = 19;
AmmParser.EQUALS = 20;
AmmParser.OR = 21;
AmmParser.VOID = 22;
AmmParser.TYPESEP = 23;
AmmParser.NEWLINE = 24;
AmmParser.WS = 25;
AmmParser.STRINGCONSTANT = 26;
AmmParser.NUMBERCONSTANT = 27;
AmmParser.VARNAME = 28;

AmmParser.RULE_module = 0;
AmmParser.RULE_blank = 1;
AmmParser.RULE_types = 2;
AmmParser.RULE_othertype = 3;
AmmParser.RULE_typename = 4;
AmmParser.RULE_typegenerics = 5;
AmmParser.RULE_fulltypename = 6;
AmmParser.RULE_typebody = 7;
AmmParser.RULE_typeline = 8;
AmmParser.RULE_functions = 9;
AmmParser.RULE_functionbody = 10;
AmmParser.RULE_statements = 11;
AmmParser.RULE_declarations = 12;
AmmParser.RULE_decname = 13;
AmmParser.RULE_constdeclaration = 14;
AmmParser.RULE_letdeclaration = 15;
AmmParser.RULE_assignments = 16;
AmmParser.RULE_assignables = 17;
AmmParser.RULE_objectliterals = 18;
AmmParser.RULE_arrayliteral = 19;
AmmParser.RULE_typeliteral = 20;
AmmParser.RULE_mapliteral = 21;
AmmParser.RULE_mapline = 22;
AmmParser.RULE_assignablelist = 23;
AmmParser.RULE_calllist = 24;
AmmParser.RULE_calls = 25;
AmmParser.RULE_emits = 26;
AmmParser.RULE_constants = 27;
AmmParser.RULE_events = 28;
AmmParser.RULE_handlers = 29;

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ModuleContext.prototype.types = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypesContext);
    } else {
        return this.getTypedRuleContext(TypesContext,i);
    }
};

ModuleContext.prototype.constdeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstdeclarationContext);
    } else {
        return this.getTypedRuleContext(ConstdeclarationContext,i);
    }
};

ModuleContext.prototype.events = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventsContext);
    } else {
        return this.getTypedRuleContext(EventsContext,i);
    }
};

ModuleContext.prototype.handlers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlersContext);
    } else {
        return this.getTypedRuleContext(HandlersContext,i);
    }
};

ModuleContext.prototype.EOF = function() {
    return this.getToken(AmmParser.EOF, 0);
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitModule(this);
	}
};




AmmParser.ModuleContext = ModuleContext;

AmmParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, AmmParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 110;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.TYPE:
        case AmmParser.EVENT:
        case AmmParser.ON:
        case AmmParser.CONST:
        case AmmParser.NEWLINE:
        case AmmParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 63;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 60;
                    this.blank(); 
                }
                this.state = 65;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
            }

            this.state = 74;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 72;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AmmParser.TYPE:
                        this.state = 66;
                        this.types();
                        break;
                    case AmmParser.NEWLINE:
                    case AmmParser.WS:
                        this.state = 68; 
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                        	switch (_alt) {
                        	case 1:
                        		this.state = 67;
                        		this.blank();
                        		break;
                        	default:
                        		throw new antlr4.error.NoViableAltException(this);
                        	}
                        	this.state = 70; 
                        	this._errHandler.sync(this);
                        	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 76;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
            }

            this.state = 85;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 83;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AmmParser.CONST:
                        this.state = 77;
                        this.constdeclaration();
                        break;
                    case AmmParser.NEWLINE:
                    case AmmParser.WS:
                        this.state = 79; 
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                        	switch (_alt) {
                        	case 1:
                        		this.state = 78;
                        		this.blank();
                        		break;
                        	default:
                        		throw new antlr4.error.NoViableAltException(this);
                        	}
                        	this.state = 81; 
                        	this._errHandler.sync(this);
                        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 87;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
            }

            this.state = 96;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 94;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case AmmParser.EVENT:
                        this.state = 88;
                        this.events();
                        break;
                    case AmmParser.NEWLINE:
                    case AmmParser.WS:
                        this.state = 90; 
                        this._errHandler.sync(this);
                        var _alt = 1;
                        do {
                        	switch (_alt) {
                        	case 1:
                        		this.state = 89;
                        		this.blank();
                        		break;
                        	default:
                        		throw new antlr4.error.NoViableAltException(this);
                        	}
                        	this.state = 92; 
                        	this._errHandler.sync(this);
                        	_alt = this._interp.adaptivePredict(this._input,7, this._ctx);
                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 98;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
            }

            this.state = 105; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 105;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case AmmParser.ON:
                    this.state = 99;
                    this.handlers();
                    break;
                case AmmParser.NEWLINE:
                case AmmParser.WS:
                    this.state = 101; 
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                    	switch (_alt) {
                    	case 1:
                    		this.state = 100;
                    		this.blank();
                    		break;
                    	default:
                    		throw new antlr4.error.NoViableAltException(this);
                    	}
                    	this.state = 103; 
                    	this._errHandler.sync(this);
                    	_alt = this._interp.adaptivePredict(this._input,10, this._ctx);
                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 107; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.ON) | (1 << AmmParser.NEWLINE) | (1 << AmmParser.WS))) !== 0));
            break;
        case AmmParser.EOF:
            this.enterOuterAlt(localctx, 2);
            this.state = 109;
            this.match(AmmParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_blank;
    return this;
}

BlankContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankContext.prototype.constructor = BlankContext;

BlankContext.prototype.WS = function() {
    return this.getToken(AmmParser.WS, 0);
};

BlankContext.prototype.NEWLINE = function() {
    return this.getToken(AmmParser.NEWLINE, 0);
};

BlankContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterBlank(this);
	}
};

BlankContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitBlank(this);
	}
};




AmmParser.BlankContext = BlankContext;

AmmParser.prototype.blank = function() {

    var localctx = new BlankContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, AmmParser.RULE_blank);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 112;
        _la = this._input.LA(1);
        if(!(_la===AmmParser.NEWLINE || _la===AmmParser.WS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_types;
    return this;
}

TypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypesContext.prototype.constructor = TypesContext;

TypesContext.prototype.TYPE = function() {
    return this.getToken(AmmParser.TYPE, 0);
};

TypesContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypesContext.prototype.typebody = function() {
    return this.getTypedRuleContext(TypebodyContext,0);
};

TypesContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

TypesContext.prototype.othertype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OthertypeContext);
    } else {
        return this.getTypedRuleContext(OthertypeContext,i);
    }
};

TypesContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypesContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

TypesContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.OR);
    } else {
        return this.getToken(AmmParser.OR, i);
    }
};


TypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypes(this);
	}
};

TypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypes(this);
	}
};




AmmParser.TypesContext = TypesContext;

AmmParser.prototype.types = function() {

    var localctx = new TypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, AmmParser.RULE_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 114;
        this.match(AmmParser.TYPE);
        this.state = 116; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 115;
            this.blank();
            this.state = 118; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 120;
        this.typename();
        this.state = 124;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 121;
                this.blank(); 
            }
            this.state = 126;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

        this.state = 128;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.OPENGENERIC) {
            this.state = 127;
            this.typegenerics();
        }

        this.state = 131; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 130;
            this.blank();
            this.state = 133; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 163;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.OPENBODY:
            this.state = 135;
            this.typebody();
            break;
        case AmmParser.EQUALS:
            this.state = 136;
            this.match(AmmParser.EQUALS);
            this.state = 140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 137;
                this.blank();
                this.state = 142;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 143;
            this.othertype();
            this.state = 160;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 147;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                        this.state = 144;
                        this.blank();
                        this.state = 149;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 150;
                    this.match(AmmParser.OR);
                    this.state = 154;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                        this.state = 151;
                        this.blank();
                        this.state = 156;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 157;
                    this.othertype(); 
                }
                this.state = 162;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OthertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_othertype;
    return this;
}

OthertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OthertypeContext.prototype.constructor = OthertypeContext;

OthertypeContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

OthertypeContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

OthertypeContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

OthertypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterOthertype(this);
	}
};

OthertypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitOthertype(this);
	}
};




AmmParser.OthertypeContext = OthertypeContext;

AmmParser.prototype.othertype = function() {

    var localctx = new OthertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, AmmParser.RULE_othertype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 165;
        this.typename();
        this.state = 169;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 166;
                this.blank(); 
            }
            this.state = 171;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

        this.state = 173;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.OPENGENERIC) {
            this.state = 172;
            this.typegenerics();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typename;
    return this;
}

TypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypenameContext.prototype.constructor = TypenameContext;

TypenameContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

TypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypename(this);
	}
};

TypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypename(this);
	}
};




AmmParser.TypenameContext = TypenameContext;

AmmParser.prototype.typename = function() {

    var localctx = new TypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, AmmParser.RULE_typename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 175;
        this.match(AmmParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypegenericsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typegenerics;
    return this;
}

TypegenericsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypegenericsContext.prototype.constructor = TypegenericsContext;

TypegenericsContext.prototype.OPENGENERIC = function() {
    return this.getToken(AmmParser.OPENGENERIC, 0);
};

TypegenericsContext.prototype.fulltypename = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltypenameContext);
    } else {
        return this.getTypedRuleContext(FulltypenameContext,i);
    }
};

TypegenericsContext.prototype.CLOSEGENERIC = function() {
    return this.getToken(AmmParser.CLOSEGENERIC, 0);
};

TypegenericsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypegenericsContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.SEP);
    } else {
        return this.getToken(AmmParser.SEP, i);
    }
};


TypegenericsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypegenerics(this);
	}
};

TypegenericsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypegenerics(this);
	}
};




AmmParser.TypegenericsContext = TypegenericsContext;

AmmParser.prototype.typegenerics = function() {

    var localctx = new TypegenericsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, AmmParser.RULE_typegenerics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 177;
        this.match(AmmParser.OPENGENERIC);
        this.state = 181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 178;
            this.blank();
            this.state = 183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 184;
        this.fulltypename();
        this.state = 188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 185;
            this.blank();
            this.state = 190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.SEP) {
            this.state = 191;
            this.match(AmmParser.SEP);
            this.state = 195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 192;
                this.blank();
                this.state = 197;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 198;
            this.fulltypename();
            this.state = 202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 199;
                this.blank();
                this.state = 204;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 210;
        this.match(AmmParser.CLOSEGENERIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FulltypenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_fulltypename;
    return this;
}

FulltypenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltypenameContext.prototype.constructor = FulltypenameContext;

FulltypenameContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

FulltypenameContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FulltypenameContext.prototype.typegenerics = function() {
    return this.getTypedRuleContext(TypegenericsContext,0);
};

FulltypenameContext.prototype.VOID = function() {
    return this.getToken(AmmParser.VOID, 0);
};

FulltypenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterFulltypename(this);
	}
};

FulltypenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitFulltypename(this);
	}
};




AmmParser.FulltypenameContext = FulltypenameContext;

AmmParser.prototype.fulltypename = function() {

    var localctx = new FulltypenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, AmmParser.RULE_fulltypename);
    var _la = 0; // Token type
    try {
        this.state = 223;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.VARNAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 212;
            this.typename();
            this.state = 216;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 213;
                    this.blank(); 
                }
                this.state = 218;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
            }

            this.state = 220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===AmmParser.OPENGENERIC) {
                this.state = 219;
                this.typegenerics();
            }

            break;
        case AmmParser.VOID:
            this.enterOuterAlt(localctx, 2);
            this.state = 222;
            this.match(AmmParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypebodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typebody;
    return this;
}

TypebodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypebodyContext.prototype.constructor = TypebodyContext;

TypebodyContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

TypebodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

TypebodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypebodyContext.prototype.typeline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypelineContext);
    } else {
        return this.getTypedRuleContext(TypelineContext,i);
    }
};

TypebodyContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


TypebodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypebody(this);
	}
};

TypebodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypebody(this);
	}
};




AmmParser.TypebodyContext = TypebodyContext;

AmmParser.prototype.typebody = function() {

    var localctx = new TypebodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, AmmParser.RULE_typebody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.match(AmmParser.OPENBODY);
        this.state = 229;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 226;
                this.blank(); 
            }
            this.state = 231;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
        }

        this.state = 239; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 235;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(_la===AmmParser.WS) {
        		    this.state = 232;
        		    this.match(AmmParser.WS);
        		    this.state = 237;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 238;
        		this.typeline();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 241; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,35, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 243;
            this.blank();
        }

        this.state = 246;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypelineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typeline;
    return this;
}

TypelineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypelineContext.prototype.constructor = TypelineContext;

TypelineContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

TypelineContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

TypelineContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

TypelineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.NEWLINE);
    } else {
        return this.getToken(AmmParser.NEWLINE, i);
    }
};


TypelineContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypeline(this);
	}
};

TypelineContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypeline(this);
	}
};




AmmParser.TypelineContext = TypelineContext;

AmmParser.prototype.typeline = function() {

    var localctx = new TypelineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, AmmParser.RULE_typeline);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(AmmParser.VARNAME);
        this.state = 249;
        this.match(AmmParser.TYPESEP);
        this.state = 250;
        this.typename();
        this.state = 254;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 251;
                this.match(AmmParser.NEWLINE); 
            }
            this.state = 256;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_functions;
    return this;
}

FunctionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionsContext.prototype.constructor = FunctionsContext;

FunctionsContext.prototype.FN = function() {
    return this.getToken(AmmParser.FN, 0);
};

FunctionsContext.prototype.OPENARGS = function() {
    return this.getToken(AmmParser.OPENARGS, 0);
};

FunctionsContext.prototype.CLOSEARGS = function() {
    return this.getToken(AmmParser.CLOSEARGS, 0);
};

FunctionsContext.prototype.TYPESEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.TYPESEP);
    } else {
        return this.getToken(AmmParser.TYPESEP, i);
    }
};


FunctionsContext.prototype.VOID = function() {
    return this.getToken(AmmParser.VOID, 0);
};

FunctionsContext.prototype.functionbody = function() {
    return this.getTypedRuleContext(FunctionbodyContext,0);
};

FunctionsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionsContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

FunctionsContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

FunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterFunctions(this);
	}
};

FunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitFunctions(this);
	}
};




AmmParser.FunctionsContext = FunctionsContext;

AmmParser.prototype.functions = function() {

    var localctx = new FunctionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, AmmParser.RULE_functions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this.match(AmmParser.FN);
        this.state = 259; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 258;
            this.blank();
            this.state = 261; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 263;
        this.match(AmmParser.OPENARGS);
        this.state = 267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===AmmParser.VARNAME) {
            this.state = 264;
            this.match(AmmParser.VARNAME);
            this.state = 265;
            this.match(AmmParser.TYPESEP);
            this.state = 266;
            this.fulltypename();
        }

        this.state = 269;
        this.match(AmmParser.CLOSEARGS);
        this.state = 273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 270;
            this.blank();
            this.state = 275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 276;
        this.match(AmmParser.TYPESEP);
        this.state = 280;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 277;
            this.blank();
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 283;
        this.match(AmmParser.VOID);
        this.state = 287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 284;
            this.blank();
            this.state = 289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 290;
        this.functionbody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionbodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_functionbody;
    return this;
}

FunctionbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionbodyContext.prototype.constructor = FunctionbodyContext;

FunctionbodyContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

FunctionbodyContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

FunctionbodyContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

FunctionbodyContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

FunctionbodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterFunctionbody(this);
	}
};

FunctionbodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitFunctionbody(this);
	}
};




AmmParser.FunctionbodyContext = FunctionbodyContext;

AmmParser.prototype.functionbody = function() {

    var localctx = new FunctionbodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, AmmParser.RULE_functionbody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(AmmParser.OPENBODY);
        this.state = 296;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 293;
            this.blank();
            this.state = 298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 300; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 299;
            this.statements();
            this.state = 302; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.CONST) | (1 << AmmParser.LET) | (1 << AmmParser.EMIT) | (1 << AmmParser.VARNAME))) !== 0));
        this.state = 307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 304;
            this.blank();
            this.state = 309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 310;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.declarations = function() {
    return this.getTypedRuleContext(DeclarationsContext,0);
};

StatementsContext.prototype.assignments = function() {
    return this.getTypedRuleContext(AssignmentsContext,0);
};

StatementsContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

StatementsContext.prototype.emits = function() {
    return this.getTypedRuleContext(EmitsContext,0);
};

StatementsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitStatements(this);
	}
};




AmmParser.StatementsContext = StatementsContext;

AmmParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, AmmParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.state = 312;
            this.declarations();
            break;

        case 2:
            this.state = 313;
            this.assignments();
            break;

        case 3:
            this.state = 314;
            this.calls();
            break;

        case 4:
            this.state = 315;
            this.emits();
            break;

        }
        this.state = 319; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 318;
        		this.blank();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 321; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.constdeclaration = function() {
    return this.getTypedRuleContext(ConstdeclarationContext,0);
};

DeclarationsContext.prototype.letdeclaration = function() {
    return this.getTypedRuleContext(LetdeclarationContext,0);
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitDeclarations(this);
	}
};




AmmParser.DeclarationsContext = DeclarationsContext;

AmmParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, AmmParser.RULE_declarations);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case AmmParser.CONST:
            this.state = 323;
            this.constdeclaration();
            break;
        case AmmParser.LET:
            this.state = 324;
            this.letdeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_decname;
    return this;
}

DecnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecnameContext.prototype.constructor = DecnameContext;

DecnameContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

DecnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterDecname(this);
	}
};

DecnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitDecname(this);
	}
};




AmmParser.DecnameContext = DecnameContext;

AmmParser.prototype.decname = function() {

    var localctx = new DecnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, AmmParser.RULE_decname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this.match(AmmParser.VARNAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_constdeclaration;
    return this;
}

ConstdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstdeclarationContext.prototype.constructor = ConstdeclarationContext;

ConstdeclarationContext.prototype.CONST = function() {
    return this.getToken(AmmParser.CONST, 0);
};

ConstdeclarationContext.prototype.decname = function() {
    return this.getTypedRuleContext(DecnameContext,0);
};

ConstdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

ConstdeclarationContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

ConstdeclarationContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

ConstdeclarationContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

ConstdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ConstdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterConstdeclaration(this);
	}
};

ConstdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitConstdeclaration(this);
	}
};




AmmParser.ConstdeclarationContext = ConstdeclarationContext;

AmmParser.prototype.constdeclaration = function() {

    var localctx = new ConstdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, AmmParser.RULE_constdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(AmmParser.CONST);
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 330;
            this.blank();
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 336;
        this.decname();
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 337;
            this.blank();
            this.state = 342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 343;
        this.match(AmmParser.TYPESEP);
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 344;
            this.blank();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 350;
        this.fulltypename();
        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 351;
            this.blank();
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 357;
        this.match(AmmParser.EQUALS);
        this.state = 361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 358;
            this.blank();
            this.state = 363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 364;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetdeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_letdeclaration;
    return this;
}

LetdeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetdeclarationContext.prototype.constructor = LetdeclarationContext;

LetdeclarationContext.prototype.LET = function() {
    return this.getToken(AmmParser.LET, 0);
};

LetdeclarationContext.prototype.decname = function() {
    return this.getTypedRuleContext(DecnameContext,0);
};

LetdeclarationContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

LetdeclarationContext.prototype.fulltypename = function() {
    return this.getTypedRuleContext(FulltypenameContext,0);
};

LetdeclarationContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

LetdeclarationContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

LetdeclarationContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

LetdeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterLetdeclaration(this);
	}
};

LetdeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitLetdeclaration(this);
	}
};




AmmParser.LetdeclarationContext = LetdeclarationContext;

AmmParser.prototype.letdeclaration = function() {

    var localctx = new LetdeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, AmmParser.RULE_letdeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.match(AmmParser.LET);
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 367;
            this.blank();
            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 373;
        this.decname();
        this.state = 377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 374;
            this.blank();
            this.state = 379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 380;
        this.match(AmmParser.TYPESEP);
        this.state = 384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 381;
            this.blank();
            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 387;
        this.fulltypename();
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 388;
            this.blank();
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 394;
        this.match(AmmParser.EQUALS);
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 395;
            this.blank();
            this.state = 400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 401;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_assignments;
    return this;
}

AssignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentsContext.prototype.constructor = AssignmentsContext;

AssignmentsContext.prototype.decname = function() {
    return this.getTypedRuleContext(DecnameContext,0);
};

AssignmentsContext.prototype.EQUALS = function() {
    return this.getToken(AmmParser.EQUALS, 0);
};

AssignmentsContext.prototype.assignables = function() {
    return this.getTypedRuleContext(AssignablesContext,0);
};

AssignmentsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterAssignments(this);
	}
};

AssignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitAssignments(this);
	}
};




AmmParser.AssignmentsContext = AssignmentsContext;

AmmParser.prototype.assignments = function() {

    var localctx = new AssignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, AmmParser.RULE_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.decname();
        this.state = 407;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 404;
            this.blank();
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 410;
        this.match(AmmParser.EQUALS);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 411;
            this.blank();
            this.state = 416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 417;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_assignables;
    return this;
}

AssignablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablesContext.prototype.constructor = AssignablesContext;

AssignablesContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

AssignablesContext.prototype.calls = function() {
    return this.getTypedRuleContext(CallsContext,0);
};

AssignablesContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

AssignablesContext.prototype.objectliterals = function() {
    return this.getTypedRuleContext(ObjectliteralsContext,0);
};

AssignablesContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

AssignablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterAssignables(this);
	}
};

AssignablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitAssignables(this);
	}
};




AmmParser.AssignablesContext = AssignablesContext;

AmmParser.prototype.assignables = function() {

    var localctx = new AssignablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, AmmParser.RULE_assignables);
    try {
        this.state = 424;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 419;
            this.functions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 420;
            this.calls();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 421;
            this.constants();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 422;
            this.objectliterals();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 423;
            this.match(AmmParser.VARNAME);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectliteralsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_objectliterals;
    return this;
}

ObjectliteralsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectliteralsContext.prototype.constructor = ObjectliteralsContext;

ObjectliteralsContext.prototype.NEW = function() {
    return this.getToken(AmmParser.NEW, 0);
};

ObjectliteralsContext.prototype.othertype = function() {
    return this.getTypedRuleContext(OthertypeContext,0);
};

ObjectliteralsContext.prototype.arrayliteral = function() {
    return this.getTypedRuleContext(ArrayliteralContext,0);
};

ObjectliteralsContext.prototype.typeliteral = function() {
    return this.getTypedRuleContext(TypeliteralContext,0);
};

ObjectliteralsContext.prototype.mapliteral = function() {
    return this.getTypedRuleContext(MapliteralContext,0);
};

ObjectliteralsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


ObjectliteralsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterObjectliterals(this);
	}
};

ObjectliteralsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitObjectliterals(this);
	}
};




AmmParser.ObjectliteralsContext = ObjectliteralsContext;

AmmParser.prototype.objectliterals = function() {

    var localctx = new ObjectliteralsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, AmmParser.RULE_objectliterals);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 426;
        this.match(AmmParser.NEW);
        this.state = 430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 427;
            this.match(AmmParser.WS);
            this.state = 432;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 433;
        this.othertype();
        this.state = 437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 434;
            this.match(AmmParser.WS);
            this.state = 439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 443;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.state = 440;
            this.arrayliteral();
            break;

        case 2:
            this.state = 441;
            this.typeliteral();
            break;

        case 3:
            this.state = 442;
            this.mapliteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_arrayliteral;
    return this;
}

ArrayliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayliteralContext.prototype.constructor = ArrayliteralContext;

ArrayliteralContext.prototype.OPENARRAY = function() {
    return this.getToken(AmmParser.OPENARRAY, 0);
};

ArrayliteralContext.prototype.assignablelist = function() {
    return this.getTypedRuleContext(AssignablelistContext,0);
};

ArrayliteralContext.prototype.CLOSEARRAY = function() {
    return this.getToken(AmmParser.CLOSEARRAY, 0);
};

ArrayliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

ArrayliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterArrayliteral(this);
	}
};

ArrayliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitArrayliteral(this);
	}
};




AmmParser.ArrayliteralContext = ArrayliteralContext;

AmmParser.prototype.arrayliteral = function() {

    var localctx = new ArrayliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, AmmParser.RULE_arrayliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.match(AmmParser.OPENARRAY);
        this.state = 449;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 446;
                this.blank(); 
            }
            this.state = 451;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 452;
        this.assignablelist();
        this.state = 456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 453;
            this.blank();
            this.state = 458;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 459;
        this.match(AmmParser.CLOSEARRAY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_typeliteral;
    return this;
}

TypeliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeliteralContext.prototype.constructor = TypeliteralContext;

TypeliteralContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

TypeliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

TypeliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

TypeliteralContext.prototype.assignments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentsContext);
    } else {
        return this.getTypedRuleContext(AssignmentsContext,i);
    }
};

TypeliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterTypeliteral(this);
	}
};

TypeliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitTypeliteral(this);
	}
};




AmmParser.TypeliteralContext = TypeliteralContext;

AmmParser.prototype.typeliteral = function() {

    var localctx = new TypeliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, AmmParser.RULE_typeliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.match(AmmParser.OPENBODY);
        this.state = 465;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 462;
            this.blank();
            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 474; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 468;
            this.assignments();
            this.state = 470; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 469;
                this.blank();
                this.state = 472; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
            this.state = 476; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.VARNAME);
        this.state = 478;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapliteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_mapliteral;
    return this;
}

MapliteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapliteralContext.prototype.constructor = MapliteralContext;

MapliteralContext.prototype.OPENBODY = function() {
    return this.getToken(AmmParser.OPENBODY, 0);
};

MapliteralContext.prototype.CLOSEBODY = function() {
    return this.getToken(AmmParser.CLOSEBODY, 0);
};

MapliteralContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

MapliteralContext.prototype.mapline = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MaplineContext);
    } else {
        return this.getTypedRuleContext(MaplineContext,i);
    }
};

MapliteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterMapliteral(this);
	}
};

MapliteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitMapliteral(this);
	}
};




AmmParser.MapliteralContext = MapliteralContext;

AmmParser.prototype.mapliteral = function() {

    var localctx = new MapliteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, AmmParser.RULE_mapliteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.match(AmmParser.OPENBODY);
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 481;
            this.blank();
            this.state = 486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.FN) | (1 << AmmParser.BOOLCONSTANT) | (1 << AmmParser.NEW) | (1 << AmmParser.STRINGCONSTANT) | (1 << AmmParser.NUMBERCONSTANT) | (1 << AmmParser.VARNAME))) !== 0)) {
            this.state = 487;
            this.mapline();
            this.state = 489; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 488;
                this.blank();
                this.state = 491; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
            this.state = 497;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 498;
        this.match(AmmParser.CLOSEBODY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaplineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_mapline;
    return this;
}

MaplineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaplineContext.prototype.constructor = MaplineContext;

MaplineContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

MaplineContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

MaplineContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


MaplineContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterMapline(this);
	}
};

MaplineContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitMapline(this);
	}
};




AmmParser.MaplineContext = MaplineContext;

AmmParser.prototype.mapline = function() {

    var localctx = new MaplineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, AmmParser.RULE_mapline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.assignables();
        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 501;
            this.match(AmmParser.WS);
            this.state = 506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 507;
        this.match(AmmParser.TYPESEP);
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 508;
            this.match(AmmParser.WS);
            this.state = 513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 514;
        this.assignables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignablelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_assignablelist;
    return this;
}

AssignablelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignablelistContext.prototype.constructor = AssignablelistContext;

AssignablelistContext.prototype.assignables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignablesContext);
    } else {
        return this.getTypedRuleContext(AssignablesContext,i);
    }
};

AssignablelistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

AssignablelistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.SEP);
    } else {
        return this.getToken(AmmParser.SEP, i);
    }
};


AssignablelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterAssignablelist(this);
	}
};

AssignablelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitAssignablelist(this);
	}
};




AmmParser.AssignablelistContext = AssignablelistContext;

AmmParser.prototype.assignablelist = function() {

    var localctx = new AssignablelistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, AmmParser.RULE_assignablelist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 516;
            this.blank();
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 522;
        this.assignables();
        this.state = 533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.SEP) {
            this.state = 523;
            this.match(AmmParser.SEP);
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 524;
                this.blank();
                this.state = 529;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 530;
            this.assignables();
            this.state = 535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 539;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 536;
                this.blank(); 
            }
            this.state = 541;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalllistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_calllist;
    return this;
}

CalllistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalllistContext.prototype.constructor = CalllistContext;

CalllistContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.VARNAME);
    } else {
        return this.getToken(AmmParser.VARNAME, i);
    }
};


CalllistContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

CalllistContext.prototype.SEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.SEP);
    } else {
        return this.getToken(AmmParser.SEP, i);
    }
};


CalllistContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterCalllist(this);
	}
};

CalllistContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitCalllist(this);
	}
};




AmmParser.CalllistContext = CalllistContext;

AmmParser.prototype.calllist = function() {

    var localctx = new CalllistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, AmmParser.RULE_calllist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 542;
            this.blank();
            this.state = 547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 548;
        this.match(AmmParser.VARNAME);
        this.state = 559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.SEP) {
            this.state = 549;
            this.match(AmmParser.SEP);
            this.state = 553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 550;
                this.blank();
                this.state = 555;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 556;
            this.match(AmmParser.VARNAME);
            this.state = 561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 562;
            this.blank();
            this.state = 567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_calls;
    return this;
}

CallsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallsContext.prototype.constructor = CallsContext;

CallsContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

CallsContext.prototype.OPENARGS = function() {
    return this.getToken(AmmParser.OPENARGS, 0);
};

CallsContext.prototype.CLOSEARGS = function() {
    return this.getToken(AmmParser.CLOSEARGS, 0);
};

CallsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.WS);
    } else {
        return this.getToken(AmmParser.WS, i);
    }
};


CallsContext.prototype.calllist = function() {
    return this.getTypedRuleContext(CalllistContext,0);
};

CallsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterCalls(this);
	}
};

CallsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitCalls(this);
	}
};




AmmParser.CallsContext = CallsContext;

AmmParser.prototype.calls = function() {

    var localctx = new CallsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, AmmParser.RULE_calls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        this.match(AmmParser.VARNAME);
        this.state = 572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.WS) {
            this.state = 569;
            this.match(AmmParser.WS);
            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 575;
        this.match(AmmParser.OPENARGS);
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.NEWLINE) | (1 << AmmParser.WS) | (1 << AmmParser.VARNAME))) !== 0)) {
            this.state = 576;
            this.calllist();
        }

        this.state = 579;
        this.match(AmmParser.CLOSEARGS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_emits;
    return this;
}

EmitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmitsContext.prototype.constructor = EmitsContext;

EmitsContext.prototype.EMIT = function() {
    return this.getToken(AmmParser.EMIT, 0);
};

EmitsContext.prototype.VARNAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(AmmParser.VARNAME);
    } else {
        return this.getToken(AmmParser.VARNAME, i);
    }
};


EmitsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EmitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterEmits(this);
	}
};

EmitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitEmits(this);
	}
};




AmmParser.EmitsContext = EmitsContext;

AmmParser.prototype.emits = function() {

    var localctx = new EmitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, AmmParser.RULE_emits);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(AmmParser.EMIT);
        this.state = 585;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 582;
            this.blank();
            this.state = 587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 588;
        this.match(AmmParser.VARNAME);
        this.state = 596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 592;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
                this.state = 589;
                this.blank();
                this.state = 594;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 595;
            this.match(AmmParser.VARNAME);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_constants;
    return this;
}

ConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantsContext.prototype.constructor = ConstantsContext;

ConstantsContext.prototype.NUMBERCONSTANT = function() {
    return this.getToken(AmmParser.NUMBERCONSTANT, 0);
};

ConstantsContext.prototype.STRINGCONSTANT = function() {
    return this.getToken(AmmParser.STRINGCONSTANT, 0);
};

ConstantsContext.prototype.BOOLCONSTANT = function() {
    return this.getToken(AmmParser.BOOLCONSTANT, 0);
};

ConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterConstants(this);
	}
};

ConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitConstants(this);
	}
};




AmmParser.ConstantsContext = ConstantsContext;

AmmParser.prototype.constants = function() {

    var localctx = new ConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, AmmParser.RULE_constants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << AmmParser.BOOLCONSTANT) | (1 << AmmParser.STRINGCONSTANT) | (1 << AmmParser.NUMBERCONSTANT))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_events;
    return this;
}

EventsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventsContext.prototype.constructor = EventsContext;

EventsContext.prototype.EVENT = function() {
    return this.getToken(AmmParser.EVENT, 0);
};

EventsContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

EventsContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

EventsContext.prototype.TYPESEP = function() {
    return this.getToken(AmmParser.TYPESEP, 0);
};

EventsContext.prototype.typename = function() {
    return this.getTypedRuleContext(TypenameContext,0);
};

EventsContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterEvents(this);
	}
};

EventsContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitEvents(this);
	}
};




AmmParser.EventsContext = EventsContext;

AmmParser.prototype.events = function() {

    var localctx = new EventsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, AmmParser.RULE_events);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(AmmParser.EVENT);
        this.state = 601;
        this.blank();
        this.state = 602;
        this.match(AmmParser.VARNAME);
        this.state = 606;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===AmmParser.NEWLINE || _la===AmmParser.WS) {
            this.state = 603;
            this.blank();
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 609;
        this.match(AmmParser.TYPESEP);
        this.state = 610;
        this.typename();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HandlersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = AmmParser.RULE_handlers;
    return this;
}

HandlersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlersContext.prototype.constructor = HandlersContext;

HandlersContext.prototype.ON = function() {
    return this.getToken(AmmParser.ON, 0);
};

HandlersContext.prototype.VARNAME = function() {
    return this.getToken(AmmParser.VARNAME, 0);
};

HandlersContext.prototype.functions = function() {
    return this.getTypedRuleContext(FunctionsContext,0);
};

HandlersContext.prototype.blank = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlankContext);
    } else {
        return this.getTypedRuleContext(BlankContext,i);
    }
};

HandlersContext.prototype.enterRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.enterHandlers(this);
	}
};

HandlersContext.prototype.exitRule = function(listener) {
    if(listener instanceof AmmListener ) {
        listener.exitHandlers(this);
	}
};




AmmParser.HandlersContext = HandlersContext;

AmmParser.prototype.handlers = function() {

    var localctx = new HandlersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, AmmParser.RULE_handlers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(AmmParser.ON);
        this.state = 614; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 613;
            this.blank();
            this.state = 616; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 618;
        this.match(AmmParser.VARNAME);
        this.state = 620; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 619;
            this.blank();
            this.state = 622; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===AmmParser.NEWLINE || _la===AmmParser.WS);
        this.state = 624;
        this.functions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.AmmParser = AmmParser;
