on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  ubuntu:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Build alan app
      run: make

    - name: Generate Alan tar.gz
      run: cd ./avm/target/release && tar -czf /tmp/alan-ubuntu.tar.gz alan

    - name: Upload Alan tar.gz
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: /tmp/alan-ubuntu.tar.gz
        asset_name: alan-ubuntu.tar.gz

    - name: Generate Alan Debian package
      run: |
        sudo apt install checkinstall -y
        alanversion=$(echo ${{github.ref}} | sed "s/refs\/tags\/v//")
        echo "Alan Programming Language Compiler and Runtime\n\n" | sudo checkinstall --install=no -D --pkgversion=${alanversion} --pkglicense=AGPL --maintainer=hello@alantechnologies.com --pkggroup="Alan Technologies, Inc" --nodoc --deldesc=yes --delspec=yes --backup=no
        cp ./alan_${alanversion}-1_amd64.deb /tmp/alan_amd64.deb

    - name: Upload Alan Debian package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: /tmp/alan_amd64.deb
        asset_name: alan_amd64.deb

  windows:
    runs-on: windows-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    # The AVM requires openssl dev files to build now, and apparently the rust openssl code can auto-acquire it through vcpkg, so set that up
    - name: Set up vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg
        cd vcpkg && bootstrap-vcpkg.bat && vcpkg integrate install && vcpkg install openssl --triplet x64-windows-static-md

    - name: Build alan app
      run: make

    - name: Generate Alan zip
      run: Compress-Archive -Path "$(Join-Path (Get-Location).Path '\\avm\\target\\release\\alan.exe')" -DestinationPath "$(Join-Path (Get-Location).Path 'alan-windows.zip')"

    - name: Upload Alan zip
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ./alan-windows.zip
        asset_name: alan-windows.zip

  macos:
    runs-on: macos-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Build alan app
      run: make

    - name: Generate Alan tar.gz
      run: |
        brew install gnu-tar
        cd ./avm/target/release && gtar -czf /tmp/alan-macos.tar.gz alan

    - name: Upload Alan tar.gz
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: /tmp/alan-macos.tar.gz
        asset_name: alan-macos.tar.gz

    - name: Update homebrew
      run: |
        alanversion=$(echo ${{github.ref}} | sed "s/refs\/tags\///")
        [[ $alanversion != *'beta'* ]] && \
        curl \
        --fail \
        -XPOST \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Content-Type: application/json" \
        -H "authorization: token ${{secrets.AUTOPUBLISH}}" \
        https://api.github.com/repos/alantech/homebrew-core/actions/workflows/update.yml/dispatches \
        -d '{"ref": "main", "inputs": {"alan_version": "'"$alanversion"'"}}' \
        || echo "Prerelease. Do not update homebrew"
