/**
 * The Alan root scope. The functions and types it binds from Rust are either part of the standard
 * library, or are defined in the sibling root.rs file
 **/

// Integer-related bindings
export type i8 binds i8;
export type Result<i8> binds Result_i8;
export fn ok(i: i8): Result<i8> binds alan_ok;
export fn getOr(r: Result<i8>, default: i8): i8 binds get_or_i8;
export fn i8(i: i64): i8 binds i64toi8;
export fn add(a: i8, b: i8): Result<i8> binds addi8;
export fn add(a: Result<i8>, b: Result<i8>): Result<i8> binds addi8_result;
export fn add(a: i8, b: Result<i8>): Result<i8> = add(a.ok(), b);
export fn add(a: Result<i8>, b: i8): Result<i8> = add(a, b.ok());
export fn sub(a: i8, b: i8): Result<i8> binds subi8;
export fn sub(a: Result<i8>, b: Result<i8>): Result<i8> binds subi8_result;
export fn sub(a: i8, b: Result<i8>): Result<i8> = sub(a.ok(), b);
export fn sub(a: Result<i8>, b: i8): Result<i8> = sub(a, b.ok());
export fn mul(a: i8, b: i8): Result<i8> binds muli8;
export fn mul(a: Result<i8>, b: Result<i8>): Result<i8> binds muli8_result;
export fn mul(a: i8, b: Result<i8>): Result<i8> = mul(a.ok(), b);
export fn mul(a: Result<i8>, b: i8): Result<i8> = mul(a, b.ok());
export fn div(a: i8, b: i8): Result<i8> binds divi8;
export fn div(a: Result<i8>, b: Result<i8>): Result<i8> binds divi8_result;
export fn div(a: i8, b: Result<i8>): Result<i8> = div(a.ok(), b);
export fn div(a: Result<i8>, b: i8): Result<i8> = div(a, b.ok());
export fn mod(a: i8, b: i8): Result<i8> binds modi8;
export fn mod(a: Result<i8>, b: Result<i8>): Result<i8> binds modi8_result;
export fn mod(a: i8, b: Result<i8>): Result<i8> = mod(a.ok(), b);
export fn mod(a: Result<i8>, b: i8): Result<i8> = mod(a, b.ok());
export fn pow(a: i8, b: i8): Result<i8> binds powi8;
export fn pow(a: Result<i8>, b: Result<i8>): Result<i8> binds powi8_result;
export fn pow(a: i8, b: Result<i8>): Result<i8> = pow(a.ok(), b);
export fn pow(a: Result<i8>, b: i8): Result<i8> = pow(a, b.ok());
export fn min(a: i8, b: i8): i8 binds mini8;
export fn min(a: Result<i8>, b: Result<i8>): Result<i8> binds mini8_result;
export fn min(a: i8, b: Result<i8>): Result<i8> = min(a.ok(), b);
export fn min(a: Result<i8>, b: i8): Result<i8> = min(a, b.ok());
export fn max(a: i8, b: i8): i8 binds maxi8;
export fn max(a: Result<i8>, b: Result<i8>): Result<i8> binds maxi8_result;
export fn max(a: i8, b: Result<i8>): Result<i8> = max(a.ok(), b);
export fn max(a: Result<i8>, b: i8): Result<i8> = max(a, b.ok());
export type i16 binds i16;
export fn i16(i: i64): i16 binds i64toi16;
export fn add(a: i16, b: i16): Result<i16> binds addi16;
export fn sub(a: i16, b: i16): Result<i16> binds subi16;
export fn mul(a: i16, b: i16): Result<i16> binds muli16;
export fn div(a: i16, b: i16): Result<i16> binds divi16;
export fn mod(a: i16, b: i16): Result<i16> binds modi16;
export fn pow(a: i16, b: i16): Result<i16> binds powi16;
export fn min(a: i16, b: i16): i16 binds mini16;
export fn max(a: i16, b: i16): i16 binds maxi16;
export type i32 binds i32;
export fn i32(i: i64): i32 binds i64toi32;
export fn add(a: i32, b: i32): Result<i32> binds addi32;
export fn sub(a: i32, b: i32): Result<i32> binds subi32;
export fn mul(a: i32, b: i32): Result<i32> binds muli32;
export fn div(a: i32, b: i32): Result<i32> binds divi32;
export fn mod(a: i32, b: i32): Result<i32> binds modi32;
export fn pow(a: i32, b: i32): Result<i32> binds powi32;
export fn min(a: i32, b: i32): i32 binds mini32;
export fn max(a: i32, b: i32): i32 binds maxi32;
export type i64 binds i64;
export type Result<i64> binds Result_i64;
export fn ok(i: i64): Result<i64> binds alan_ok;
export fn getOr(r: Result<i64>, default: i64): i64 binds get_or_i64;
export fn i64(i: i64): i64 = i;
export fn add(a: i64, b: i64): Result<i64> binds addi64;
export fn add(a: Result<i64>, b: Result<i64>): Result<i64> binds addi64_result;
export fn add(a: i64, b: Result<i64>): Result<i64> = add(a.ok(), b);
export fn add(a: Result<i64>, b: i64): Result<i64> = add(a, b.ok());
export fn sub(a: i64, b: i64): Result<i64> binds subi64;
export fn sub(a: Result<i64>, b: Result<i64>): Result<i64> binds subi64_result;
export fn sub(a: i64, b: Result<i64>): Result<i64> = sub(a.ok(), b);
export fn sub(a: Result<i64>, b: i64): Result<i64> = sub(a, b.ok());
export fn mul(a: i64, b: i64): Result<i64> binds muli64;
export fn mul(a: Result<i64>, b: Result<i64>): Result<i64> binds muli64_result;
export fn mul(a: i64, b: Result<i64>): Result<i64> = mul(a.ok(), b);
export fn mul(a: Result<i64>, b: i64): Result<i64> = mul(a, b.ok());
export fn div(a: i64, b: i64): Result<i64> binds divi64;
export fn div(a: Result<i64>, b: Result<i64>): Result<i64> binds divi64_result;
export fn div(a: i64, b: Result<i64>): Result<i64> = div(a.ok(), b);
export fn div(a: Result<i64>, b: i64): Result<i64> = div(a, b.ok());
export fn mod(a: i64, b: i64): Result<i64> binds modi64;
export fn mod(a: Result<i64>, b: Result<i64>): Result<i64> binds modi64_result;
export fn mod(a: i64, b: Result<i64>): Result<i64> = mod(a.ok(), b);
export fn mod(a: Result<i64>, b: i64): Result<i64> = mod(a, b.ok());
export fn pow(a: i64, b: i64): Result<i64> binds powi64;
export fn pow(a: Result<i64>, b: Result<i64>): Result<i64> binds powi64_result;
export fn pow(a: i64, b: Result<i64>): Result<i64> = pow(a.ok(), b);
export fn pow(a: Result<i64>, b: i64): Result<i64> = pow(a, b.ok());
export fn min(a: i64, b: i64): i64 binds mini64;
export fn min(a: Result<i64>, b: Result<i64>): Result<i64> binds mini64_result;
export fn min(a: i64, b: Result<i64>): Result<i64> = min(a.ok(), b);
export fn min(a: Result<i64>, b: i64): Result<i64> = min(a, b.ok());
export fn max(a: i64, b: i64): i64 binds maxi64;
export fn max(a: Result<i64>, b: Result<i64>): Result<i64> binds maxi64_result;
export fn max(a: i64, b: Result<i64>): Result<i64> = max(a.ok(), b);
export fn max(a: Result<i64>, b: i64): Result<i64> = max(a, b.ok());

// Process exit-related bindings
export type ExitCode binds std::process::ExitCode;
export fn ExitCode(e: i8): ExitCode binds to_exit_code_i8;
export fn ExitCode(e: i16): ExitCode = ExitCode(e.i8());
export fn ExitCode(e: i32): ExitCode = ExitCode(e.i8());
export fn ExitCode(e: i64): ExitCode = ExitCode(e.i8());
export fn getOrExit(a: Result<i8>): i8 binds get_or_exit; // TODO: Support real generics
export fn getOrExit(a: Result<i16>): i16 binds get_or_exit; // TODO: Support real generics
export fn getOrExit(a: Result<i32>): i32 binds get_or_exit; // TODO: Support real generics
export fn getOrExit(a: Result<i64>): i64 binds get_or_exit; // TODO: Support real generics

// Stdout/stderr-related bindings
export type String binds String;
export fn concat(a: String, b: String): String binds string_concat;
export fn print(str: String) binds println;
export fn print(i: i8) binds println;
export fn print(i: i16) binds println;
export fn print(i: Result<i16>) binds println_result;
export fn print(i: i32) binds println;
export fn print(i: Result<i32>) binds println_result;
export fn print(i: i64) binds println;
export fn print(i: Result<i64>) binds println_result;

export event stdout: String;
fn toStdout(strn: String) binds stdout;
on stdout toStdout;

// Thread-related bindings
export fn wait(t: i64) binds wait;

// Time-related bindings
export type Instant binds std::time::Instant;
export fn now(): Instant binds now;
export type Duration binds std::time::Duration;
export fn elapsed(i: Instant): Duration binds elapsed;
export fn print(d: Duration) binds print_duration;

// Vector-related bindings
export type Vec<i64> binds Vec<i64>;
export type Vec<Result<i64>> binds Vec<Result_i64>;
export fn filled(i: i64, l: i64): Vec<i64> binds filled;
export fn filled(r: Result<i64>, l: i64): Vec<Result<i64>> binds filled;
export fn print(v: Vec<i64>) binds print_vec;
export fn print(v: Vec<Result<i64>>) binds print_vec_result;
export fn map(v: Vec<i64>, m: function): Vec<Result<i64>> binds map_onearg; // TODO: This is terrible

// Built-in operator definitions
export infix add as + precedence 2;
// export infix concat as + precedence 2;
export infix sub as - precedence 2;
// export prefix negate as - precedence 1;
export infix mul as * precedence 3;
// export infix repeat as * precedence 3;
export infix div as / precedence 3;
// export infix split as / precedence 3;
export infix mod as % precedence 3;
// export infix template as % precedence 3;
export infix pow as ** precedence 4;