/**
 * The Alan root scope. The functions and types it binds from Rust are either part of the standard
 * library, or are defined in the sibling root.rs file
 **/

/// Type system setup

// Declaration of the types the compiler-time type system is built on
export ctype Type; // Any kind of concrete type
export ctype Generic; // Any type that is a generic type (not yet realized into a concrete type)
export ctype Bound; // A direct reference into the platform language's type system equivalent to a concrete type
export ctype BoundGeneric; // A direct reference into the platform language's generic type system
export ctype Int; // An integer used *to define a type*, like the length of a fixed array
export ctype Float; // A float used to define a type. I have no idea why you'd want this, yet
export ctype Bool; // A bool used to define a type. Heavily used for conditional compilation
export ctype String; // A string used to define a type. Useful for conditional inclusion of files/code
export ctype Group{G}; // A grouping of type statements `()`. Useful to allow for tuples of tuples
export ctype Function{I, O}; // A function type, indicating the input and output of the function
export ctype Tuple{A, B}; // A tuple of two (or more) types in a single compound type
export ctype Field{L, V}; // Labeling a type with a property name. Useful to turn tuples into structs
export ctype Either{A, B}; // An either type, allowing the value to be from *one* of the specified types, kinda like Rust enums
export ctype AnyOf{A, B}; // The AnyOf type is kinda like a Tuple, in that all sub-types are present, but it only *resolves* into one of these types above it. Useful for choosing the "best" integer, or a particular function by name.
export ctype Buffer{T, S}; // A buffer type, a pre-allocated, fixed-length array of the specified type the specified amount
export ctype Array{T}; // An array type, a variable-length array of the specified type the specified amount. This would usually be an stdlib type built in the language itself, but we're just going to re-use the one in the platform language

// The following `ctype`s don't represent data but instead represent transforms that convert into one of the many ctypes above. (I did not expect to need so many of them.) I was originally thinking of making these `cfn` functions, but I don't think the distinction is useful or something users need to worry about, especially as the latter half of the above ctypes are "function-like" so these are marked as `ctype`s, too
export ctype Fail{M}; // A special type that if ever encountered at compile time causes the compilation to fail with the specified error message. Useful with conditional types
export ctype Add{A, B}; // Combines the Int or Float types together at compile time into a new Int or Float. Fails if an Int and Float are mixed.
export ctype Sub{A, B}; // Same, but subtracts them
export ctype Mul{A, B}; // Multiplication
export ctype Div{A, B}; // Division
export ctype Mod{A, B}; // Modulus (remainder)
export ctype Pow{A, B}; // Exponentiation/Power
export ctype Min{A, B}; // Minimum value of the two
export ctype Max{A, B}; // Maximum value of the two
export ctype Neg{A}; // Negate the value
export ctype Len{A}; // Returns the length of the input type in terms of the number of elements it contains, which is most useful for Buffers, Tuples, and Either, causes a compiler failure for Arrays, and returns 1 for everything else
export ctype Size{T}; // Returns the size in bytes of the type in question, if possible, causing a compiler failure otherwise.
export ctype FileStr{F}; // Read a file and return a string constant, useful for including large strings from a separate, nearby file, or fails if it doesn't exist
export ctype Env{K}; // Read an environment variable at compile time and return a string of the value. Returns an empty string if the key doesn't exist. Intended to be used with...
export ctype EnvExists{K}; // Returns a boolean if the environment variable key exists at compile time, and...
export ctype If{C, A, B}; // A conditional type, if C is true, resolves to A, otherwise to B. There's also a simpler version...
export ctype If{C, T}; // That expects a two-type tuple and extracts the first tuple type for true and the second for false, which can be bound to symbolic syntax
export ctype Env{K, D}; // Finally, since the majority of the time this is what you'd want, this variant of `Env` takes a default value to use when the key does not exist, making this another conditional type
export ctype And{A, B}; // Performs a boolean or bitwise AND on the inputs, depending on type
export ctype Or{A, B}; // Performs a boolean or bitwise OR on the inputs
export ctype Xor{A, B}; // Performs a boolean or bitwise XOR on the inputs
export ctype Not{B}; // Inverts the boolean provided
export ctype Nand{A, B}; // Performs a boolean or bitwise NAND on the inputs
export ctype Nor{A, B}; // Performs a boolean or bitwise NOR on the inputs
export ctype Xnor{A, B}; // Performs a boolean or bitwise XNOR on the inputs (same as EQ for booleans)
export ctype Eq{A, B}; // Returns true if the two types are the same (or are the same int, float, bool, or string), false otherwise
export ctype Neq{A, B}; // Returns true if the two types are difference
export ctype Lt{A, B}; // Returns true if A is less than B (and are an int or float)
export ctype Lte{A, B}; // Returns true if A is less than or equal to B
export ctype Gt{A, B}; // Returns true if A is greater than B
export ctype Gte{A, B}; // Returns true if A is greater than or equal to B

// Defining derived types
export type void = ();
export type Error binds AlanError;
export type Fallible{T} = Either{T, Error};
export type Maybe{T} = Either{T, ()};
export type Test = Eq{Env{"ALAN_TARGET"}, "test"};
export type Release = Eq{Env{"ALAN_TARGET"}, "release"};
export type Debug = Eq{Env{"ALAN_TARGET"}, "debug"};

// Defining the operators in the type system
export type infix Function as -> precedence 3; // I -> O, where I is the input and O is the output. With Tuples and Fields you can reconstruct arguments for functions.
export type infix Tuple as , precedence 0; // A, B, C, ... The tuple type combines with other tuple types to become a larger tuple type. To have a tuple of tuples, you need to `Group` the inner tuple, eg `(a, b), c`
export type infix Field as : precedence 1; // Foo: Bar, let's you specify a property access label for the type, useful for syntactic sugar on a tuple type and the Either type (eventually).
export type infix Either as | precedence 0; // A | B, the type has a singular value from only one of the types at once. `Result` is just `Either{T, Error}` and `Option` is just `Either{T, ()}` (or `Either{T, void}`, however we want to represent it, also might go with `Fallible` and `Maybe` instead of `Result` and `Option` as those feel more descriptive of what they are.
export type infix AnyOf as & precedence 0; // A & B, which can be passed to a function that takes A or B as necessary.
export type infix Buffer as [ precedence 2; // Technically allows `Foo[3` by itself to be valid syntax, but...
export type postfix Group as ] precedence 2; // Technically not necessary, but allows for `Foo[3]` to do the "right thing" and become a buffer of size 3, with a singular useless Group being wrapped around it (and then unwrapped on type generation). The only "bad" thing here is `Group` gets special behavior, matching the `(...)` syntax, so there's two ways to invoke a Group via symbols.
export type postfix Array as [] precedence 4; // Allows `Foo[]` to do the right thing
export type postfix Maybe as ? precedence 4; // Allows `Foo?` for nullable types. Should this have a precedence of 5?
export type postfix Fallible as ! precedence 4; // Allows `Foo!` for fallible types. Same question on the precedence.
export type infix Add as + precedence 2;
export type infix Sub as - precedence 2;
export type infix Mul as * precedence 3;
export type infix Div as / precedence 3;
export type infix Mod as % precedence 3;
export type infix Pow as ** precedence 4;
export type infix If as ?? precedence 1; // C puts this kind of thing as a very high precedence. I'm not sure if I want to follow it. I feel like that would force grouping parens everywhere.
export type infix And as && precedence 3;
export type infix Or as || precedence 2;
export type infix Xor as ^ precedence 2;
export type prefix Not as ! precedence 4; // TODO: Do we want `!` to mean `Not` or `Result` depending on where it's placed syntactically? Seems easily ambiguous
export type infix Nand as !& precedence 3;
export type infix Nor as !| precedence 2;
export type infix Xnor as !^ precedence 2;
export type infix Eq as == precedence 1;
export type infix Neq as != precedence 1;
export type infix Lt as < precedence 1;
export type infix Lte as <= precedence 1;
export type infix Gt as > precedence 1;
export type infix Gte as >= precedence 1;

export type Result{T} binds Result<T, AlanError>; // TODO: Replace `Result` with `Fallible`

// Binding the integer types
export type i8 binds i8;
export type i16 binds i16;
export type i32 binds i32;
export type i64 binds i64;

// Binding the float types
export type f32 binds f32;
export type f64 binds f64;

// Binding the string types
export type string binds String;

// Binding the boolean types
export type bool binds bool;

// Binding the exit code type
export type ExitCode binds std::process::ExitCode;

// Binding the time types
export type Instant binds std::time::Instant;
export type Duration binds std::time::Duration;

/// Integer-related functions and function bindings
export fn ok(i: i8) -> Result{i8} binds alan_ok;
export fn getOr(r: Result{i8}, default: i8) -> i8 binds get_or_i8;
export fn i8(i: i8) -> i8 = i;
export fn i8(i: i16) -> i8 binds i16toi8;
export fn i8(i: i32) -> i8 binds i32toi8;
export fn i8(i: i64) -> i8 binds i64toi8;
export fn i8(f: f32) -> i8 binds f32toi8;
export fn i8(f: f64) -> i8 binds f64toi8;
export fn i8(s: string) -> Result{i8} binds stringtoi8;
export fn add(a: i8, b: i8) -> i8 binds addi8;
export fn sub(a: i8, b: i8) -> i8 binds subi8;
export fn mul(a: i8, b: i8) -> i8 binds muli8;
export fn div(a: i8, b: i8) -> i8 binds divi8;
export fn mod(a: i8, b: i8) -> i8 binds modi8;
export fn pow(a: i8, b: i8) -> i8 binds powi8;
export fn min(a: i8, b: i8) -> i8 binds mini8;
export fn max(a: i8, b: i8) -> i8 binds maxi8;
export fn neg(a: i8) -> i8 binds negi8;
export fn and(a: i8, b: i8) -> i8 binds andi8;
export fn or(a: i8, b: i8) -> i8 binds ori8;
export fn xor(a: i8, b: i8) -> i8 binds xori8;
export fn not(a: i8) -> i8 binds noti8;
export fn nand(a: i8, b: i8) -> i8 binds nandi8;
export fn nor(a: i8, b: i8) -> i8 binds nori8;
export fn xnor(a: i8, b: i8) -> i8 binds xnori8;
export fn eq(a: i8, b: i8) -> bool binds eqi8;
export fn neq(a: i8, b: i8) -> bool binds neqi8;
export fn lt(a: i8, b: i8) -> bool binds lti8;
export fn lte(a: i8, b: i8) -> bool binds ltei8;
export fn gt(a: i8, b: i8) -> bool binds gti8;
export fn gte(a: i8, b: i8) -> bool binds gtei8;
export fn shl(a: i8, b: i8) -> i8 binds shli8;
export fn shr(a: i8, b: i8) -> i8 binds shri8;
export fn wrl(a: i8, b: i8) -> i8 binds wrli8;
export fn wrr(a: i8, b: i8) -> i8 binds wrri8;

export fn ok(i: i16) -> Result{i16} binds alan_ok;
export fn getOr(r: Result{i16}, default: i16) -> i16 binds get_or_i16;
export fn i16(i: i8) -> i16 binds i8toi16;
export fn i16(i: i16) -> i16 = i;
export fn i16(i: i32) -> i16 binds i32toi16;
export fn i16(i: i64) -> i16 binds i64toi16;
export fn i16(f: f32) -> i16 binds f32toi16;
export fn i16(f: f64) -> i16 binds f64toi16;
export fn i16(s: string) -> Result{i16} binds stringtoi16;
export fn add(a: i16, b: i16) -> i16 binds addi16;
export fn sub(a: i16, b: i16) -> i16 binds subi16;
export fn mul(a: i16, b: i16) -> i16 binds muli16;
export fn div(a: i16, b: i16) -> i16 binds divi16;
export fn mod(a: i16, b: i16) -> i16 binds modi16;
export fn pow(a: i16, b: i16) -> i16 binds powi16;
export fn min(a: i16, b: i16) -> i16 binds mini16;
export fn max(a: i16, b: i16) -> i16 binds maxi16;
export fn neg(a: i16) -> i16 binds negi16;
export fn and(a: i16, b: i16) -> i16 binds andi16;
export fn or(a: i16, b: i16) -> i16 binds ori16;
export fn xor(a: i16, b: i16) -> i16 binds xori16;
export fn not(a: i16) -> i16 binds noti16;
export fn nand(a: i16, b: i16) -> i16 binds nandi16;
export fn nor(a: i16, b: i16) -> i16 binds nori16;
export fn xnor(a: i16, b: i16) -> i16 binds xnori16;
export fn eq(a: i16, b: i16) -> bool binds eqi16;
export fn neq(a: i16, b: i16) -> bool binds neqi16;
export fn lt(a: i16, b: i16) -> bool binds lti16;
export fn lte(a: i16, b: i16) -> bool binds ltei16;
export fn gt(a: i16, b: i16) -> bool binds gti16;
export fn gte(a: i16, b: i16) -> bool binds gtei16;
export fn shl(a: i16, b: i16) -> i16 binds shli16;
export fn shr(a: i16, b: i16) -> i16 binds shri16;
export fn wrl(a: i16, b: i16) -> i16 binds wrli16;
export fn wrr(a: i16, b: i16) -> i16 binds wrri16;

export fn ok(i: i32) -> Result{i32} binds alan_ok;
export fn getOr(r: Result{i32}, default: i32) -> i32 binds get_or_i32;
export fn i32(i: i8) -> i32 binds i8toi32;
export fn i32(i: i16) -> i32 binds i16toi32;
export fn i32(i: i32) -> i32 = i;
export fn i32(i: i64) -> i32 binds i64toi32;
export fn i32(f: f32) -> i32 binds f32toi32;
export fn i32(f: f64) -> i32 binds f64toi32;
export fn i32(s: string) -> Result{i32} binds stringtoi32;
export fn add(a: i32, b: i32) -> i32 binds addi32;
export fn sub(a: i32, b: i32) -> i32 binds subi32;
export fn mul(a: i32, b: i32) -> i32 binds muli32;
export fn div(a: i32, b: i32) -> i32 binds divi32;
export fn mod(a: i32, b: i32) -> i32 binds modi32;
export fn pow(a: i32, b: i32) -> i32 binds powi32;
export fn min(a: i32, b: i32) -> i32 binds mini32;
export fn max(a: i32, b: i32) -> i32 binds maxi32;
export fn neg(a: i32) -> i32 binds negi32;
export fn and(a: i32, b: i32) -> i32 binds andi32;
export fn or(a: i32, b: i32) -> i32 binds ori32;
export fn xor(a: i32, b: i32) -> i32 binds xori32;
export fn not(a: i32) -> i32 binds noti32;
export fn nand(a: i32, b: i32) -> i32 binds nandi32;
export fn nor(a: i32, b: i32) -> i32 binds nori32;
export fn xnor(a: i32, b: i32) -> i32 binds xnori32;
export fn eq(a: i32, b: i32) -> bool binds eqi32;
export fn neq(a: i32, b: i32) -> bool binds neqi32;
export fn lt(a: i32, b: i32) -> bool binds lti32;
export fn lte(a: i32, b: i32) -> bool binds ltei32;
export fn gt(a: i32, b: i32) -> bool binds gti32;
export fn gte(a: i32, b: i32) -> bool binds gtei32;
export fn shl(a: i32, b: i32) -> i32 binds shli32;
export fn shr(a: i32, b: i32) -> i32 binds shri32;
export fn wrl(a: i32, b: i32) -> i32 binds wrli32;
export fn wrr(a: i32, b: i32) -> i32 binds wrri32;

export fn ok(i: i64) -> Result{i64} binds alan_ok;
export fn getOr(r: Result{i64}, default: i64) -> i64 binds get_or_i64;
export fn i64(i: i8) -> i64 binds i8toi64;
export fn i64(i: i16) -> i64 binds i16toi64;
export fn i64(i: i32) -> i64 binds i32toi64;
export fn i64(i: i64) -> i64 = i;
export fn i64(f: f32) -> i64 binds f32toi64;
export fn i64(f: f64) -> i64 binds f64toi64;
export fn i64(s: string) -> Result{i64} binds stringtoi64;
export fn add(a: i64, b: i64) -> i64 binds addi64;
export fn sub(a: i64, b: i64) -> i64 binds subi64;
export fn mul(a: i64, b: i64) -> i64 binds muli64;
export fn div(a: i64, b: i64) -> i64 binds divi64;
export fn mod(a: i64, b: i64) -> i64 binds modi64;
export fn pow(a: i64, b: i64) -> i64 binds powi64;
export fn min(a: i64, b: i64) -> i64 binds mini64;
export fn max(a: i64, b: i64) -> i64 binds maxi64;
export fn neg(a: i64) -> i64 binds negi64;
export fn and(a: i64, b: i64) -> i64 binds andi64;
export fn or(a: i64, b: i64) -> i64 binds ori64;
export fn xor(a: i64, b: i64) -> i64 binds xori64;
export fn not(a: i64) -> i64 binds noti64;
export fn nand(a: i64, b: i64) -> i64 binds nandi64;
export fn nor(a: i64, b: i64) -> i64 binds nori64;
export fn xnor(a: i64, b: i64) -> i64 binds xnori64;
export fn eq(a: i64, b: i64) -> bool binds eqi64;
export fn neq(a: i64, b: i64) -> bool binds neqi64;
export fn lt(a: i64, b: i64) -> bool binds lti64;
export fn lte(a: i64, b: i64) -> bool binds ltei64;
export fn gt(a: i64, b: i64) -> bool binds gti64;
export fn gte(a: i64, b: i64) -> bool binds gtei64;
export fn shl(a: i64, b: i64) -> i64 binds shli64;
export fn shr(a: i64, b: i64) -> i64 binds shri64;
export fn wrl(a: i64, b: i64) -> i64 binds wrli64;
export fn wrr(a: i64, b: i64) -> i64 binds wrri64;

/// Float-related functions and function bindings
export fn ok(i: f32) -> Result{f32} binds alan_ok;
export fn getOr(r: Result{f32}, default: f32) -> f32 binds get_or_f32;
export fn f32(i: i8) -> f32 binds i8tof32;
export fn f32(i: i16) -> f32 binds i16tof32;
export fn f32(i: i32) -> f32 binds i32tof32;
export fn f32(i: i64) -> f32 binds i64tof32;
export fn f32(f: f32) -> f32 = f;
export fn f32(f: f64) -> f32 binds f64tof32;
export fn f32(s: string) -> Result{f32} binds stringtof32;
export fn add(a: f32, b: f32) -> Result{f32} binds addf32;
export fn add(a: Result{f32}, b: Result{f32}) -> Result{f32} binds addf32_result;
export fn add(a: f32, b: Result{f32}) -> Result{f32} = add(a.ok, b);
export fn add(a: Result{f32}, b: f32) -> Result{f32} = add(a, b.ok);
export fn sub(a: f32, b: f32) -> Result{f32} binds subf32;
export fn sub(a: Result{f32}, b: Result{f32}) -> Result{f32} binds subf32_result;
export fn sub(a: f32, b: Result{f32}) -> Result{f32} = sub(a.ok, b);
export fn sub(a: Result{f32}, b: f32) -> Result{f32} = sub(a, b.ok);
export fn mul(a: f32, b: f32) -> Result{f32} binds mulf32;
export fn mul(a: Result{f32}, b: Result{f32}) -> Result{f32} binds mulf32_result;
export fn mul(a: f32, b: Result{f32}) -> Result{f32} = mul(a.ok, b);
export fn mul(a: Result{f32}, b: f32) -> Result{f32} = mul(a, b.ok);
export fn div(a: f32, b: f32) -> Result{f32} binds divf32;
export fn div(a: Result{f32}, b: Result{f32}) -> Result{f32} binds divf32_result;
export fn div(a: f32, b: Result{f32}) -> Result{f32} = div(a.ok, b);
export fn div(a: Result{f32}, b: f32) -> Result{f32} = div(a, b.ok);
export fn sqrt(f: f32) -> f32 binds sqrtf32;
export fn sqrt(f: Result{f32}) -> Result{f32} binds sqrtf32_result;
export fn pow(a: f32, b: f32) -> Result{f32} binds powf32;
export fn pow(a: Result{f32}, b: Result{f32}) -> Result{f32} binds powf32_result;
export fn pow(a: f32, b: Result{f32}) -> Result{f32} = pow(a.ok, b);
export fn pow(a: Result{f32}, b: f32) -> Result{f32} = pow(a, b.ok);
export fn min(a: f32, b: f32) -> f32 binds minf32;
export fn min(a: Result{f32}, b: Result{f32}) -> Result{f32} binds minf32_result;
export fn min(a: f32, b: Result{f32}) -> Result{f32} = min(a.ok, b);
export fn min(a: Result{f32}, b: f32) -> Result{f32} = min(a, b.ok);
export fn max(a: f32, b: f32) -> f32 binds maxf32;
export fn max(a: Result{f32}, b: Result{f32}) -> Result{f32} binds maxf32_result;
export fn max(a: f32, b: Result{f32}) -> Result{f32} = max(a.ok, b);
export fn max(a: Result{f32}, b: f32) -> Result{f32} = max(a, b.ok);
export fn neg(a: f32) -> f32 binds negf32;
export fn neg(a: Result{f32}) -> Result{f32} binds negf32_result;
export fn eq(a: f32, b: f32) -> bool binds eqf32;
export fn neq(a: f32, b: f32) -> bool binds neqf32;
export fn lt(a: f32, b: f32) -> bool binds ltf32;
export fn lte(a: f32, b: f32) -> bool binds ltef32;
export fn gt(a: f32, b: f32) -> bool binds gtf32;
export fn gte(a: f32, b: f32) -> bool binds gtef32;

export fn ok(i: f64) -> Result{f64} binds alan_ok;
export fn getOr(r: Result{f64}, default: f64) -> f64 binds get_or_f64;
export fn f64(i: i8) -> f64 binds i8tof64;
export fn f64(i: i16) -> f64 binds i16tof64;
export fn f64(i: i32) -> f64 binds i32tof64;
export fn f64(i: i64) -> f64 binds i64tof64;
export fn f64(f: f32) -> f64 binds f32tof64;
export fn f64(f: f64) -> f64 = f;
export fn f64(s: string) -> Result{f64} binds stringtof64;
export fn add(a: f64, b: f64) -> Result{f64} binds addf64;
export fn add(a: Result{f64}, b: Result{f64}) -> Result{f64} binds addf64_result;
export fn add(a: f64, b: Result{f64}) -> Result{f64} = add(a.ok, b);
export fn add(a: Result{f64}, b: f64) -> Result{f64} = add(a, b.ok);
export fn sub(a: f64, b: f64) -> Result{f64} binds subf64;
export fn sub(a: Result{f64}, b: Result{f64}) -> Result{f64} binds subf64_result;
export fn sub(a: f64, b: Result{f64}) -> Result{f64} = sub(a.ok, b);
export fn sub(a: Result{f64}, b: f64) -> Result{f64} = sub(a, b.ok);
export fn mul(a: f64, b: f64) -> Result{f64} binds mulf64;
export fn mul(a: Result{f64}, b: Result{f64}) -> Result{f64} binds mulf64_result;
export fn mul(a: f64, b: Result{f64}) -> Result{f64} = mul(a.ok, b);
export fn mul(a: Result{f64}, b: f64) -> Result{f64} = mul(a, b.ok);
export fn div(a: f64, b: f64) -> Result{f64} binds divf64;
export fn div(a: Result{f64}, b: Result{f64}) -> Result{f64} binds divf64_result;
export fn div(a: f64, b: Result{f64}) -> Result{f64} = div(a.ok, b);
export fn div(a: Result{f64}, b: f64) -> Result{f64} = div(a, b.ok);
export fn sqrt(f: f64) -> f64 binds sqrtf64;
export fn sqrt(f: Result{f64}) -> Result{f64} binds sqrtf64_result;
export fn pow(a: f64, b: f64) -> Result{f64} binds powf64;
export fn pow(a: Result{f64}, b: Result{f64}) -> Result{f64} binds powf64_result;
export fn pow(a: f64, b: Result{f64}) -> Result{f64} = pow(a.ok, b);
export fn pow(a: Result{f64}, b: f64) -> Result{f64} = pow(a, b.ok);
export fn min(a: f64, b: f64) -> f64 binds minf64;
export fn min(a: Result{f64}, b: Result{f64}) -> Result{f64} binds minf64_result;
export fn min(a: f64, b: Result{f64}) -> Result{f64} = min(a.ok, b);
export fn min(a: Result{f64}, b: f64) -> Result{f64} = min(a, b.ok);
export fn max(a: f64, b: f64) -> f64 binds maxf64;
export fn max(a: Result{f64}, b: Result{f64}) -> Result{f64} binds maxf64_result;
export fn max(a: f64, b: Result{f64}) -> Result{f64} = max(a.ok, b);
export fn max(a: Result{f64}, b: f64) -> Result{f64} = max(a, b.ok);
export fn neg(a: f64) -> f64 binds negf64;
export fn neg(a: Result{f64}) -> Result{f64} binds negf64_result;
export fn eq(a: f64, b: f64) -> bool binds eqf64;
export fn neq(a: f64, b: f64) -> bool binds neqf64;
export fn lt(a: f64, b: f64) -> bool binds ltf64;
export fn lte(a: f64, b: f64) -> bool binds ltef64;
export fn gt(a: f64, b: f64) -> bool binds gtf64;
export fn gte(a: f64, b: f64) -> bool binds gtef64;

/// String related bindings
export fn string(i: i8) -> string binds i8tostring;
export fn string(i: i16) -> string binds i16tostring;
export fn string(i: i32) -> string binds i32tostring;
export fn string(i: i64) -> string binds i64tostring;
export fn string(f: f32) -> string binds f32tostring;
export fn string(f: f64) -> string binds f64tostring;
export fn string(b: bool) -> string binds booltostring;
export fn string(s: string) -> string = s;
export fn concat(a: string, b: string) -> string binds concatstring;
export fn add(a: string, b: string) -> string binds concatstring; // To use the '+' operator
export fn repeat(a: string, n: i64) -> string binds repeatstring;
export fn mul(a: string, n: i64) -> string binds repeatstring; // To use the '*' operator
export fn split(a: string, b: string) -> string[] binds splitstring;
export fn div(a: string, b: string) -> string[] binds splitstring; // To use the '/' operator
export fn len(a: string) -> i64 binds lenstring;
export fn get(a: string, i: i64) -> Result{string} binds getstring;
export fn trim(a: string) -> string binds trimstring;
export fn index(a: string, b: string) -> Result{i64} binds indexstring;
export fn min(a: string, b: string) -> string binds minstring;
export fn max(a: string, b: string) -> string binds maxstring;
export fn eq(a: string, b: string) -> bool binds eqstring;
export fn neq(a: string, b: string) -> bool binds neqstring;
export fn lt(a: string, b: string) -> bool binds ltstring;
export fn lte(a: string, b: string) -> bool binds ltestring;
export fn gt(a: string, b: string) -> bool binds gtstring;
export fn gte(a: string, b: string) -> bool binds gtestring;
export fn join(a: Array{string}, s: string) -> string binds joinstring;
export fn join{S}(a: Buffer{string, S}, s: string) -> string binds bufferjoinstring;

/// Boolean related bindings
export fn bool(i: i8) -> bool binds i8tobool;
export fn bool(i: i16) -> bool binds i16tobool;
export fn bool(i: i32) -> bool binds i32tobool;
export fn bool(i: i64) -> bool binds i64tobool;
export fn bool(f: f32) -> bool binds f32tobool;
export fn bool(f: f64) -> bool binds f64tobool;
export fn bool(s: string) -> bool binds stringtobool;
export fn bool(b: bool) -> bool = b;
export fn and(a: bool, b: bool) -> bool binds andbool;
export fn or(a: bool, b: bool) -> bool binds orbool;
export fn xor(a: bool, b: bool) -> bool binds xorbool;
export fn not(a: bool) -> bool binds notbool;
export fn nand(a: bool, b: bool) -> bool binds nandbool;
export fn nor(a: bool, b: bool) -> bool binds norbool;
export fn xnor(a: bool, b: bool) -> bool binds xnorbool;
export fn eq(a: bool, b: bool) -> bool binds eqbool;
export fn neq(a: bool, b: bool) -> bool binds neqbool;

/// Array related bindings
export fn len{T}(a: T[]) -> i64 binds lenarray;
export fn push{T}(a: Array{T}, v: T) -> () binds pusharray;
export fn pop{T}(a: T[]) -> Maybe{T} binds poparray;
export fn map{T, U}(a: Array{T}, m: T -> U) -> Array{U} binds map_onearg;
export fn map{T, U}(a: Array{T}, m: (T, i64) -> U) -> Array{U} binds map_twoarg;
export fn parmap{T, U}(a: Array{T}, m: T -> U) -> Array{U} binds parmap_onearg;
export fn filter{T}(a: Array{T}, f: T -> bool) -> Array{T} binds filter_onearg;
export fn filter{T}(a: Array{T}, f: (T, i64) -> bool) -> Array{T} binds filter_twoarg;
export fn reduce{T}(a: Array{T}, f: (T, T) -> T) -> Maybe{T} binds reduce_sametype;
export fn reduce{T, U}(a: Array{T}, i: U, f: (U, T) -> U) -> U binds reduce_difftype;
export fn concat{T}(a: Array{T}, b: Array{T}) -> Array{T} binds concat;
export fn filled{T}(v: T, l: i64) -> Array{T} binds filled;

/// Buffer related bindings
export fn len{T, S}(a: T[S]) -> i64 binds lenbuffer;
export fn map{T, S, U}(a: Buffer{T, S}, m: T -> U) -> Buffer{U, S} binds mapbuffer_onearg;
export fn map{T, S, U}(a: Buffer{T, S}, m: (T, i64) -> U) -> Buffer{U, S} binds mapbuffer_twoarg;

/// Process exit-related bindings
export fn ExitCode(e: i8) -> ExitCode binds to_exit_code_i8;
export fn ExitCode(e: i16) -> ExitCode = ExitCode(e.i8);
export fn ExitCode(e: i32) -> ExitCode = ExitCode(e.i8);
export fn ExitCode(e: i64) -> ExitCode = ExitCode(e.i8);
export fn getOrExit{T}(a: Result{T}) -> T binds get_or_exit;
export fn getOrExit{T}(a: T?) -> T binds get_or_maybe_exit;

/// Thread-related bindings
export fn wait(t: i64) binds wait;

/// Time-related bindings
export fn now() -> Instant binds now;
export fn elapsed(i: Instant) -> Duration binds elapsed;
export fn print(d: Duration) binds print_duration;

/// GPU-related bindings
export type GPU binds GPU;
export fn GPU() -> GPU binds GPU_new;
export type BufferUsages binds wgpu::BufferUsages;
export type GBuffer binds wgpu::Buffer;
export fn createBuffer(g: GPU, usage: BufferUsages, vals: Array{i32}) -> GBuffer binds create_buffer_init;
export fn createBuffer(g: GPU, usage: BufferUsages, size: i64) -> GBuffer binds create_empty_buffer;
export fn mapReadBuffer() -> BufferUsages binds map_read_buffer_type;
export fn storageBuffer() -> BufferUsages binds storage_buffer_type;
export type GPGPU binds GPGPU;
export fn GPGPU(source: string, buffers: Array{Array{GBuffer}}) -> GPGPU binds GPGPU_new;
export fn GPGPU(source: string, buffer: GBuffer) -> GPGPU binds GPGPU_new_easy;
export fn run(g: GPU, gg: GPGPU) binds gpu_run;
export fn read{T}(g: GPU, b: GBuffer) -> Array{T} binds read_buffer;

/// Stdout/stderr-related bindings
// TODO: Rework this to just print anything that can be converted to `string` via interfaces
export fn print{T}(v: Result{T}) binds println_result;
export fn print{T}(v: Maybe{T}) binds println_maybe;
export fn print{T}(v: Array{T}) binds print_vec;
export fn print{T, N}(v: Buffer{T, N}) binds print_buffer;
export fn print{T}(v: Array{Result{T}}) binds print_vec_result;
export fn print{T}(v: T) binds println;
export fn eprint{T}(v: Result{T}) binds eprintln_result;
export fn eprint{T}(v: Maybe{T}) binds eprintln_maybe;
export fn eprint{T}(v: T) binds eprintln;

/// Built-in operator definitions
// TODO: New plan is to make operators only map to one function per symbol and *kind* of operator,
// so you can have an infix and prefix operator with the same symbol linked to different functions,
// but you can't have an infix operator of the same symbol linked to multiple functions. This does
// produce some ambiguity of what kind of operator an operator is, but should still be unambiguous
// to humans to "read" the symbol as whatever kind of function it represents.
export infix add as + precedence 2;
export infix sub as - precedence 2;
//export prefix neg as - precedence 1; // TODO: Rework operator storage and selection
export infix mul as * precedence 3;
export infix div as / precedence 3;
export infix mod as % precedence 3;
// export infix template as % precedence 3;
export infix pow as ** precedence 4;
export infix and as & precedence 3;
export infix and as && precedence 3;
export infix or as | precedence 2;
export infix or as || precedence 2;
export infix xor as ^ precedence 2;
export prefix not as ! precedence 4;
export infix nand as !& precedence 3;
export infix nor as !| precedence 2;
export infix xnor as !^ precedence 2;
export infix eq as == precedence 0;
export infix neq as != precedence 0;
export infix lt as < precedence 0;
export infix lte as <= precedence 0;
export infix gt as > precedence 0;
export infix gte as >= precedence 0;
export prefix len as # precedence 0;
export infix index as @ precedence 0;
export infix shl as << precedence 1;
export infix shr as >> precedence 1;
export infix wrl as <<< precedence 1;
export infix wrr as >>> precedence 1;
