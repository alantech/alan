/**
 * @std/httpserver - Built-in server for http
 *
 * Split from the client because of the automatic inclusion of event handlers when importing
 */

// Make sure we're using the same Request, Response definitions between the two
from @std/httpcommon import Connection, InternalRequest, InternalResponse, Request, Response

// Re-export Connection, Request, and Response

export Connection
export Request
export Response

/**
 * HTTP Server
 */

// The connection event
export event connection: Connection

// The special connection event with a signature like `event __conn: InternalRequest`
// This wrapper function takes the internal connection object, converts it to the user-friendly
// connection object, and then emits it on a new event for user code to pick up
on __conn fn (conn: InternalRequest) {
  emit connection new Connection {
    req: new Request {
      method: conn.method,
      url: conn.url,
      headers: toHashMap(conn.headers),
      body: conn.body,
    },
    res: new Response {
      status: 200, // If not set by the user, assume they meant it to be good
      headers: newHashMap('Content-Length', '0'), // If not set by the user, assume no data
      body: '', // If not set by the user, assume no data
      connId: conn.connId,
    },
  };
}

// The body function sets the body for a Response, sets the Content-Length header, and retuns the
// Response for chaining needs
export fn body(res: Response, body: string) {
  res.body = body;
  const len = body.length();
  set(res.headers, 'Content-Length', len.toString());
  return res;
}

// The status function sets the status of the response
export fn status(res: Response, status: int64) {
  res.status = status;
  return res;
}

// The send function converts the response object into an internal response object and passed that
// back to the HTTP server. A Result type with either an 'ok' string or an error is returned
export fn send(res: Response): Result<string> {
  const ires = new InternalResponse {
    status: res.status,
    headers: res.headers.keyVal,
    body: res.body,
    connId: res.connId,
  };
  res.connId = 0; // Clear out the connection ID after use so it can't be used again
  return httpsend(ires);
}
