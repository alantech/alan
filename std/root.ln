/**
 * The root scope. These definitions are automatically available from every module.
 * These are almost entirely wrappers around runtime opcodes to provide a friendlier
 * name and using function dispatch based on input arguments to pick the correct opcode.
 */

// TODO: See about making an export block scope so we don't have to write `export` so much

// Export all of the built-in types
export void
export int8
export int16
export int32
export int64
export float32
export float64
export bool
export string
export function // TODO: Make the function type more explicit than this
export Array
export Error
export Maybe
export Result
export Either

// Type aliasing of int64 and float64 to just int and float, as these are the default types
export type int = int64
export type float = float64

// Default Interfaces
export interface any {}
export interface anythingElse = any // Same as `any` but doesn't match with it
export interface Stringifiable {
  toString(Stringifiable): string
}

// Type conversion functions
export fn toFloat64(n: int8) = i8f64(n)
export fn toFloat64(n: int16) = i16f64(n)
export fn toFloat64(n: int32) = i32f64(n)
export fn toFloat64(n: int64) = i64f64(n)
export fn toFloat64(n: float32) = f32f64(n)
export fn toFloat64(n: float64) = n
export fn toFloat64(n: string) = strf64(n)
export fn toFloat64(n: bool) = boolf64(n)

export fn toFloat32(n: int8) = i8f32(n)
export fn toFloat32(n: int16) = i16f32(n)
export fn toFloat32(n: int32) = i32f32(n)
export fn toFloat32(n: int64) = i64f32(n)
export fn toFloat32(n: float32) = n
export fn toFloat32(n: float64) = f64f32(n)
export fn toFloat32(n: string) = strf32(n)
export fn toFloat32(n: bool) = boolf32(n)

export fn toInt64(n: int8) = i8i64(n)
export fn toInt64(n: int16) = i16i64(n)
export fn toInt64(n: int32) = i32i64(n)
export fn toInt64(n: int64) = n
export fn toInt64(n: float32) = f32i64(n)
export fn toInt64(n: float64) = f64i64(n)
export fn toInt64(n: string) = stri64(n)
export fn toInt64(n: bool) = booli64(n)

export fn toInt32(n: int8) = i8i32(n)
export fn toInt32(n: int16) = i16i32(n)
export fn toInt32(n: int32) = n
export fn toInt32(n: int64) = i64i32(n)
export fn toInt32(n: float32) = f32i32(n)
export fn toInt32(n: float64) = f64i32(n)
export fn toInt32(n: string) = stri32(n)
export fn toInt32(n: bool) = booli32(n)

export fn toInt16(n: int8) = i8i16(n)
export fn toInt16(n: int16) = n
export fn toInt16(n: int32) = i32i16(n)
export fn toInt16(n: int64) = i64i16(n)
export fn toInt16(n: float32) = f32i16(n)
export fn toInt16(n: float64) = f64i16(n)
export fn toInt16(n: string) = stri16(n)
export fn toInt16(n: bool) = booli16(n)

export fn toInt8(n: int8) = n
export fn toInt8(n: int16) = i16i8(n)
export fn toInt8(n: int32) = i32i8(n)
export fn toInt8(n: int64) = i64i8(n)
export fn toInt8(n: float32) = f32i8(n)
export fn toInt8(n: float64) = f64i8(n)
export fn toInt8(n: string) = stri8(n)
export fn toInt8(n: bool) = booli8(n)

export fn toBool(n: int8) = i8bool(n)
export fn toBool(n: int16) = i16bool(n)
export fn toBool(n: int32) = i32bool(n)
export fn toBool(n: int64) = i64bool(n)
export fn toBool(n: float32) = f32bool(n)
export fn toBool(n: float64) = f64bool(n)
export fn toBool(n: string) = strbool(n)
export fn toBool(n: bool) = n

export fn toString(n: int8) = i8str(n)
export fn toString(n: int16) = i16str(n)
export fn toString(n: int32) = i32str(n)
export fn toString(n: int64) = i64str(n)
export fn toString(n: float32) = f32str(n)
export fn toString(n: float64) = f64str(n)
export fn toString(n: string) = n
export fn toString(n: bool) = boolstr(n)

// Arithmetic functions
export fn add(a: int8, b: int8) = addi8(a, b)
export fn add(a: int16, b: int16) = addi16(a, b)
export fn add(a: int32, b: int32) = addi32(a, b)
export fn add(a: int64, b: int64) = addi64(a, b)
export fn add(a: float32, b: float32) = addf32(a, b)
export fn add(a: float64, b: float64) = addf64(a, b)

export fn sub(a: int8, b: int8) = subi8(a, b)
export fn sub(a: int16, b: int16) = subi16(a, b)
export fn sub(a: int32, b: int32) = subi32(a, b)
export fn sub(a: int64, b: int64) = subi64(a, b)
export fn sub(a: float32, b: float32) = subf32(a, b)
export fn sub(a: float64, b: float64) = subf64(a, b)

export fn negate(n: int8) = negi8(n)
export fn negate(n: int16) = negi16(n)
export fn negate(n: int32) = negi32(n)
export fn negate(n: int64) = negi64(n)
export fn negate(n: float32) = negf32(n)
export fn negate(n: float64) = negf64(n)

export fn mul(a: int8, b: int8) = muli8(a, b)
export fn mul(a: int16, b: int16) = muli16(a, b)
export fn mul(a: int32, b: int32) = muli32(a, b)
export fn mul(a: int64, b: int64) = muli64(a, b)
export fn mul(a: float32, b: float32) = mulf32(a, b)
export fn mul(a: float64, b: float64) = mulf64(a, b)

export fn div(a: int8, b: int8) = divi8(a, b)
export fn div(a: int16, b: int16) = divi16(a, b)
export fn div(a: int32, b: int32) = divi32(a, b)
export fn div(a: int64, b: int64) = divi64(a, b)
export fn div(a: float32, b: float32) = divf32(a, b)
export fn div(a: float64, b: float64) = divf64(a, b)

export fn mod(a: int8, b: int8) = modi8(a, b)
export fn mod(a: int16, b: int16) = modi16(a, b)
export fn mod(a: int32, b: int32) = modi32(a, b)
export fn mod(a: int64, b: int64) = modi64(a, b)

export fn pow(a: int8, b: int8) = powi8(a, b)
export fn pow(a: int16, b: int16) = powi16(a, b)
export fn pow(a: int32, b: int32) = powi32(a, b)
export fn pow(a: int64, b: int64) = powi64(a, b)
export fn pow(a: float32, b: float32) = powf32(a, b)
export fn pow(a: float64, b: float64) = powf64(a, b)

export fn sqrt(n: float32) = sqrtf32(n)
export fn sqrt(n: float64) = sqrtf64(n)

// Boolean and bitwise functions
export fn and(a: int8, b: int8) = andi8(a, b)
export fn and(a: int16, b: int16) = andi16(a, b)
export fn and(a: int32, b: int32) = andi32(a, b)
export fn and(a: int64, b: int64) = andi64(a, b)
export fn and(a: bool, b: bool) = andbool(a, b)

export fn or(a: int8, b: int8) = ori8(a, b)
export fn or(a: int16, b: int16) = ori16(a, b)
export fn or(a: int32, b: int32) = ori32(a, b)
export fn or(a: int64, b: int64) = ori64(a, b)
export fn or(a: bool, b: bool) = orbool(a, b)

export fn xor(a: int8, b: int8) = xori8(a, b)
export fn xor(a: int16, b: int16) = xori16(a, b)
export fn xor(a: int32, b: int32) = xori32(a, b)
export fn xor(a: int64, b: int64) = xori64(a, b)
export fn xor(a: bool, b: bool) = xorbool(a, b)

export fn not(n: int8) = noti8(n)
export fn not(n: int16) = noti16(n)
export fn not(n: int32) = noti32(n)
export fn not(n: int64) = noti64(n)
export fn not(n: bool) = notbool(n)

export fn nand(a: int8, b: int8) = nandi8(a, b)
export fn nand(a: int16, b: int16) = nandi16(a, b)
export fn nand(a: int32, b: int32) = nandi32(a, b)
export fn nand(a: int64, b: int64) = nandi64(a, b)
export fn nand(a: bool, b: bool) = nandboo(a, b)

export fn nor(a: int8, b: int8) = nori8(a, b)
export fn nor(a: int16, b: int16) = nori16(a, b)
export fn nor(a: int32, b: int32) = nori32(a, b)
export fn nor(a: int64, b: int64) = nori64(a, b)
export fn nor(a: bool, b: bool) = norbool(a, b)

export fn xnor(a: int8, b: int8) = xnori8(a, b)
export fn xnor(a: int16, b: int16) = xnori16(a, b)
export fn xnor(a: int32, b: int32) = xnori32(a, b)
export fn xnor(a: int64, b: int64) = xnori64(a, b)
export fn xnor(a: bool, b: bool) = xnorboo(a, b)

// Equality and order functions
export fn eq(a: int8, b: int8) = eqi8(a, b)
export fn eq(a: int16, b: int16) = eqi16(a, b)
export fn eq(a: int32, b: int32) = eqi32(a, b)
export fn eq(a: int64, b: int64) = eqi64(a, b)
export fn eq(a: float32, b: float32) = eqf32(a, b)
export fn eq(a: float64, b: float64) = eqf64(a, b)
export fn eq(a: string, b: string) = eqstr(a, b)
export fn eq(a: bool, b: bool) = eqbool(a, b)

export fn neq(a: int8, b: int8) = neqi8(a, b)
export fn neq(a: int16, b: int16) = neqi16(a, b)
export fn neq(a: int32, b: int32) = neqi32(a, b)
export fn neq(a: int64, b: int64) = neqi64(a, b)
export fn neq(a: float32, b: float32) = neqf32(a, b)
export fn neq(a: float64, b: float64) = neqf64(a, b)
export fn neq(a: string, b: string) = neqstr(a, b)
export fn neq(a: bool, b: bool) = neqbool(a, b)

export fn lt(a: int8, b: int8) = lti8(a, b)
export fn lt(a: int16, b: int16) = lti16(a, b)
export fn lt(a: int32, b: int32) = lti32(a, b)
export fn lt(a: int64, b: int64) = lti64(a, b)
export fn lt(a: float32, b: float32) = ltf32(a, b)
export fn lt(a: float64, b: float64) = ltf64(a, b)
export fn lt(a: string, b: string) = ltstr(a, b)

export fn lte(a: int8, b: int8) = ltei8(a, b)
export fn lte(a: int16, b: int16) = ltei16(a, b)
export fn lte(a: int32, b: int32) = ltei32(a, b)
export fn lte(a: int64, b: int64) = ltei64(a, b)
export fn lte(a: float32, b: float32) = ltef32(a, b)
export fn lte(a: float64, b: float64) = ltef64(a, b)
export fn lte(a: string, b: string) = ltestr(a, b)

export fn gt(a: int8, b: int8) = gti8(a, b)
export fn gt(a: int16, b: int16) = gti16(a, b)
export fn gt(a: int32, b: int32) = gti32(a, b)
export fn gt(a: int64, b: int64) = gti64(a, b)
export fn gt(a: float32, b: float32) = gtf32(a, b)
export fn gt(a: float64, b: float64) = gtf64(a, b)
export fn gt(a: string, b: string) = gtstr(a, b)

export fn gte(a: int8, b: int8) = gtei8(a, b)
export fn gte(a: int16, b: int16) = gtei16(a, b)
export fn gte(a: int32, b: int32) = gtei32(a, b)
export fn gte(a: int64, b: int64) = gtei64(a, b)
export fn gte(a: float32, b: float32) = gtef32(a, b)
export fn gte(a: float64, b: float64) = gtef64(a, b)
export fn gte(a: string, b: string) = gtestr(a, b)

// Wait functions
export fn wait(n: int8) = waitop(i8i64(n))
export fn wait(n: int16) = waitop(i16i64(n))
export fn wait(n: int32) = waitop(i32i64(n))
export fn wait(n: int64) = waitop(n)

// String functions
export fn concat(a: string, b: string) = catstr(a, b)
export split // opcode with signature `fn split(str: string, spl: string): Array<string>`
export fn repeat(s: string, n: int64) = repstr(s, n)
// export fn template(str: string, map: Map<string, string>) = templ(str, map)
export matches // opcode with signature `fn matches(s: string, t: string): bool`
export fn index(s: string, t: string) = indstr(s, t)
export fn length(s: string) = lenstr(s)
export trim // opcode with signature `fn trim(s: string): string`

// Array functions
export fn concat(a: Array<any>, b: Array<any>) = catarr(a, b)
export fn repeat(arr: Array<any>, n: int64) = reparr(arr, n)
export fn index(arr: Array<any>, val: any) = indarrv(arr, val)
export fn index(arr: Array<int8>, val: int8) = indarrf(arr, val)
export fn index(arr: Array<int16>, val: int16) = indarrf(arr, val)
export fn index(arr: Array<int32>, val: int32) = indarrf(arr, val)
export fn index(arr: Array<int64>, val: int64) = indarrf(arr, val)
export fn index(arr: Array<float32>, val: float32) = indarrf(arr, val)
export fn index(arr: Array<float64>, val: float64) = indarrf(arr, val)
export fn index(arr: Array<bool>, val: bool) = indarrf(arr, val)
export fn has(arr: Array<any>, val: any) = indarrv(arr, val).gt(-1)
export fn has(arr: Array<int8>, val: int8) = indarrf(arr, val).gt(-1)
export fn has(arr: Array<int16>, val: int16) = indarrf(arr, val).gt(-1)
export fn has(arr: Array<int32>, val: int32) = indarrf(arr, val).gt(-1)
export fn has(arr: Array<int64>, val: int64) = indarrf(arr, val).gt(-1)
export fn has(arr: Array<float32>, val: float32) = indarrf(arr, val).gt(-1)
export fn has(arr: Array<float64>, val: float64) = indarrf(arr, val).gt(-1)
export fn has(arr: Array<bool>, val: bool) = indarrf(arr, val).gt(-1)
export fn length(arr: Array<any>) = lenarr(arr)
export fn push(arr: Array<any>, val: any) {
  pusharr(arr, val, 0)
  return arr
}
export fn push(arr: Array<int8>, val: int8) {
  pusharr(arr, val, 8)
  return arr
}
export fn push(arr: Array<int16>, val: int16) {
  pusharr(arr, val, 8)
  return arr
}
export fn push(arr: Array<int32>, val: int32) {
  pusharr(arr, val, 8)
  return arr
}
export fn push(arr: Array<int64>, val: int64) {
  pusharr(arr, val, 8)
  return arr
}
export fn push(arr: Array<float32>, val: float32) {
  pusharr(arr, val, 8)
  return arr
}
export fn push(arr: Array<float64>, val: float64) {
  pusharr(arr, val, 8)
  return arr
}
export fn push(arr: Array<bool>, val: bool) {
  pusharr(arr, val, 8)
  return arr
}
export fn pop(arr: Array<any>) = poparr(arr)
export each // opcode with signature `fn each(arr: Array<any>, cb: function): void`
export map // parallel opcode with signature `fn map(arr: Array<any>, cb: function): Array<any>`
export mapl // serial opcode with signature `fn mapl(arr: Array<any>, cb: function): Array<any>`
export reduce // opcode with signature `fn reduce(arr: Array<any>, cb: function): any`
export filter // opcode with signature `fn filter(arr: Array<any>, cb: function): Array<any>`
export find // opcode with signature `fn find(arr: Array<any>, cb: function): any`
export every // opcode with signature `fn every(arr: Array<any>, cb: function): bool`
export some // opcode with signature `fn some(arr: Array<any>, cb: function): bool`
export join // opcode with signature `fn join(arr: Array<string>, sep: string): string`
export fn set(arr: Array<any>, idx: int64, val: any) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytov(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<int8>, idx: int64, val: int8) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<int16>, idx: int64, val: int16) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<int32>, idx: int64, val: int32) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<int64>, idx: int64, val: int64) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<float32>, idx: int64, val: float32) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<float64>, idx: int64, val: float64) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}
export fn set(arr: Array<bool>, idx: int64, val: bool) {
  if (idx < 0) | (idx > arr.length()) {
    return err('array out-of-bounds access')
  } else {
    copytof(arr, idx, val)
    return some(arr)
  }
}

// Ternary functions
export fn pair(trueval: any, falseval: any) = new Array<any> [ trueval, falseval ]
export fn cond(c: bool, options: Array<any>) = getR(options[1 - c.toInt64()])
export fn cond(c: bool, optional: function): void = condfn(c, optional)

// "assign" function useful for hoisting assignments
export fn assign(a: any) = copyarr(a)
export fn assign(a: Array<any>) = copyarr(a)
export fn assign(a: void) = copyvoid(a) // TODO: Eliminate this, covering up a weird error
export fn assign() = zeroed() // TODO: Used for conditionals, eliminate with more clever compiler
export fn assign(a: int8) = copyi8(a)
export fn assign(a: int16) = copyi16(a)
export fn assign(a: int32) = copyi32(a)
export fn assign(a: int64) = copyi64(a)
export fn assign(a: float32) = copyf32(a)
export fn assign(a: float64) = copyf64(a)
export fn assign(a: bool) = copybool(a)
export fn assign(a: string) = copystr(a)

// Error, Maybe, Result, and Either types and functions
export error // opcode with signature `fn error(string): Error`
export noerr // opcode with signature `fn noerr(): Error`
export fn toString(err: Error) = errorstr(err)

export fn some(val: any) = someM(val, 0)
export fn some(val: int8) = someM(val, 8)
export fn some(val: int16) = someM(val, 8)
export fn some(val: int32) = someM(val, 8)
export fn some(val: int64) = someM(val, 8)
export fn some(val: float32) = someM(val, 8)
export fn some(val: float64) = someM(val, 8)
export fn some(val: bool) = someM(val, 8)
export fn none() = noneM()
export isSome // opcode with signature `fn isSome(Maybe<any>): bool`
export isNone // opcode with signature `fn isNone(Maybe<any>): bool`
export fn getOr(maybe: Maybe<any>, default: any) = getOrM(maybe, default)

export fn ok(val: any) = okR(val, 0)
export fn ok(val: int8) = okR(val, 8)
export fn ok(val: int16) = okR(val, 8)
export fn ok(val: int32) = okR(val, 8)
export fn ok(val: int64) = okR(val, 8)
export fn ok(val: float32) = okR(val, 8)
export fn ok(val: float64) = okR(val, 8)
export fn ok(val: bool) = okR(val, 8)
export err // opcode with signature `fn err(string): Result<any>`
export isOk // opcode with signature `fn isOk(Result<any>): bool`
export isErr // opcode with signature `fn isErr(Result<any>: bool`
export fn getOr(result: Result<any>, default: any) = getOrR(result, default)
export getErr // opcode with signature `fn getErr(Result<any>, Error): Error`
export fn toString(n: Result<Stringifiable>): string {
  if n.isOk() {
    return n.getR().toString()
  } else {
    return n.getErr(noerr()).toString()
  }
}

export fn main(val: any) = mainE(val, 0)
export fn main(val: int8) = mainE(val, 8)
export fn main(val: int16) = mainE(val, 8)
export fn main(val: int32) = mainE(val, 8)
export fn main(val: int64) = mainE(val, 8)
export fn main(val: float32) = mainE(val, 8)
export fn main(val: float64) = mainE(val, 8)
export fn main(val: bool) = mainE(val, 8)
export fn alt(val: any) = altE(val, 0)
export fn alt(val: int8) = altE(val, 8)
export fn alt(val: int16) = altE(val, 8)
export fn alt(val: int32) = altE(val, 8)
export fn alt(val: int64) = altE(val, 8)
export fn alt(val: float32) = altE(val, 8)
export fn alt(val: float64) = altE(val, 8)
export fn alt(val: bool) = altE(val, 8)
export isMain // opcode with signature `fn isMain(Either<any, anythingElse>): bool`
export isAlt // opcode with signature `fn isAlt(Either<any, anythingElse): bool`
export fn getMainOr(either: Either<any, anythingElse>, default: any) = mainOr(either, default)
export fn getAltOr(either: Either<any, anythingElse>, default: anythingElse) = altOr(either, default)

// toHash functions for all data types
export fn toHash(val: any) = hashv(val)
export fn toHash(val: int8) = hashf(val)
export fn toHash(val: int16) = hashf(val)
export fn toHash(val: int32) = hashf(val)
export fn toHash(val: int64) = hashf(val)
export fn toHash(val: float32) = hashf(val)
export fn toHash(val: float64) = hashf(val)
export fn toHash(val: bool) = hashf(val)

// HashMap implementation
export type KeyVal<K, V> {
  key: K
  val: V
}

export interface Hashable {
  toHash(Hashable): int64
  eq(Hashable, Hashable): bool
}

export type HashMap<K, V> {
  keyVal: Array<KeyVal<K, V>>
  lookup: Array<Array<int64>>
}

export fn keyVal(hm: HashMap<Hashable, any>) = hm.keyVal
export fn keys(hm: HashMap<Hashable, any>): Array<Hashable> = map(hm.keyVal, fn (kv: KeyVal<Hashable, any>): Hashable = kv.key)
export fn vals(hm: HashMap<Hashable, any>): Array<any> = map(hm.keyVal, fn (kv: KeyVal<Hashable, any>): any = kv.val)
export fn length(hm: HashMap<Hashable, any>): int64 = length(hm.keyVal)

export fn get(hm: HashMap<Hashable, any>, key: Hashable): any {
  const hash = key.toHash() % length(hm.lookup)
  const list = getR(hm.lookup[hash])
  const index = list.find(fn (i: int64): Array<int64> {
    const kv = getR(hm.keyVal[i])
    return eq(kv.key, key)
  })
  if index.isOk() {
    const i = index.getOr(0)
    const kv = getR(hm.keyVal[i])
    return ok(kv.val)
  } else {
    return err('key not found')
  }
}

export fn set(hm: HashMap<Hashable, any>, key: Hashable, val: any): HashMap<Hashable, any> {
  const kv = new KeyVal<Hashable, any> {
    key = key
    val = val
  }
  const index = length(hm.keyVal)
  push(hm.keyVal, kv)
  const hash = key.toHash() % length(hm.lookup)
  const list = getR(hm.lookup[hash])
  if list.length() == 8 {
    // Rebucket everything
    const lookupLen = length(hm.lookup) * 2
    hm.lookup = new Array<Array<int64>> [ new Array<int64> [], ] * lookupLen
    each(hm.keyVal, fn (kv: KeyVal<Hashable, any>, i: int64) {
      const hash = toHash(kv.key) % lookupLen
      const list = getR(hm.lookup[hash])
      list.push(i)
    })
  } else {
    const list = getR(hm.lookup[hash])
    list.push(index)
  }
  return hm
}

export fn newHashMap(firstKey: Hashable, firstVal: any): HashMap<Hashable, any> { // TODO: Rust-like fn::<typeA, typeB> syntax?
  let hm = new HashMap<Hashable, any> {
    keyVal = new Array<KeyVal<Hashable, any>> []
    lookup = new Array<Array<int64>> [ new Array<int64> [] ] * 128 // 1KB of space
  }
  return hm.set(firstKey, firstVal)
}

// Operator declarations
export infix add as + precedence 2
export infix concat as + precedence 2
export infix sub as - precedence 2
export prefix negate as - precedence 1
export infix mul as * precedence 3
export infix repeat as * precedence 3
export infix div as / precedence 3
export infix split as / precedence 3
export infix mod as % precedence 3
// export infix template as % precedence 3
export infix pow as ** precedence 4
export infix and as & precedence 3
export infix and as && precedence 3
export infix or as | precedence 2
export infix or as || precedence 2
export infix xor as ^ precedence 2
export prefix not as ! precedence 4
export infix nand as !& precedence 3
export infix nor as !| precedence 2
export infix xnor as !^ precedence 2
export infix eq as == precedence 1
export infix neq as != precedence 1
export infix lt as < precedence 1
export infix lte as <= precedence 1
export infix gt as > precedence 1
export infix gte as >= precedence 1
export infix matches as ~ precedence 1
export infix index as @ precedence 1
export prefix length as # precedence 4
export prefix trim as ` precedence 4
export infix pair as : precedence 5
export infix push as : precedence 6
export infix cond as ? precedence 0
export infix getOr as | precedence 2
export infix getOr as || precedence 2
