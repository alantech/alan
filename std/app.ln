/**
 * @std/app - The entrypoint for CLI apps
 */

// The `start` event with a signature like `event start` but has special meaning in the runtime
export start

// The `stdout` event
export event stdout: string

// `@std/app` has access to a special `stdoutp` opcode to trigger stdout writing
on stdout fn (out: string) = stdoutp(out);

// The `print` function converts its input to a string, appends a newline, and sends it to `stdout`
export fn print(out: Stringifiable) {
  emit stdout out.toString() + "\n";
}

// The `exit` event
export event exit: int8

// `@std/app` has access to a special `exitop` opcode to trigger the exit behavior
on exit fn (status: int8) = exitop(status);

// The `stderr` event
export event stderr: string

// `@std/app` has access to a special `stderrp` opcode to trigger stderr writing
on stderr fn (err: string) = stderrp(err);

// The `eprint` function converts its input to a string, appends a newline, and sends it to `stderr`
export fn eprint(err: Stringifiable) {
  emit stderr err.toString() + "\n";
}
