export const e = 2.718281828459045;
export const pi = 3.141592653589793;
export const tau = 6.283185307179586;

export fn exp(x: float64) = e ** x;
export fn exp(x: Result<float64>) = e ** x;
export fn exp(x: float32) = toFloat32(e) ** x;
export fn exp(x: Result<float32>) = toFloat32(e) ** x;

export fn ln(x: float64) = lnf64(x);
export fn ln(x: float32) = toFloat32(lnf64(toFloat64(x)));
// TODO: Figure out what's wrong with interfaces where the input and output type are the interface
export fn ln(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(ln(x.getR()));
}
export fn ln(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(ln(x.getR()));
}

export fn log(x: float64) = logf64(x);
export fn log(x: float32) = toFloat32(logf64(toFloat64(x)));
export fn log(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(log(x.getR()));
}
export fn log(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(log(x.getR()));
}

export fn sin(x: float64) = sinf64(x);
export fn sin(x: float32) = toFloat32(sinf64(toFloat64(x)));
export fn sin(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(sin(x.getR()));
}
export fn sin(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(sin(x.getR()));
}
export fn sine(x: float64) = sin(x);
export fn sine(x: float32) = sin(x);
export fn sine(x: Result<float64>) = sin(x);
export fn sine(x: Result<float32>) = sin(x);

export fn cos(x: float64) = cosf64(x);
export fn cos(x: float32) = toFloat32(cosf64(toFloat64(x)));
export fn cos(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(cos(x.getR()));
}
export fn cos(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(cos(x.getR()));
}
export fn cosine(x: float64) = cos(x);
export fn cosine(x: float32) = cos(x);
export fn cosine(x: Result<float64>) = cos(x);
export fn cosine(x: Result<float32>) = cos(x);

export fn tan(x: float64) = tanf64(x);
export fn tan(x: float32) = toFloat32(tanf64(toFloat64(x)));
export fn tan(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(tan(x.getR()));
}
export fn tan(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(tan(x.getR()));
}
export fn tangent(x: float64) = tan(x);
export fn tangent(x: float32) = tan(x);
export fn tangent(x: Result<float64>) = tan(x);
export fn tangent(x: Result<float32>) = tan(x);

export fn sec(x: float64) = 1.0 / cosf64(x);
export fn sec(x: float32): Result<float32> {
  const s64 = sec(x.toFloat64());
  if s64.isErr() {
    return s64;
  }
  return ok(s64.getR().toFloat32());
}
export fn sec(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return sec(x.getR());
}
export fn sec(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return sec(x.getR());
}
export fn secant(x: float64) = sec(x);
export fn secant(x: float32) = sec(x);
export fn secant(x: Result<float64>) = sec(x);
export fn secant(x: Result<float32>) = sec(x);

export fn csc(x: float64) = 1.0 / sinf64(x);
export fn csc(x: float32): Result<float32> {
  const c64 = csc(x.toFloat64());
  if c64.isErr() {
    return c64;
  }
  return ok(c64.getR().toFloat32());
}
export fn csc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return csc(x.getR());
}
export fn csc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return csc(x.getR());
}
export fn cosecant(x: float64) = csc(x);
export fn cosecant(x: float32) = csc(x);
export fn cosecant(x: Result<float64>) = csc(x);
export fn cosecant(x: Result<float32>) = csc(x);

export fn cot(x: float64) = 1.0 / tanf64(x);
export fn cot(x: float32): Result<float32> {
  const t64 = cot(x.toFloat64());
  if t64.isErr() {
    return t64;
  }
  return ok(t64.getR().toFloat32());
}
export fn cot(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return cot(x.getR());
}
export fn cot(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return cot(x.getR());
}
export fn cotangent(x: float64) = cot(x);
export fn cotangent(x: float32) = cot(x);
export fn cotangent(x: Result<float64>) = cot(x);
export fn cotangent(x: Result<float32>) = cot(x);

export fn asin(x: float64) = asinf64(x);
export fn asin(x: float32) = toFloat32(asinf64(toFloat64(x)));
export fn asin(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(asin(x.getR()));
}
export fn asin(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(asin(x.getR()));
}
export fn arcsine(x: float64) = asin(x);
export fn arcsine(x: float32) = asin(x);
export fn arcsine(x: Result<float64>) = asin(x);
export fn arcsine(x: Result<float32>) = asin(x);

export fn acos(x: float64) = acosf64(x);
export fn acos(x: float32) = toFloat32(acosf64(toFloat64(x)));
export fn acos(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(acos(x.getR()));
}
export fn acos(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(acos(x.getR()));
}
export fn arccosine(x: float64) = acos(x);
export fn arccosine(x: float32) = acos(x);
export fn arccosine(x: Result<float64>) = acos(x);
export fn arccosine(x: Result<float32>) = acos(x);

export fn atan(x: float64) = atanf64(x);
export fn atan(x: float32) = toFloat32(atanf64(toFloat64(x)));
export fn atan(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(atan(x.getR()));
}
export fn atan(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(atan(x.getR()));
}
export fn arctangent(x: float64) = atan(x);
export fn arctangent(x: float32) = atan(x);
export fn arctangent(x: Result<float64>) = atan(x);
export fn arctangent(x: Result<float32>) = atan(x);

export fn asec(x: float64): Result<float64> {
  const inv = 1.0 / x;
  if inv.isErr() {
    return inv;
  }
  return ok(acosf64(inv.getR()));
}
export fn asec(x: float32): Result<float32> {
  const val = asec(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn asec(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return asec(x.getR());
}
export fn asec(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return asec(x.getR());
}
export fn arcsecant(x: float64) = asec(x);
export fn arcsecant(x: float32) = asec(x);
export fn arcsecant(x: Result<float64>) = asec(x);
export fn arcsecant(x: Result<float32>) = asec(x);

export fn acsc(x: float64): Result<float64> {
  const inv = 1.0 / x;
  if inv.isErr() {
    return inv;
  }
  return ok(asinf64(inv.getR()));
}
export fn acsc(x: float32): Result<float32> {
  const val = acsc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acsc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acsc(x.getR());
}
export fn acsc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acsc(x.getR());
}
export fn arccosecant(x: float64) = acsc(x);
export fn arccosecant(x: float32) = acsc(x);
export fn arccosecant(x: Result<float64>) = acsc(x);
export fn arccosecant(x: Result<float32>) = acsc(x);

export fn acot(x: float64) = pi / 2.0 - atanf64(x);
export fn acot(x: float32): Result<float32> {
  const val = acot(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acot(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acot(x.getR());
}
export fn acot(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acot(x.getR());
}
export fn arccotangent(x: float64) = acot(x);
export fn arccotangent(x: float32) = acot(x);
export fn arccotangent(x: Result<float64>) = acot(x);
export fn arccotangent(x: Result<float32>) = acot(x);

export fn ver(x: float64) = 1.0 - cosf64(x);
export fn ver(x: float32): Result<float32> {
  const val = ver(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn ver(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ver(x.getR());
}
export fn ver(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ver(x.getR());
}
export fn versine(x: float64) = ver(x);
export fn versine(x: float32) = ver(x);
export fn versine(x: Result<float64>) = ver(x);
export fn versine(x: Result<float32>) = ver(x);

export fn vcs(x: float64) = 1.0 + cosf64(x);
export fn vcs(x: float32): Result<float32> {
  const val = vcs(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn vcs(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return vcs(x.getR());
}
export fn vcs(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return vcs(x.getR());
}
export fn vercosine(x: float64) = vcs(x);
export fn vercosine(x: float32) = vcs(x);
export fn vercosine(x: Result<float64>) = vcs(x);
export fn vercosine(x: Result<float32>) = vcs(x);

export fn cvs(x: float64) = 1.0 - sinf64(x);
export fn cvs(x: float32): Result<float32> {
  const val = cvs(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn cvs(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return cvs(x.getR());
}
export fn cvs(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return cvs(x.getR());
}
export fn coversine(x: float64) = cvs(x);
export fn coversine(x: float32) = cvs(x);
export fn coversine(x: Result<float64>) = cvs(x);
export fn coversine(x: Result<float32>) = cvs(x);

export fn cvc(x: float64) = 1.0 + sinf64(x);
export fn cvc(x: float32): Result<float32> {
  const val = cvc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn cvc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return cvc(x.getR());
}
export fn cvc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return cvc(x.getR());
}
export fn covercosine(x: float64) = cvc(x);
export fn covercosine(x: float32) = cvc(x);
export fn covercosine(x: Result<float64>) = cvc(x);
export fn covercosine(x: Result<float32>) = cvc(x);

export fn hav(x: float64) = versine(x) / 2.0;
export fn hav(x: float32): Result<float32> {
  const val = hav(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn hav(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return hav(x.getR());
}
export fn hav(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return hav(x.getR());
}
export fn haversine(x: float64) = hav(x);
export fn haversine(x: float32) = hav(x);
export fn haversine(x: Result<float64>) = hav(x);
export fn haversine(x: Result<float32>) = hav(x);

export fn hvc(x: float64) = vercosine(x) / 2.0;
export fn hvc(x: float32): Result<float32> {
  const val = hvc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn hvc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return hvc(x.getR());
}
export fn hvc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return hvc(x.getR());
}
export fn havercosine(x: float64) = hvc(x);
export fn havercosine(x: float32) = hvc(x);
export fn havercosine(x: Result<float64>) = hvc(x);
export fn havercosine(x: Result<float32>) = hvc(x);

export fn hcv(x: float64) = coversine(x) / 2.0;
export fn hcv(x: float32): Result<float32> {
  const val = hcv(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn hcv(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return hcv(x.getR());
}
export fn hcv(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return hcv(x.getR());
}
export fn hacoversine(x: float64) = hcv(x);
export fn hacoversine(x: float32) = hcv(x);
export fn hacoversine(x: Result<float64>) = hcv(x);
export fn hacoversine(x: Result<float32>) = hcv(x);

export fn hcc(x: float64) = covercosine(x) / 2.0;
export fn hcc(x: float32): Result<float32> {
  const val = hcc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn hcc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return hcc(x.getR());
}
export fn hcc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return hcc(x.getR());
}
export fn hacovercosine(x: float64) = hcc(x);
export fn hacovercosine(x: float32) = hcc(x);
export fn hacovercosine(x: Result<float64>) = hcc(x);
export fn hacovercosine(x: Result<float32>) = hcc(x);

export fn exs(x: float64) = secant(x) - 1.0;
export fn exs(x: float32): Result<float32> {
  const val = exs(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn exs(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return exs(x.getR());
}
export fn exs(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return exs(x.getR());
}
export fn exsecant(x: float64) = exs(x);
export fn exsecant(x: float32) = exs(x);
export fn exsecant(x: Result<float64>) = exs(x);
export fn exsecant(x: Result<float32>) = exs(x);

export fn exc(x: float64) = cosecant(x) - 1.0;
export fn exc(x: float32): Result<float32> {
  const val = exc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn exc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return exc(x.getR());
}
export fn exc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return exc(x.getR());
}
export fn excosecant(x: float64) = exc(x);
export fn excosecant(x: float32) = exc(x);
export fn excosecant(x: Result<float64>) = exc(x);
export fn excosecant(x: Result<float32>) = exc(x);

export fn crd(x: float64) = 2.0 * sine(x / 2.0);
export fn crd(x: float32): Result<float32> {
  const val = crd(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn crd(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return crd(x.getR());
}
export fn crd(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return crd(x.getR());
}
export fn chord(x: float64) = crd(x);
export fn chord(x: float32) = crd(x);
export fn chord(x: Result<float64>) = crd(x);
export fn chord(x: Result<float32>) = crd(x);

export fn aver(x: float64) = arccosine(1.0 - x);
export fn aver(x: float32): Result<float32> {
  const val = aver(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn aver(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return aver(x.getR());
}
export fn aver(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return aver(x.getR());
}
export fn arcversine(x: float64) = aver(x);
export fn arcversine(x: float32) = aver(x);
export fn arcversine(x: Result<float64>) = aver(x);
export fn arcversine(x: Result<float32>) = aver(x);

export fn avcs(x: float64) = arccosine(x - 1.0);
export fn avcs(x: float32): Result<float32> {
  const val = avcs(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn avcs(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return avcs(x.getR());
}
export fn avcs(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return avcs(x.getR());
}
export fn arcvercosine(x: float64) = avcs(x);
export fn arcvercosine(x: float32) = avcs(x);
export fn arcvercosine(x: Result<float64>) = avcs(x);
export fn arcvercosine(x: Result<float32>) = avcs(x);

export fn acvs(x: float64) = arcsine(1.0 - x);
export fn acvs(x: float32): Result<float32> {
  const val = acvs(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acvs(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acvs(x.getR());
}
export fn acvs(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acvs(x.getR());
}
export fn arccoversine(x: float64) = acvs(x);
export fn arccoversine(x: float32) = acvs(x);
export fn arccoversine(x: Result<float64>) = acvs(x);
export fn arccoversine(x: Result<float32>) = acvs(x);

export fn acvc(x: float64) = arcsine(x - 1.0);
export fn acvc(x: float32): Result<float32> {
  const val = acvc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acvc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acvc(x.getR());
}
export fn acvc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acvc(x.getR());
}
export fn arccovercosine(x: float64) = acvc(x);
export fn arccovercosine(x: float32) = acvc(x);
export fn arccovercosine(x: Result<float64>) = acvc(x);
export fn arccovercosine(x: Result<float32>) = acvc(x);

export fn ahav(x: float64) = arccosine(1.0 - 2.0 * x);
export fn ahav(x: float32): Result<float32> {
  const val = ahav(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn ahav(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ahav(x.getR());
}
export fn ahav(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ahav(x.getR());
}
export fn archaversine(x: float64) = ahav(x);
export fn archaversine(x: float32) = ahav(x);
export fn archaversine(x: Result<float64>) = ahav(x);
export fn archaversine(x: Result<float32>) = ahav(x);

export fn ahvc(x: float64) = arccosine(2.0 * x - 1.0);
export fn ahvc(x: float32): Result<float32> {
  const val = ahvc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn ahvc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ahvc(x.getR());
}
export fn ahvc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ahvc(x.getR());
}
export fn archavercosine(x: float64) = ahvc(x);
export fn archavercosine(x: float32) = ahvc(x);
export fn archavercosine(x: Result<float64>) = ahvc(x);
export fn archavercosine(x: Result<float32>) = ahvc(x);

export fn ahcv(x: float64) = arcsine(1.0 - 2.0 * x);
export fn ahcv(x: float32): Result<float32> {
  const val = ahcv(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn ahcv(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ahcv(x.getR());
}
export fn ahcv(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ahcv(x.getR());
}
export fn archacoversine(x: float64) = ahcv(x);
export fn archacoversine(x: float32) = ahcv(x);
export fn archacoversine(x: Result<float64>) = ahcv(x);
export fn archacoversine(x: Result<float32>) = ahcv(x);

export fn ahcc(x: float64) = arcsine(2.0 * x - 1.0);
export fn ahcc(x: float32): Result<float32> {
  const val = ahcc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn ahcc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ahcc(x.getR());
}
export fn ahcc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ahcc(x.getR());
}
export fn archacovercosine(x: float64) = ahcc(x);
export fn archacovercosine(x: float32) = ahcc(x);
export fn archacovercosine(x: Result<float64>) = ahcc(x);
export fn archacovercosine(x: Result<float32>) = ahcc(x);

export fn aexs(x: float64) = arccosine(1.0 / (x + 1.0));
export fn aexs(x: float32): Result<float32> {
  const val = aexs(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn aexs(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return aexs(x.getR());
}
export fn aexs(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return aexs(x.getR());
}
export fn arcexsecant(x: float64) = aexs(x);
export fn arcexsecant(x: float32) = aexs(x);
export fn arcexsecant(x: Result<float64>) = aexs(x);
export fn arcexsecant(x: Result<float32>) = aexs(x);

export fn aexc(x: float64) = arcsine(1.0 / (x + 1.0));
export fn aexc(x: float32): Result<float32> {
  const val = aexc(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn aexc(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return aexc(x.getR());
}
export fn aexc(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return aexc(x.getR());
}
export fn arcexcosecant(x: float64) = aexc(x);
export fn arcexcosecant(x: float32) = aexc(x);
export fn arcexcosecant(x: Result<float64>) = aexc(x);
export fn arcexcosecant(x: Result<float32>) = aexc(x);

export fn acrd(x: float64) = 2.0 * arcsine(x / 2.0);
export fn acrd(x: float32): Result<float32> {
  const val = acrd(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acrd(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acrd(x.getR());
}
export fn acrd(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acrd(x.getR());
}
export fn arcchord(x: float64) = acrd(x);
export fn arcchord(x: float32) = acrd(x);
export fn arcchord(x: Result<float64>) = acrd(x);
export fn arcchord(x: Result<float32>) = acrd(x);

export fn sinh(x: float64) = sinhf64(x);
export fn sinh(x: float32) = toFloat32(sinhf64(toFloat64(x)));
export fn sinh(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(sinh(x.getR()));
}
export fn sinh(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(sinh(x.getR()));
}
export fn hyperbolicSine(x: float64) = sinh(x);
export fn hyperbolicSine(x: float32) = sinh(x);
export fn hyperbolicSine(x: Result<float64>) = sinh(x);
export fn hyperbolicSine(x: Result<float32>) = sinh(x);

export fn cosh(x: float64) = coshf64(x);
export fn cosh(x: float32) = toFloat32(coshf64(toFloat64(x)));
export fn cosh(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(cosh(x.getR()));
}
export fn cosh(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(cosh(x.getR()));
}
export fn hyperbolicCosine(x: float64) = cosh(x);
export fn hyperbolicCosine(x: float32) = cosh(x);
export fn hyperbolicCosine(x: Result<float64>) = cosh(x);
export fn hyperbolicCosine(x: Result<float32>) = cosh(x);

export fn tanh(x: float64) = tanhf64(x);
export fn tanh(x: float32) = toFloat32(tanhf64(toFloat64(x)));
export fn tanh(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return ok(tanh(x.getR()));
}
export fn tanh(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return ok(tanh(x.getR()));
}
export fn hyperbolicTangent(x: float64) = tanh(x);
export fn hyperbolicTangent(x: float32) = tanh(x);
export fn hyperbolicTangent(x: Result<float64>) = tanh(x);
export fn hyperbolicTangent(x: Result<float32>) = tanh(x);

export fn sech(x: float64) = 1.0 / cosh(x);
export fn sech(x: float32): Result<float32> {
  const val = sech(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn sech(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return sech(x.getR());
}
export fn sech(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return sech(x.getR());
}
export fn hyperbolicSecant(x: float64) = sech(x);
export fn hyperbolicSecant(x: float32) = sech(x);
export fn hyperbolicSecant(x: Result<float64>) = sech(x);
export fn hyperbolicSecant(x: Result<float32>) = sech(x);

export fn csch(x: float64) = 1.0 / sinh(x);
export fn csch(x: float32): Result<float32> {
  const val = csch(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn csch(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return csch(x.getR());
}
export fn csch(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return csch(x.getR());
}
export fn hyperbolicCosecant(x: float64) = csch(x);
export fn hyperbolicCosecant(x: float32) = csch(x);
export fn hyperbolicCosecant(x: Result<float64>) = csch(x);
export fn hyperbolicCosecant(x: Result<float32>) = csch(x);

export fn coth(x: float64) = 1.0 / tanh(x);
export fn coth(x: float32): Result<float32> {
  const val = coth(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn coth(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return coth(x.getR());
}
export fn coth(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return coth(x.getR());
}
export fn hyperbolicCotangent(x: float64) = coth(x);
export fn hyperbolicCotangent(x: float32) = coth(x);
export fn hyperbolicCotangent(x: Result<float64>) = coth(x);
export fn hyperbolicCotangent(x: Result<float32>) = coth(x);

export fn asinh(x: float64) = ln(x + sqrt(x ** 2.0 + 1.0));
export fn asinh(x: float32): Result<float32> {
  const val = asinh(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn asinh(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return asinh(x.getR());
}
export fn asinh(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return asinh(x.getR());
}
export fn hyperbolicArcsine(x: float64) = asinh(x);
export fn hyperbolicArcsine(x: float32) = asinh(x);
export fn hyperbolicArcsine(x: Result<float64>) = asinh(x);
export fn hyperbolicArcsine(x: Result<float32>) = asinh(x);

export fn acosh(x: float64) = ln(x + sqrt(x ** 2.0 - 1.0));
export fn acosh(x: float32): Result<float32> {
  const val = acosh(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acosh(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acosh(x.getR());
}
export fn acosh(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acosh(x.getR());
}
export fn hyperbolicArccosine(x: float64) = acosh(x);
export fn hyperbolicArccosine(x: float32) = acosh(x);
export fn hyperbolicArccosine(x: Result<float64>) = acosh(x);
export fn hyperbolicArccosine(x: Result<float32>) = acosh(x);

export fn atanh(x: float64) = ln((x + 1.0) / (x - 1.0)) / 2.0;
export fn atanh(x: float32): Result<float32> {
  const val = atanh(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn atanh(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return atanh(x.getR());
}
export fn atanh(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return atanh(x.getR());
}
export fn hyperbolicArctangent(x: float64) = atanh(x);
export fn hyperbolicArctangent(x: float32) = atanh(x);
export fn hyperbolicArctangent(x: Result<float64>) = atanh(x);
export fn hyperbolicArctangent(x: Result<float32>) = atanh(x);

export fn asech(x: float64) = ln((1.0 + sqrt(1.0 - x ** 2.0)) / x);
export fn asech(x: float32): Result<float32> {
  const val = asech(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn asech(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return asech(x.getR());
}
export fn asech(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return asech(x.getR());
}
export fn hyperbolicArcsecant(x: float64) = asech(x);
export fn hyperbolicArcsecant(x: float32) = asech(x);
export fn hyperbolicArcsecant(x: Result<float64>) = asech(x);
export fn hyperbolicArcsecant(x: Result<float32>) = asech(x);

export fn acsch(x: float64) = ln((1.0 / x) + sqrt(1.0 / x ** 2.0 + 1.0));
export fn acsch(x: float32): Result<float32> {
  const val = acsch(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acsch(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acsch(x.getR());
}
export fn acsch(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acsch(x.getR());
}
export fn hyperbolicArccosecant(x: float64) = acsch(x);
export fn hyperbolicArccosecant(x: float32) = acsch(x);
export fn hyperbolicArccosecant(x: Result<float64>) = acsch(x);
export fn hyperbolicArccosecant(x: Result<float32>) = acsch(x);

export fn acoth(x: float64) = ln((x + 1.0) / (x - 1.0)) / 2.0;
export fn acoth(x: float32): Result<float32> {
  const val = acoth(x.toFloat64());
  if val.isErr() {
    return val;
  }
  return ok(val.getR().toFloat32());
}
export fn acoth(x: Result<float64>): Result<float64> {
  if x.isErr() {
    return x;
  }
  return acoth(x.getR());
}
export fn acoth(x: Result<float32>): Result<float32> {
  if x.isErr() {
    return x;
  }
  return acoth(x.getR());
}
export fn hyperbolicArccotangent(x: float64) = acoth(x);
export fn hyperbolicArccotangent(x: float32) = acoth(x);
export fn hyperbolicArccotangent(x: Result<float64>) = acoth(x);
export fn hyperbolicArccotangent(x: Result<float32>) = acoth(x);

