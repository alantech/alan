from @std/app import start, print, exit, eprint
from @std/cmd import exec

/**
 * @std/deps - The entrypoint to install dependencies for an alan program 
 * and define permissions over libraries
 */

type Dependency {
  url: string,
  block: Array<string>,
  fullBlock: Array<string>,
  group: string,
  name: string,
  rev: string,
  remote: string,
}

type RawPackage {
  std: Array<string>,
  dependencies: Array<Dependency>,
  block: Array<string>,
  fullBlock: Array<string>,
}

// Exporting type as alias since I could not export the type and used it in this file at the same time
export type Package = RawPackage

type PackageDependency {
  pkg: RawPackage,
  dep: Dependency,
}

// The `install` event
export event install: RawPackage

fn package(): RawPackage {
  let emptyArrStr = new Array<string> [];
  let emptyArrDep = new Array<Dependency> [];
  let pkg = new RawPackage {
    std: emptyArrStr,
    dependencies: emptyArrDep,
    block: emptyArrStr,
    fullBlock: emptyArrStr,
  };
  return pkg;
}

export fn using(pkg: RawPackage, std: Array<string>): RawPackage {
  // Since alan is blocking the re-asignation of pkg.std we create a new object as a work around
  return new RawPackage {
    std: pkg.std + std,
    dependencies: pkg.dependencies,
    block: pkg.block,
    fullBlock: pkg.fullBlock,
  };
}

export fn dependency(pkg: RawPackage, url: string): PackageDependency {
  const emptyArrStr = new Array<string> [];
  // The dependency url have to follow the git URLs standard https://git-scm.com/docs/git-clone#_git_urls
  // The revisions (branches, tags or SHAs) will be delimited using a # (as npm or other package managers)
  const parts = url.split('#');
  const remote = parts[0] || '';
  const rev = parts[1] || '';
  const remoteParts = remote.split('/');
  const gitRepo = remoteParts[remoteParts.length() - 1] || '';
  const repo = gitRepo.split('.')[0] || '';
  const group = remoteParts[remoteParts.length() - 2] || '';
  const dep = new Dependency {
    url: url,
    block: emptyArrStr,
    fullBlock: emptyArrStr,
    group: group,
    name: repo,
    rev: rev,
    remote: remote,
  };
  return new PackageDependency {
    pkg: pkg,
    dep: dep,
  };
}

export fn add(pkgd: PackageDependency): RawPackage {
  pkgd.pkg.dependencies.push(pkgd.dep);
  return pkgd.pkg;
}
  
export fn block(pkg: RawPackage, block: string): RawPackage {
  pkg.block.push(block);
  return pkg;
}

export fn block(pkg: RawPackage, block: Array<string>): RawPackage {
  pkg.block = pkg.block + block;
  return pkg;
}

export fn block(pkgd: PackageDependency, block: string): PackageDependency {
  pkgd.dep.block.push(block);
  return pkgd;
}

export fn block(pkgd: PackageDependency, block: Array<string>): PackageDependency {
  pkgd.dep.block = pkgd.dep.block + block;
  return pkgd;
}

export fn fullBlock(pkg: RawPackage, block: string): RawPackage {
  pkg.fullBlock.push(block);
  return pkg;
}

export fn fullBlock(pkg: RawPackage, block: Array<string>): RawPackage {
  pkg.fullBlock = pkg.fullBlock + block;
  return pkg;
}

export fn fullBlock(pkgd: PackageDependency, block: string): PackageDependency {
  pkgd.dep.fullBlock.push(fullBlock);
  return pkgd;
}

export fn fullBlock(pkgd: PackageDependency, block: Array<string>): PackageDependency {
  pkgd.dep.fullBlock = pkgd.dep.fullBlock + block;
  return pkgd;
}

// The `commit` function takes the packge as argument.
// It install all dependencies added and apply necessary blocks.
export fn commit(pkg: RawPackage) {
  // Remove std dep from blacklist
  const blacklist = getBlacklist(pkg.std);
  // Create mocks for blacklisted std libs
  blockStd(blacklist);
  // Download and install each dep
  downloadDependencies(pkg.dependencies);
  // Apply blocks defined for each dependency
  applyDependencyBlocks(pkg.dependencies);
  // Block lib for all dependencies once.
  blockForAllDependencies(pkg.block, false);
  // Block lib for all dependencies once. If any dependency is mocking it already remove that behaviour.
  blockForAllDependencies(pkg.fullBlock, true);
  emit exit 0;
}

fn getBlacklist(std: Array<string>): Array<string> {
  const stdList = [
    '@std/app', '@std/avmdaemon', '@std/cmd', '@std/datastore', '@std/deps', '@std/http', 
    '@std/httpcommon', '@std/httpserver', '@std/json', '@std/root', '@std/seq', '@std/tcp',
    '@std/tcpserver', '@std/trig',
  ];
  return stdList.filter(fn (a: string) = !(pkg.std.find(fn (b: string) = eq(a,b)).isOk()));
}

fn blockStd(blacklist: Array<string>) {
  const dependencies = 'dependencies';
  if !dirExist(dependencies) {
    mkDir(dependencies);
  }
  const modulesPath = [dependencies, 'modules'].join('/');
  if !dirExist(modulesPath) {
    mkDir(modulesPath);
  }
  const stdPath = [modulesPath, 'std'].join('/');
  if !dirExist(stdPath) {
    mkDir(stdPath);
  }
  blacklist.map(fn (lib: string) {
    const cleanedLib = cleanLib(lib);
    mkDir(modulesPath + '/' + cleanedLib);
    addMockFile(modulesPath + '/' + cleanedLib + '/index.ln');
  });
}

fn downloadDependencies(dependencies: Array<Dependency>) {
  dependencies.map(fn (dep: Dependency) {
    // TODO implement proper error handling
    const remote = dep.remote;
    const repo = dep.name;
    const group = dep.group;
    const rev = dep.rev;
    const dest = 'dependencies/' + group + '/' + repo;
    const rm = exec('rm -rf ./' + dest);
    const cloneCmd = 'git clone ' + remote + ' ./' + dest;
    const gitClone = exec(cloneCmd + (rev != '' ? (&& ) : ''));
    if gitClone.exitCode != 0 {
      eprint(gitClone.stderr);
    }
    if rev != '' {
      const gitReset = exec('cd ' + dest + ' && git reset --hard ' + rev);
      if gitReset.exitCode != 0 {
        const gitReset = exec('cd ' + dest + ' && git reset --hard origin/' + rev);
        if gitReset.exitCode != 0 {
          eprint(gitReset.stderr);
        }
      }
    }
    const rm2 = exec('rm -rf ./' + dest + '/.git');
    const maybeRecurse = exec('cd ' + dest + ' && alan install');
  });
}

fn applyDependencyBlocks(dependencies: Array<Dependency>) {
  dependencies.map(fn (dep: Dependency) {
    applyDependencyBlock(dep.name, dep.group, dep.block, false);
    applyDependencyBlock(dep.name, dep.group, dep.block, true);
  });
}

fn applyDependencyBlock(name: string, group: string, blocks: Array<string>, isFullBlock: bool) {
  const dependenciesDir = 'dependencies';
  const modulesDir = 'modules';
  if blocks.length() == 0 {
    return;
  }
  const innerDependenciesModulesPath = [dependenciesDir, group, name, modulesDir].join('/');
  if !dirExist(innerDependenciesModulesPath) {
    mkDir(innerDependenciesModulesPath);
  }
  blocks.map(fn (lib: string) {
    const cleanedLib = cleanLib(lib);
    const libSplit = cleanedLib.split('/');
    const innerGroup = libSplit[0].getOr('');
    const innerName = libSplit[1].getOr('');
    const innerGroupPath = [dependenciesDir, group, name, modulesDir, innerGroup].join('/');
    if !dirExist(innerGroupPath) {
      mkDir(innerGroupPath);
    }
    const innerNamePath = [dependenciesDir, group, name, modulesDir, innerGroup, innerName].join('/');
    if !dirExist(innerNamePath) {
      mkDir(innerNamePath);
      addMockFile(innerNamePath + '/index.ln');
    } else {
      if isFullBlock {
        let mockFile = innerNamePath + '/index.ln';
        if !removeFile(mockFile) {
          mockFile = innerNamePath + '/' + name + '.ln';
          removeFile(mockFile);
        }
        addMockFile(mockFile);
      }
    }
  });
}

fn dirExist(path: string): bool {
  return exec('stat ' + path).exitCode == 0;
}

fn mkDir(path: string) {
  exec('mkdir ' + path);
}

fn removeFile(path: string): bool {
  return exec('rm ' + path).exitCode == 0;
}

fn lsDir(path: string): Array<string> {
  return exec('ls ' + path).stdout.split("\n");
}

fn addMockFile(path: string) {
  exec('echo "export const mock = true;" > ' + path);
}

fn cleanLib(lib: string): string {
  if lib.matches('@') && lib.index('@') == 0 {
    const libSplit = lib.split('');
    libSplit.delete(1);
    return libSplit.join(''); 
  } else {
    return lib;
  }
}

fn blockForAllDependencies(blocks: Array<string>, isFullBlock: bool) {
  const dependenciesDir = 'dependencies';
  const modulesDir = 'modules';
  if blocks.length() == 0 {
    return;
  }
  if !dirExist(dependenciesDir) {
    mkDir(dependenciesDir);
  }
  const depenenciesModulesPath = [dependenciesDir, modulesDir].join('/');
  if !dirExist(depenenciesModulesPath) {
    mkDir(depenenciesModulesPath);
  }
  blocks.map(fn (lib: string) {
    const cleanedLib = cleanLib(lib);
    const libSplit = cleanedLib.split('/');
    const innerGroup = libSplit[0].getOr('');
    const innerName = libSplit[1].getOr('');
    const innerGroupPath = [dependenciesDir, modulesDir, innerGroup].join('/');
    if !dirExist(innerGroupPath) {
      mkDir(innerGroupPath);
    }
    const innerNamePath = [dependenciesDir, modulesDir, innerGroup, innerName].join('/');
    if !dirExist(innerNamePath) {
      mkDir(innerNamePath);
    } else {
      if isFullBlock {
        const deps = lsDir(dependenciesDir);
        deps.map(fn (group: string) {
          if group != 'modules' {
            const lsGroup = lsDir([dependenciesDir, group].join('/'));
            lsGroup.map(fn (name: string) {
              const path = [dependenciesDir, group, name, modulesDir, innerGroup, innerName].join('/');
              if dirExist(path) {
                let mockFile = path + '/index.ln';
                if !removeFile(mockFile) {
                  mockFile = path + '/' + innerName + '.ln';
                  removeFile(mockFile);
                }
              }
            });
          }
        });
      }
    }
  });
}

// Emit the `install` event on app `start`
on start {
  // TODO: optimize to parse the existing dependencies tree, if any, to build up a list of dependencies
  // that are already installed so calls by the user to install them again (assuming the version is identical)
  // are skipped, calls to upgrade or install new dependencies are performed, and then the remaining list
  // of dependencies at the end are removed.
  exec('rm -rf dependencies');
  exec('mkdir dependencies');
  // package().dependency('https://github.com/alantech/nestedhellodep.git#v0.1').add().commit();
  // package().dependency('git@github.com:alantech/nestedhellodep.git').add().commit();
  // package().dependency('git@github.com:alantech/nestedhellodep.git#deps-perm').add().commit();
  // package().dependency('git@github.com:alantech/nestedhellodep.git#v0.1').add().commit();e6e9934307076e5fde9864ffe03ab1c8da8e6836
  // package().dependency('git@github.com:alantech/nestedhellodep.git#e6e9934307076e5fde9864ffe03ab1c8da8e6836').add().commit();
  emit install package();
}
