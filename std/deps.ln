from @std/app import start, print, exit
from @std/cmd import exec

/**
 * @std/deps - The entrypoint to install dependencies for an alan program
 */

// The `install` event
export event install: void

// The `add` function takes a string that describes a .git repository and install it in /dependencies
export fn add(remote: string) {
  // TODO implement proper error handling
  const parts = remote.split('/')
  const repo = parts[length(parts) - 1] || ''
  const group = parts[parts.length() - 2] || ''
  const dest = '/dependencies/' + group + '/' + repo
  const rm = exec('rm -rf .' + dest)
  const git = exec('git clone ' + remote + ' .' + dest)
  print(git.stderr) 
  const rm2 = exec('rm -rf .' + dest + '/.git')
}

// The `commit` function takes no arguments. Currently just causes the application to quit, but
// eventually would be the point where the dependencies defined by the calls to `add` could be
// compared against the currently-installed dependencies, and a faster install would be possible
export fn commit() {
  emit exit 0
}

// Emit the `install` event on app `start`
on start {
  // TODO: optimize to parse the existing dependencies tree, if any, to build up a list of dependencies
  // that are already installed so calls by the user to install them again (assuming the version is identical)
  // are skipped, calls to upgrade or install new dependencies are performed, and then the remaining list
  // of dependencies at the end are removed.
  exec('rm -rf dependencies')
  exec('mkdir dependencies')
  emit install
}
