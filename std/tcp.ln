/**
 * @std/tcp - Built-in client for TCP
 */

// Built-in opaque types for the AVM and js-runtime to implement
export TcpChannel
export Chunk

// The TcpContext type. This type is also built-in as the it is emitted in the
// `chunk` and `tcpClose` events
export type TcpContext<C> {
  channel: TcpChannel,
  context: C,
}

// Built-in events for TCP channels, both client and server.
// `chunk` has the signature `event chunk: Chunk`
export chunk
// `tcpClose` has the signature `event tcpClose: TcpContext<C>`
export tcpClose

// Creates a client connection to a TCP server.
// `tcpconn` has the type signature `fn(string, int16): TcpChannel`
export fn connect(host: string, port: int64) = tcpconn(host, port.toInt16());
export fn connect(host: string, port: int16) = tcpconn(host, port);

// Attaches a context value to a channel. Exposed to the other events wrapped the other way around
// but this type is opaque so it is fine. `tcpAddC` has the type `fn(TcpChannel, any): TcpChannel`
export fn addContext(channel: TcpChannel, context: any) = tcpAddC(channel, context);

// Marks the channel as ready to receive data from the other side. Useful if data is immediately
// pushed at you, which is common for servers, but also possible for clients
// `tcpReady` has the type `fn (TcpChannel): void`
export fn ready(channel: TcpChannel) = tcpReady(channel);

// Reads a chunk of data from a channel. Since this is supposed to be called when the `chunk` event
// is triggered, it is a CPU-bound operation that returns a chunk referencing actual data on the
// first call, and a chunk representing no data on subsequent calls until the event is triggered
// again. `tcpRead` has the type `fn(TcpChannel): Chunk`
export fn read(channel: TcpChannel) = tcpRead(channel);

/**
 * TODO: The following functions should eventually be added for manipulating chunks, but they will
 * be implemented in a followup PR.
 *
 * fn toInt8Array(chunk: Chunk): Array<int8>
 * fn toAsciiString(chunk: Chunk): String
 * fn toUTF8ResultString(chunk: Chunk): Result<String>
 *
 */

// Writes a chunk of data to a channel. This can be called as many times as desired whenever desired
// but likely makes sense to happen on `chunk` events when there is some data to respond to. Though
// an HTTP client built on top of this would likely write a lot of data immediately after creating
// the connection. `tcpWrite` has the type `fn(TcpChannel, Chunk): TcpChannel`
export fn write(channel: TcpChannel, chunk: Chunk) = tcpWrite(channel, chunk);

/**
 * TODO: The following functions should eventually be added for manipulating Alan types into chunks,
 * but they will be implemented in a followup PR.
 *
 * fn toChunk(a8: Array<int8>): Chunk
 * fn toChunk(s: String): Chunk
 * fn toChunk(s: String, encoding: String): Result<Chunk>
 *
 * `encoding` would ideally be an enum if/when we add them to the language, but for now is an
 * arbitrary string of the encoding format. Can fail if the encoding isn't known or if the
 * provided string can't be encoded in the specified format.
 *
 */

// Closes a channel. Always succeeds even if the underlying channel is already closed.
// `tcpTerm` has the type `fn(TcpChannel): void` (called `tcpTerm` to not clash with the `tcpClose`
// event defined above
export fn close(channel: TcpChannel) = tcpTerm(channel);

/**
 * TODO: The following functions should eventually be added for inspecting channel status, but they
 * will be implemented in a followup PR.
 *
 * fn getState(channel: TcpChannel): string
 * fn getCloseReason(channel: TcpChannel): string
 *
 */
