/**
 * @std/avmdaemon - A module for manipulating the AVM in daemon mode
 *
 * Does nothing in JS or one-off running an AVM, but provides access to special functionality
 * enabled when running as a cluster. For now, this is only allowing user-defined extensions to the
 * control port, but should eventually expose many things like the stats tracking, live-swapping of
 * running code, etc.
 */

from @std/httpcommon import Connection, InternalRequest, InternalResponse, Request, Response

/**
 * The Control Port
 */

// The controlPort event
export event controlPort: Connection

// The special control port event with a signature like `event __ctrl: InternalRequest`
// This wraper function takes the internal request object, converts it to the user-friendly
// connection object, and then emits it on a new event for the user code to pick up
on __ctrl fn (conn: InternalRequest) {
  emit controlPort new Connection {
    req: new Request {
      method: conn.method,
      url: conn.url,
      headers: toHashMap(conn.headers),
      body: conn.body,
    },
    res: new Response {
      status: 404, // If not set by the user, assume it doesn't exist
      headers: newHashMap('Content-Length', '0'), // If not set by the user, assume no data
      body: '', // If not set by the user, assume no data
      connId: conn.connId,
    },
  };
}

/**
 * The Cluster Secret
 */

export fn getClusterSecret(): Maybe<string> = getcs();
